
oled1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013160  0800b368  0800b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e4c8  0801e4c8  00032080  2**0
                  CONTENTS
  4 .ARM          00000008  0801e4c8  0801e4c8  0002e4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e4d0  0801e4d0  00032080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e4d0  0801e4d0  0002e4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e4d4  0801e4d4  0002e4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002080  20000000  0801e4d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00032080  2**0
                  CONTENTS
 10 .bss          000009cc  20002080  20002080  00032080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a4c  20002a4c  00032080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00032080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000320b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014c5d  00000000  00000000  000320f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d59  00000000  00000000  00046d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  0004aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c47  00000000  00000000  0004bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f1c  00000000  00000000  0004c76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016f9f  00000000  00000000  0007068b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca729  00000000  00000000  0008762a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004764  00000000  00000000  00151d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001564b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20002080 	.word	0x20002080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b350 	.word	0x0800b350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20002084 	.word	0x20002084
 80001c4:	0800b350 	.word	0x0800b350

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2uiz>:
 80008a4:	004a      	lsls	r2, r1, #1
 80008a6:	d211      	bcs.n	80008cc <__aeabi_d2uiz+0x28>
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d211      	bcs.n	80008d2 <__aeabi_d2uiz+0x2e>
 80008ae:	d50d      	bpl.n	80008cc <__aeabi_d2uiz+0x28>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d40e      	bmi.n	80008d8 <__aeabi_d2uiz+0x34>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	fa23 f002 	lsr.w	r0, r3, r2
 80008ca:	4770      	bx	lr
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	4770      	bx	lr
 80008d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008d6:	d102      	bne.n	80008de <__aeabi_d2uiz+0x3a>
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	4770      	bx	lr
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	4770      	bx	lr

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_uldivmod>:
 8000984:	b953      	cbnz	r3, 800099c <__aeabi_uldivmod+0x18>
 8000986:	b94a      	cbnz	r2, 800099c <__aeabi_uldivmod+0x18>
 8000988:	2900      	cmp	r1, #0
 800098a:	bf08      	it	eq
 800098c:	2800      	cmpeq	r0, #0
 800098e:	bf1c      	itt	ne
 8000990:	f04f 31ff 	movne.w	r1, #4294967295
 8000994:	f04f 30ff 	movne.w	r0, #4294967295
 8000998:	f000 b970 	b.w	8000c7c <__aeabi_idiv0>
 800099c:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a4:	f000 f806 	bl	80009b4 <__udivmoddi4>
 80009a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr

080009b4 <__udivmoddi4>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	9e08      	ldr	r6, [sp, #32]
 80009ba:	460d      	mov	r5, r1
 80009bc:	4604      	mov	r4, r0
 80009be:	460f      	mov	r7, r1
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d14a      	bne.n	8000a5a <__udivmoddi4+0xa6>
 80009c4:	428a      	cmp	r2, r1
 80009c6:	4694      	mov	ip, r2
 80009c8:	d965      	bls.n	8000a96 <__udivmoddi4+0xe2>
 80009ca:	fab2 f382 	clz	r3, r2
 80009ce:	b143      	cbz	r3, 80009e2 <__udivmoddi4+0x2e>
 80009d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009d4:	f1c3 0220 	rsb	r2, r3, #32
 80009d8:	409f      	lsls	r7, r3
 80009da:	fa20 f202 	lsr.w	r2, r0, r2
 80009de:	4317      	orrs	r7, r2
 80009e0:	409c      	lsls	r4, r3
 80009e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009e6:	fa1f f58c 	uxth.w	r5, ip
 80009ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80009ee:	0c22      	lsrs	r2, r4, #16
 80009f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80009f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009f8:	fb01 f005 	mul.w	r0, r1, r5
 80009fc:	4290      	cmp	r0, r2
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x62>
 8000a00:	eb1c 0202 	adds.w	r2, ip, r2
 8000a04:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a08:	f080 811c 	bcs.w	8000c44 <__udivmoddi4+0x290>
 8000a0c:	4290      	cmp	r0, r2
 8000a0e:	f240 8119 	bls.w	8000c44 <__udivmoddi4+0x290>
 8000a12:	3902      	subs	r1, #2
 8000a14:	4462      	add	r2, ip
 8000a16:	1a12      	subs	r2, r2, r0
 8000a18:	b2a4      	uxth	r4, r4
 8000a1a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a1e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a22:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a26:	fb00 f505 	mul.w	r5, r0, r5
 8000a2a:	42a5      	cmp	r5, r4
 8000a2c:	d90a      	bls.n	8000a44 <__udivmoddi4+0x90>
 8000a2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a32:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a36:	f080 8107 	bcs.w	8000c48 <__udivmoddi4+0x294>
 8000a3a:	42a5      	cmp	r5, r4
 8000a3c:	f240 8104 	bls.w	8000c48 <__udivmoddi4+0x294>
 8000a40:	4464      	add	r4, ip
 8000a42:	3802      	subs	r0, #2
 8000a44:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	b11e      	cbz	r6, 8000a56 <__udivmoddi4+0xa2>
 8000a4e:	40dc      	lsrs	r4, r3
 8000a50:	2300      	movs	r3, #0
 8000a52:	e9c6 4300 	strd	r4, r3, [r6]
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0xbc>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	f000 80ed 	beq.w	8000c3e <__udivmoddi4+0x28a>
 8000a64:	2100      	movs	r1, #0
 8000a66:	e9c6 0500 	strd	r0, r5, [r6]
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a70:	fab3 f183 	clz	r1, r3
 8000a74:	2900      	cmp	r1, #0
 8000a76:	d149      	bne.n	8000b0c <__udivmoddi4+0x158>
 8000a78:	42ab      	cmp	r3, r5
 8000a7a:	d302      	bcc.n	8000a82 <__udivmoddi4+0xce>
 8000a7c:	4282      	cmp	r2, r0
 8000a7e:	f200 80f8 	bhi.w	8000c72 <__udivmoddi4+0x2be>
 8000a82:	1a84      	subs	r4, r0, r2
 8000a84:	eb65 0203 	sbc.w	r2, r5, r3
 8000a88:	2001      	movs	r0, #1
 8000a8a:	4617      	mov	r7, r2
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d0e2      	beq.n	8000a56 <__udivmoddi4+0xa2>
 8000a90:	e9c6 4700 	strd	r4, r7, [r6]
 8000a94:	e7df      	b.n	8000a56 <__udivmoddi4+0xa2>
 8000a96:	b902      	cbnz	r2, 8000a9a <__udivmoddi4+0xe6>
 8000a98:	deff      	udf	#255	; 0xff
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8090 	bne.w	8000bc4 <__udivmoddi4+0x210>
 8000aa4:	1a8a      	subs	r2, r1, r2
 8000aa6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aaa:	fa1f fe8c 	uxth.w	lr, ip
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ab4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ab8:	0c22      	lsrs	r2, r4, #16
 8000aba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000abe:	fb0e f005 	mul.w	r0, lr, r5
 8000ac2:	4290      	cmp	r0, r2
 8000ac4:	d908      	bls.n	8000ad8 <__udivmoddi4+0x124>
 8000ac6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aca:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0x122>
 8000ad0:	4290      	cmp	r0, r2
 8000ad2:	f200 80cb 	bhi.w	8000c6c <__udivmoddi4+0x2b8>
 8000ad6:	4645      	mov	r5, r8
 8000ad8:	1a12      	subs	r2, r2, r0
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ae0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ae4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae8:	fb0e fe00 	mul.w	lr, lr, r0
 8000aec:	45a6      	cmp	lr, r4
 8000aee:	d908      	bls.n	8000b02 <__udivmoddi4+0x14e>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af8:	d202      	bcs.n	8000b00 <__udivmoddi4+0x14c>
 8000afa:	45a6      	cmp	lr, r4
 8000afc:	f200 80bb 	bhi.w	8000c76 <__udivmoddi4+0x2c2>
 8000b00:	4610      	mov	r0, r2
 8000b02:	eba4 040e 	sub.w	r4, r4, lr
 8000b06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b0a:	e79f      	b.n	8000a4c <__udivmoddi4+0x98>
 8000b0c:	f1c1 0720 	rsb	r7, r1, #32
 8000b10:	408b      	lsls	r3, r1
 8000b12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b1a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b22:	40fd      	lsrs	r5, r7
 8000b24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b2e:	fa1f fe8c 	uxth.w	lr, ip
 8000b32:	fb09 5518 	mls	r5, r9, r8, r5
 8000b36:	0c1c      	lsrs	r4, r3, #16
 8000b38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b3c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	fa02 f201 	lsl.w	r2, r2, r1
 8000b46:	fa00 f001 	lsl.w	r0, r0, r1
 8000b4a:	d90b      	bls.n	8000b64 <__udivmoddi4+0x1b0>
 8000b4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b54:	f080 8088 	bcs.w	8000c68 <__udivmoddi4+0x2b4>
 8000b58:	42a5      	cmp	r5, r4
 8000b5a:	f240 8085 	bls.w	8000c68 <__udivmoddi4+0x2b4>
 8000b5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b62:	4464      	add	r4, ip
 8000b64:	1b64      	subs	r4, r4, r5
 8000b66:	b29d      	uxth	r5, r3
 8000b68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b70:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b74:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b78:	45a6      	cmp	lr, r4
 8000b7a:	d908      	bls.n	8000b8e <__udivmoddi4+0x1da>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b84:	d26c      	bcs.n	8000c60 <__udivmoddi4+0x2ac>
 8000b86:	45a6      	cmp	lr, r4
 8000b88:	d96a      	bls.n	8000c60 <__udivmoddi4+0x2ac>
 8000b8a:	3b02      	subs	r3, #2
 8000b8c:	4464      	add	r4, ip
 8000b8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b92:	fba3 9502 	umull	r9, r5, r3, r2
 8000b96:	eba4 040e 	sub.w	r4, r4, lr
 8000b9a:	42ac      	cmp	r4, r5
 8000b9c:	46c8      	mov	r8, r9
 8000b9e:	46ae      	mov	lr, r5
 8000ba0:	d356      	bcc.n	8000c50 <__udivmoddi4+0x29c>
 8000ba2:	d053      	beq.n	8000c4c <__udivmoddi4+0x298>
 8000ba4:	b156      	cbz	r6, 8000bbc <__udivmoddi4+0x208>
 8000ba6:	ebb0 0208 	subs.w	r2, r0, r8
 8000baa:	eb64 040e 	sbc.w	r4, r4, lr
 8000bae:	fa04 f707 	lsl.w	r7, r4, r7
 8000bb2:	40ca      	lsrs	r2, r1
 8000bb4:	40cc      	lsrs	r4, r1
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc4:	f1c3 0120 	rsb	r1, r3, #32
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	fa20 f201 	lsr.w	r2, r0, r1
 8000bd0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bd4:	409d      	lsls	r5, r3
 8000bd6:	432a      	orrs	r2, r5
 8000bd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bdc:	fa1f fe8c 	uxth.w	lr, ip
 8000be0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be4:	fb07 1510 	mls	r5, r7, r0, r1
 8000be8:	0c11      	lsrs	r1, r2, #16
 8000bea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bee:	fb00 f50e 	mul.w	r5, r0, lr
 8000bf2:	428d      	cmp	r5, r1
 8000bf4:	fa04 f403 	lsl.w	r4, r4, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x258>
 8000bfa:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c02:	d22f      	bcs.n	8000c64 <__udivmoddi4+0x2b0>
 8000c04:	428d      	cmp	r5, r1
 8000c06:	d92d      	bls.n	8000c64 <__udivmoddi4+0x2b0>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	1b49      	subs	r1, r1, r5
 8000c0e:	b292      	uxth	r2, r2
 8000c10:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c14:	fb07 1115 	mls	r1, r7, r5, r1
 8000c18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c1c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c20:	4291      	cmp	r1, r2
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x282>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c2c:	d216      	bcs.n	8000c5c <__udivmoddi4+0x2a8>
 8000c2e:	4291      	cmp	r1, r2
 8000c30:	d914      	bls.n	8000c5c <__udivmoddi4+0x2a8>
 8000c32:	3d02      	subs	r5, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a52      	subs	r2, r2, r1
 8000c38:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c3c:	e738      	b.n	8000ab0 <__udivmoddi4+0xfc>
 8000c3e:	4631      	mov	r1, r6
 8000c40:	4630      	mov	r0, r6
 8000c42:	e708      	b.n	8000a56 <__udivmoddi4+0xa2>
 8000c44:	4639      	mov	r1, r7
 8000c46:	e6e6      	b.n	8000a16 <__udivmoddi4+0x62>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	e6fb      	b.n	8000a44 <__udivmoddi4+0x90>
 8000c4c:	4548      	cmp	r0, r9
 8000c4e:	d2a9      	bcs.n	8000ba4 <__udivmoddi4+0x1f0>
 8000c50:	ebb9 0802 	subs.w	r8, r9, r2
 8000c54:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	e7a3      	b.n	8000ba4 <__udivmoddi4+0x1f0>
 8000c5c:	4645      	mov	r5, r8
 8000c5e:	e7ea      	b.n	8000c36 <__udivmoddi4+0x282>
 8000c60:	462b      	mov	r3, r5
 8000c62:	e794      	b.n	8000b8e <__udivmoddi4+0x1da>
 8000c64:	4640      	mov	r0, r8
 8000c66:	e7d1      	b.n	8000c0c <__udivmoddi4+0x258>
 8000c68:	46d0      	mov	r8, sl
 8000c6a:	e77b      	b.n	8000b64 <__udivmoddi4+0x1b0>
 8000c6c:	3d02      	subs	r5, #2
 8000c6e:	4462      	add	r2, ip
 8000c70:	e732      	b.n	8000ad8 <__udivmoddi4+0x124>
 8000c72:	4608      	mov	r0, r1
 8000c74:	e70a      	b.n	8000a8c <__udivmoddi4+0xd8>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	e742      	b.n	8000b02 <__udivmoddi4+0x14e>

08000c7c <__aeabi_idiv0>:
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8000c8a:	f001 fb77 	bl	800237c <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_low();
 8000c8e:	f001 fb8d 	bl	80023ac <SSD1322_HW_drive_DC_low>
	SSD1322_HW_SPI_send_byte(command);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fbb9 	bl	800240c <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8000c9a:	f001 fb7b 	bl	8002394 <SSD1322_HW_drive_CS_high>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8000cb0:	f001 fb64 	bl	800237c <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 8000cb4:	f001 fb86 	bl	80023c4 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_byte(data);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fba6 	bl	800240c <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8000cc0:	f001 fb68 	bl	8002394 <SSD1322_HW_drive_CS_high>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 8000cd0:	f001 fb84 	bl	80023dc <SSD1322_HW_drive_RESET_low>
	SSD1322_HW_msDelay(1);                  //1ms delay
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f001 fbb7 	bl	8002448 <SSD1322_HW_msDelay>
	SSD1322_HW_drive_RESET_high(); //Reset pin high
 8000cda:	f001 fb8b 	bl	80023f4 <SSD1322_HW_drive_RESET_high>
	SSD1322_HW_msDelay(50);                 //50ms delay
 8000cde:	2032      	movs	r0, #50	; 0x32
 8000ce0:	f001 fbb2 	bl	8002448 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xFD);     //set Command unlock
 8000ce4:	20fd      	movs	r0, #253	; 0xfd
 8000ce6:	f7ff ffcb 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x12);
 8000cea:	2012      	movs	r0, #18
 8000cec:	f7ff ffdb 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xAE);     //set display off
 8000cf0:	20ae      	movs	r0, #174	; 0xae
 8000cf2:	f7ff ffc5 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_command(0xB3);     //set display clock divide ratio
 8000cf6:	20b3      	movs	r0, #179	; 0xb3
 8000cf8:	f7ff ffc2 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x91);
 8000cfc:	2091      	movs	r0, #145	; 0x91
 8000cfe:	f7ff ffd2 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xCA);     //set multiplex ratio
 8000d02:	20ca      	movs	r0, #202	; 0xca
 8000d04:	f7ff ffbc 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x3F);
 8000d08:	203f      	movs	r0, #63	; 0x3f
 8000d0a:	f7ff ffcc 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xA2);   //set display offset to 0
 8000d0e:	20a2      	movs	r0, #162	; 0xa2
 8000d10:	f7ff ffb6 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff ffc6 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xA1);   //start display start line to 0
 8000d1a:	20a1      	movs	r0, #161	; 0xa1
 8000d1c:	f7ff ffb0 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ffc0 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 8000d26:	20a0      	movs	r0, #160	; 0xa0
 8000d28:	f7ff ffaa 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x14);
 8000d2c:	2014      	movs	r0, #20
 8000d2e:	f7ff ffba 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_data(0x11);
 8000d32:	2011      	movs	r0, #17
 8000d34:	f7ff ffb7 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xB5);   //disable IO input
 8000d38:	20b5      	movs	r0, #181	; 0xb5
 8000d3a:	f7ff ffa1 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ffb1 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xAB);   //function select
 8000d44:	20ab      	movs	r0, #171	; 0xab
 8000d46:	f7ff ff9b 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x01);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ffab 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xB4);   //enable VSL extern
 8000d50:	20b4      	movs	r0, #180	; 0xb4
 8000d52:	f7ff ff95 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0xA0);
 8000d56:	20a0      	movs	r0, #160	; 0xa0
 8000d58:	f7ff ffa5 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_data(0xFD);
 8000d5c:	20fd      	movs	r0, #253	; 0xfd
 8000d5e:	f7ff ffa2 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xC1);   //set contrast current
 8000d62:	20c1      	movs	r0, #193	; 0xc1
 8000d64:	f7ff ff8c 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0xFF);
 8000d68:	20ff      	movs	r0, #255	; 0xff
 8000d6a:	f7ff ff9c 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xC7);   //set master contrast current
 8000d6e:	20c7      	movs	r0, #199	; 0xc7
 8000d70:	f7ff ff86 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x0F);
 8000d74:	200f      	movs	r0, #15
 8000d76:	f7ff ff96 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xB9);   //default grayscale
 8000d7a:	20b9      	movs	r0, #185	; 0xb9
 8000d7c:	f7ff ff80 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_command(0xB1);   //set phase length
 8000d80:	20b1      	movs	r0, #177	; 0xb1
 8000d82:	f7ff ff7d 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0xE2);
 8000d86:	20e2      	movs	r0, #226	; 0xe2
 8000d88:	f7ff ff8d 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xD1);   //enhance driving scheme capability
 8000d8c:	20d1      	movs	r0, #209	; 0xd1
 8000d8e:	f7ff ff77 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x82);
 8000d92:	2082      	movs	r0, #130	; 0x82
 8000d94:	f7ff ff87 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_data(0x20);
 8000d98:	2020      	movs	r0, #32
 8000d9a:	f7ff ff84 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xBB);   //first pre charge voltage
 8000d9e:	20bb      	movs	r0, #187	; 0xbb
 8000da0:	f7ff ff6e 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x1F);
 8000da4:	201f      	movs	r0, #31
 8000da6:	f7ff ff7e 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xB6);   //second pre charge voltage
 8000daa:	20b6      	movs	r0, #182	; 0xb6
 8000dac:	f7ff ff68 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x08);
 8000db0:	2008      	movs	r0, #8
 8000db2:	f7ff ff78 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xBE);   //VCOMH
 8000db6:	20be      	movs	r0, #190	; 0xbe
 8000db8:	f7ff ff62 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(0x07);
 8000dbc:	2007      	movs	r0, #7
 8000dbe:	f7ff ff72 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(0xA6);   //set normal display mode
 8000dc2:	20a6      	movs	r0, #166	; 0xa6
 8000dc4:	f7ff ff5c 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_command(0xA9);   //no partial mode
 8000dc8:	20a9      	movs	r0, #169	; 0xa9
 8000dca:	f7ff ff59 	bl	8000c80 <SSD1322_API_command>
	SSD1322_HW_msDelay(10);               //stabilize VDD
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f001 fb3a 	bl	8002448 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xAF);   //display on
 8000dd4:	20af      	movs	r0, #175	; 0xaf
 8000dd6:	f7ff ff53 	bl	8000c80 <SSD1322_API_command>
	SSD1322_HW_msDelay(50);               //stabilize VDD
 8000dda:	2032      	movs	r0, #50	; 0x32
 8000ddc:	f001 fb34 	bl	8002448 <SSD1322_HW_msDelay>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SSD1322_API_set_display_mode>:
 *
 *  When mode is set to ON or OFF, display ignores GRAM data and is always on or off.
 */

void SSD1322_API_set_display_mode(enum SSD1322_mode_e mode)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d81b      	bhi.n	8000e2c <SSD1322_API_set_display_mode+0x48>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <SSD1322_API_set_display_mode+0x18>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e1d 	.word	0x08000e1d
 8000e00:	08000e25 	.word	0x08000e25
 8000e04:	08000e0d 	.word	0x08000e0d
 8000e08:	08000e15 	.word	0x08000e15
	{
	case SSD1322_MODE_NORMAL:
		SSD1322_API_command(SET_DISP_MODE_NORMAL);
 8000e0c:	20a6      	movs	r0, #166	; 0xa6
 8000e0e:	f7ff ff37 	bl	8000c80 <SSD1322_API_command>
		break;
 8000e12:	e00b      	b.n	8000e2c <SSD1322_API_set_display_mode+0x48>
	case SSD1322_MODE_INVERTED:
		SSD1322_API_command(SET_DISP_MODE_INVERTED);
 8000e14:	20a7      	movs	r0, #167	; 0xa7
 8000e16:	f7ff ff33 	bl	8000c80 <SSD1322_API_command>
		break;
 8000e1a:	e007      	b.n	8000e2c <SSD1322_API_set_display_mode+0x48>
	case SSD1322_MODE_ON:
		SSD1322_API_command(SET_DISP_MODE_ON);
 8000e1c:	20a5      	movs	r0, #165	; 0xa5
 8000e1e:	f7ff ff2f 	bl	8000c80 <SSD1322_API_command>
		break;
 8000e22:	e003      	b.n	8000e2c <SSD1322_API_set_display_mode+0x48>
	case SSD1322_MODE_OFF:
		SSD1322_API_command(SET_DISP_MODE_OFF);
 8000e24:	20a4      	movs	r0, #164	; 0xa4
 8000e26:	f7ff ff2b 	bl	8000c80 <SSD1322_API_command>
		break;
 8000e2a:	bf00      	nop
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SSD1322_API_sleep_on>:
//====================== go to sleep ========================//
/**
 *  @brief Go to sleep mode.
 */
void SSD1322_API_sleep_on()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_ON);
 8000e38:	20ae      	movs	r0, #174	; 0xae
 8000e3a:	f7ff ff21 	bl	8000c80 <SSD1322_API_command>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <SSD1322_API_sleep_off>:
//====================== wake up from sleep ========================//
/**
 *  @brief Wake up from sleep mode.
 */
void SSD1322_API_sleep_off()
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_OFF);
 8000e46:	20af      	movs	r0, #175	; 0xaf
 8000e48:	f7ff ff1a 	bl	8000c80 <SSD1322_API_command>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <SSD1322_API_custom_grayscale>:
 *  @param[in] grayscale_tab array of 16 brightness values
 *
 *  @return 0 when levels are out of range, 1 if function has ended correctly
 */
uint8_t SSD1322_API_custom_grayscale(uint8_t *grayscale_tab)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	SSD1322_API_command(SET_GRAYSCALE_TABLE);
 8000e58:	20b8      	movs	r0, #184	; 0xb8
 8000e5a:	f7ff ff11 	bl	8000c80 <SSD1322_API_command>
	for(int i = 0; i < 16; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e011      	b.n	8000e88 <SSD1322_API_custom_grayscale+0x38>
	{
		if(grayscale_tab[i] > 180)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2bb4      	cmp	r3, #180	; 0xb4
 8000e6e:	d901      	bls.n	8000e74 <SSD1322_API_custom_grayscale+0x24>
			return 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	e010      	b.n	8000e96 <SSD1322_API_custom_grayscale+0x46>
		SSD1322_API_data(grayscale_tab[i]);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff12 	bl	8000ca6 <SSD1322_API_data>
	for(int i = 0; i < 16; i++)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3301      	adds	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	ddea      	ble.n	8000e64 <SSD1322_API_custom_grayscale+0x14>
	}
	SSD1322_API_command(ENABLE_GRAYSCALE_TABLE);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fef6 	bl	8000c80 <SSD1322_API_command>
	return 1;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <SSD1322_API_default_grayscale>:
//====================== default grayscale ========================//
/**
 *  @brief Reset grayscale levels to default (linear)
 */
void SSD1322_API_default_grayscale()
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
	SSD1322_API_command(SET_DEFAULT_GRAYSCALE_TAB);
 8000ea2:	20b9      	movs	r0, #185	; 0xb9
 8000ea4:	f7ff feec 	bl	8000c80 <SSD1322_API_command>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	717b      	strb	r3, [r7, #5]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	713b      	strb	r3, [r7, #4]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 8000eca:	2015      	movs	r0, #21
 8000ecc:	f7ff fed8 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(28+start_column);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	331c      	adds	r3, #28
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fee5 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_data(28+end_column);
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	331c      	adds	r3, #28
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fedf 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 8000ee8:	2075      	movs	r0, #117	; 0x75
 8000eea:	f7ff fec9 	bl	8000c80 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fed8 	bl	8000ca6 <SSD1322_API_data>
	SSD1322_API_data(end_row);
 8000ef6:	793b      	ldrb	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fed4 	bl	8000ca6 <SSD1322_API_data>
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}

08000f06 <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);  //enable write of pixels
 8000f10:	205c      	movs	r0, #92	; 0x5c
 8000f12:	f7ff feb5 	bl	8000c80 <SSD1322_API_command>
	SSD1322_HW_drive_CS_low();
 8000f16:	f001 fa31 	bl	800237c <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 8000f1a:	f001 fa53 	bl	80023c4 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_array(buffer, buffer_size);
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f001 fa7f 	bl	8002424 <SSD1322_HW_SPI_send_array>
	SSD1322_HW_drive_CS_high();
 8000f26:	f001 fa35 	bl	8002394 <SSD1322_HW_drive_CS_high>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <set_buffer_size>:
 *  		   new y size of a buffer in pixels
 */


void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	80fb      	strh	r3, [r7, #6]
 8000f40:	4613      	mov	r3, r2
 8000f42:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <set_buffer_size+0x24>)
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000000 	.word	0x20000000

08000f5c <fill_buffer>:
 *             array of pixel values
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	b25a      	sxtb	r2, r3
 8000f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <fill_buffer+0x58>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <fill_buffer+0x5c>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	0fda      	lsrs	r2, r3, #31
 8000f88:	4413      	add	r3, r2
 8000f8a:	105b      	asrs	r3, r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 8000f8e:	e004      	b.n	8000f9a <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	7afa      	ldrb	r2, [r7, #11]
 8000f98:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	60fa      	str	r2, [r7, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f5      	bne.n	8000f90 <fill_buffer+0x34>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000002 	.word	0x20000002

08000fbc <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	817b      	strh	r3, [r7, #10]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	813b      	strh	r3, [r7, #8]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <draw_pixel+0xf0>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	897a      	ldrh	r2, [r7, #10]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d25f      	bcs.n	80010a0 <draw_pixel+0xe4>
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <draw_pixel+0xf4>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	893a      	ldrh	r2, [r7, #8]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d25a      	bcs.n	80010a0 <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <draw_pixel+0xf0>)
 8000fee:	8812      	ldrh	r2, [r2, #0]
 8000ff0:	fb03 f202 	mul.w	r2, r3, r2
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	bfb8      	it	lt
 8001000:	425b      	neglt	r3, r3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d125      	bne.n	8001052 <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8001006:	893b      	ldrh	r3, [r7, #8]
 8001008:	4a28      	ldr	r2, [pc, #160]	; (80010ac <draw_pixel+0xf0>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	fb03 f202 	mul.w	r2, r3, r2
 8001010:	897b      	ldrh	r3, [r7, #10]
 8001012:	4413      	add	r3, r2
 8001014:	0fda      	lsrs	r2, r3, #31
 8001016:	4413      	add	r3, r2
 8001018:	105b      	asrs	r3, r3, #1
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	f023 030f 	bic.w	r3, r3, #15
 8001028:	b25a      	sxtb	r2, r3
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4313      	orrs	r3, r2
 8001030:	b259      	sxtb	r1, r3
 8001032:	893b      	ldrh	r3, [r7, #8]
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <draw_pixel+0xf0>)
 8001036:	8812      	ldrh	r2, [r2, #0]
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	897b      	ldrh	r3, [r7, #10]
 800103e:	4413      	add	r3, r2
 8001040:	0fda      	lsrs	r2, r3, #31
 8001042:	4413      	add	r3, r2
 8001044:	105b      	asrs	r3, r3, #1
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	b2ca      	uxtb	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e027      	b.n	80010a2 <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	4a15      	ldr	r2, [pc, #84]	; (80010ac <draw_pixel+0xf0>)
 8001056:	8812      	ldrh	r2, [r2, #0]
 8001058:	fb03 f202 	mul.w	r2, r3, r2
 800105c:	897b      	ldrh	r3, [r7, #10]
 800105e:	4413      	add	r3, r2
 8001060:	0fda      	lsrs	r2, r3, #31
 8001062:	4413      	add	r3, r2
 8001064:	105b      	asrs	r3, r3, #1
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	b25a      	sxtb	r2, r3
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b259      	sxtb	r1, r3
 8001080:	893b      	ldrh	r3, [r7, #8]
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <draw_pixel+0xf0>)
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	fb03 f202 	mul.w	r2, r3, r2
 800108a:	897b      	ldrh	r3, [r7, #10]
 800108c:	4413      	add	r3, r2
 800108e:	0fda      	lsrs	r2, r3, #31
 8001090:	4413      	add	r3, r2
 8001092:	105b      	asrs	r3, r3, #1
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e000      	b.n	80010a2 <draw_pixel+0xe6>
		return;
 80010a0:	bf00      	nop
	}
}
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000002 	.word	0x20000002
 80010b0:	20000000 	.word	0x20000000

080010b4 <draw_vline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_vline(uint8_t *frame_buffer, uint16_t x, uint16_t y0, uint16_t y1, uint8_t brightness)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	817b      	strh	r3, [r7, #10]
 80010c6:	460b      	mov	r3, r1
 80010c8:	813b      	strh	r3, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]
	if(y0 < y1)
 80010ce:	893a      	ldrh	r2, [r7, #8]
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d211      	bcs.n	80010fa <draw_vline+0x46>
	{
		for (uint16_t i = y0; i <= y1; i++)
 80010d6:	893b      	ldrh	r3, [r7, #8]
 80010d8:	82fb      	strh	r3, [r7, #22]
 80010da:	e009      	b.n	80010f0 <draw_vline+0x3c>
		{
			draw_pixel(frame_buffer, x, i, brightness);
 80010dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e0:	8afa      	ldrh	r2, [r7, #22]
 80010e2:	8979      	ldrh	r1, [r7, #10]
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff ff69 	bl	8000fbc <draw_pixel>
		for (uint16_t i = y0; i <= y1; i++)
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	3301      	adds	r3, #1
 80010ee:	82fb      	strh	r3, [r7, #22]
 80010f0:	8afa      	ldrh	r2, [r7, #22]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d9f1      	bls.n	80010dc <draw_vline+0x28>
		for (uint16_t i = y1; i <= y0; i++)
		{
			draw_pixel(frame_buffer, x, i, brightness);
		}
	}
}
 80010f8:	e010      	b.n	800111c <draw_vline+0x68>
		for (uint16_t i = y1; i <= y0; i++)
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	82bb      	strh	r3, [r7, #20]
 80010fe:	e009      	b.n	8001114 <draw_vline+0x60>
			draw_pixel(frame_buffer, x, i, brightness);
 8001100:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001104:	8aba      	ldrh	r2, [r7, #20]
 8001106:	8979      	ldrh	r1, [r7, #10]
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff ff57 	bl	8000fbc <draw_pixel>
		for (uint16_t i = y1; i <= y0; i++)
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	82bb      	strh	r3, [r7, #20]
 8001114:	8aba      	ldrh	r2, [r7, #20]
 8001116:	893b      	ldrh	r3, [r7, #8]
 8001118:	429a      	cmp	r2, r3
 800111a:	d9f1      	bls.n	8001100 <draw_vline+0x4c>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <draw_hline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_hline(uint8_t *frame_buffer, uint16_t y, uint16_t x0, uint16_t x1, uint8_t brightness)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	461a      	mov	r2, r3
 8001132:	4603      	mov	r3, r0
 8001134:	817b      	strh	r3, [r7, #10]
 8001136:	460b      	mov	r3, r1
 8001138:	813b      	strh	r3, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
	if(x0 < x1)
 800113e:	893a      	ldrh	r2, [r7, #8]
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	429a      	cmp	r2, r3
 8001144:	d211      	bcs.n	800116a <draw_hline+0x46>
	{
		for (uint16_t i = x0; i <= x1; i++)
 8001146:	893b      	ldrh	r3, [r7, #8]
 8001148:	82fb      	strh	r3, [r7, #22]
 800114a:	e009      	b.n	8001160 <draw_hline+0x3c>
		{
			draw_pixel(frame_buffer, i, y, brightness);
 800114c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001150:	897a      	ldrh	r2, [r7, #10]
 8001152:	8af9      	ldrh	r1, [r7, #22]
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff ff31 	bl	8000fbc <draw_pixel>
		for (uint16_t i = x0; i <= x1; i++)
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	3301      	adds	r3, #1
 800115e:	82fb      	strh	r3, [r7, #22]
 8001160:	8afa      	ldrh	r2, [r7, #22]
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	429a      	cmp	r2, r3
 8001166:	d9f1      	bls.n	800114c <draw_hline+0x28>
		for (uint16_t i = x1; i <= x0; i++)
		{
			draw_pixel(frame_buffer, i, y, brightness);
		}
	}
}
 8001168:	e010      	b.n	800118c <draw_hline+0x68>
		for (uint16_t i = x1; i <= x0; i++)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	82bb      	strh	r3, [r7, #20]
 800116e:	e009      	b.n	8001184 <draw_hline+0x60>
			draw_pixel(frame_buffer, i, y, brightness);
 8001170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001174:	897a      	ldrh	r2, [r7, #10]
 8001176:	8ab9      	ldrh	r1, [r7, #20]
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff ff1f 	bl	8000fbc <draw_pixel>
		for (uint16_t i = x1; i <= x0; i++)
 800117e:	8abb      	ldrh	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	82bb      	strh	r3, [r7, #20]
 8001184:	8aba      	ldrh	r2, [r7, #20]
 8001186:	893b      	ldrh	r3, [r7, #8]
 8001188:	429a      	cmp	r2, r3
 800118a:	d9f1      	bls.n	8001170 <draw_hline+0x4c>
}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <draw_line>:
 *             y position of line ending
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
*/
void draw_line(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	817b      	strh	r3, [r7, #10]
 80011a6:	460b      	mov	r3, r1
 80011a8:	813b      	strh	r3, [r7, #8]
 80011aa:	4613      	mov	r3, r2
 80011ac:	80fb      	strh	r3, [r7, #6]
	//handle horizontal and vertical lines with appropriate functions
	if (x0 == x1)
 80011ae:	897a      	ldrh	r2, [r7, #10]
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d109      	bne.n	80011ca <draw_line+0x36>
	{
		draw_vline(frame_buffer, x0, y0, y1, brightness);
 80011b6:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 80011b8:	893a      	ldrh	r2, [r7, #8]
 80011ba:	8979      	ldrh	r1, [r7, #10]
 80011bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4603      	mov	r3, r0
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff ff75 	bl	80010b4 <draw_vline>
	}
	if (y0 == y1)
 80011ca:	893a      	ldrh	r2, [r7, #8]
 80011cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d109      	bne.n	80011e6 <draw_line+0x52>
	{
		draw_hline(frame_buffer, y0, x0, x1, brightness);
 80011d2:	88f8      	ldrh	r0, [r7, #6]
 80011d4:	897a      	ldrh	r2, [r7, #10]
 80011d6:	8939      	ldrh	r1, [r7, #8]
 80011d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4603      	mov	r3, r0
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff ff9f 	bl	8001124 <draw_hline>
	}

	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80011e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011e8:	893b      	ldrh	r3, [r7, #8]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011f4:	88f9      	ldrh	r1, [r7, #6]
 80011f6:	897b      	ldrh	r3, [r7, #10]
 80011f8:	1acb      	subs	r3, r1, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bfb8      	it	lt
 80011fe:	425b      	neglt	r3, r3
 8001200:	429a      	cmp	r2, r3
 8001202:	bfcc      	ite	gt
 8001204:	2301      	movgt	r3, #1
 8001206:	2300      	movle	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	837b      	strh	r3, [r7, #26]
	if (steep == 1)
 800120c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10b      	bne.n	800122c <draw_line+0x98>
	{
		uint16_t tmp = y0;
 8001214:	893b      	ldrh	r3, [r7, #8]
 8001216:	833b      	strh	r3, [r7, #24]
		y0 = x0;
 8001218:	897b      	ldrh	r3, [r7, #10]
 800121a:	813b      	strh	r3, [r7, #8]
		x0 = tmp;
 800121c:	8b3b      	ldrh	r3, [r7, #24]
 800121e:	817b      	strh	r3, [r7, #10]
		tmp = y1;
 8001220:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001222:	833b      	strh	r3, [r7, #24]
		y1 = x1;
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	853b      	strh	r3, [r7, #40]	; 0x28
		x1 = tmp;
 8001228:	8b3b      	ldrh	r3, [r7, #24]
 800122a:	80fb      	strh	r3, [r7, #6]
	}

	if (x0 > x1)
 800122c:	897a      	ldrh	r2, [r7, #10]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	429a      	cmp	r2, r3
 8001232:	d90b      	bls.n	800124c <draw_line+0xb8>
	{
		uint16_t tmp = x0;
 8001234:	897b      	ldrh	r3, [r7, #10]
 8001236:	82fb      	strh	r3, [r7, #22]
		x0 = x1;
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	817b      	strh	r3, [r7, #10]
		x1 = tmp;
 800123c:	8afb      	ldrh	r3, [r7, #22]
 800123e:	80fb      	strh	r3, [r7, #6]
		tmp = y0;
 8001240:	893b      	ldrh	r3, [r7, #8]
 8001242:	82fb      	strh	r3, [r7, #22]
		y0 = y1;
 8001244:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001246:	813b      	strh	r3, [r7, #8]
		y1 = tmp;
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	int16_t dx, dy;
	dx = x1 - x0;
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	897b      	ldrh	r3, [r7, #10]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	82bb      	strh	r3, [r7, #20]
	dy = abs(y1 - y0);
 8001256:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001258:	893b      	ldrh	r3, [r7, #8]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	bfb8      	it	lt
 8001260:	425b      	neglt	r3, r3
 8001262:	827b      	strh	r3, [r7, #18]

	int16_t err = dx / 2;
 8001264:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001268:	0fda      	lsrs	r2, r3, #31
 800126a:	4413      	add	r3, r2
 800126c:	105b      	asrs	r3, r3, #1
 800126e:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8001270:	893a      	ldrh	r2, [r7, #8]
 8001272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001274:	429a      	cmp	r2, r3
 8001276:	d202      	bcs.n	800127e <draw_line+0xea>
	{
		ystep = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	83bb      	strh	r3, [r7, #28]
 800127c:	e02b      	b.n	80012d6 <draw_line+0x142>
	}
	else
	{
		ystep = -1;
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++)
 8001284:	e027      	b.n	80012d6 <draw_line+0x142>
	{
		if (steep)
 8001286:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <draw_line+0x10a>
		{
			draw_pixel(frame_buffer, y0, x0, brightness);
 800128e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001292:	897a      	ldrh	r2, [r7, #10]
 8001294:	8939      	ldrh	r1, [r7, #8]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff fe90 	bl	8000fbc <draw_pixel>
 800129c:	e006      	b.n	80012ac <draw_line+0x118>
		}
		else
		{
			draw_pixel(frame_buffer, x0, y0, brightness);
 800129e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012a2:	893a      	ldrh	r2, [r7, #8]
 80012a4:	8979      	ldrh	r1, [r7, #10]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fe88 	bl	8000fbc <draw_pixel>
		}
		err -= dy;
 80012ac:	8bfa      	ldrh	r2, [r7, #30]
 80012ae:	8a7b      	ldrh	r3, [r7, #18]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80012b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da08      	bge.n	80012d0 <draw_line+0x13c>
		{
			y0 += ystep;
 80012be:	8bba      	ldrh	r2, [r7, #28]
 80012c0:	893b      	ldrh	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	813b      	strh	r3, [r7, #8]
			err += dx;
 80012c6:	8bfa      	ldrh	r2, [r7, #30]
 80012c8:	8abb      	ldrh	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 80012d0:	897b      	ldrh	r3, [r7, #10]
 80012d2:	3301      	adds	r3, #1
 80012d4:	817b      	strh	r3, [r7, #10]
 80012d6:	897a      	ldrh	r2, [r7, #10]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d9d3      	bls.n	8001286 <draw_line+0xf2>
		}
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <draw_AA_line>:
 *             y position of line ending
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
*/
void draw_AA_line(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 80012e8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80012ec:	b096      	sub	sp, #88	; 0x58
 80012ee:	af02      	add	r7, sp, #8
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	4608      	mov	r0, r1
 80012f4:	4611      	mov	r1, r2
 80012f6:	461a      	mov	r2, r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	817b      	strh	r3, [r7, #10]
 80012fc:	460b      	mov	r3, r1
 80012fe:	813b      	strh	r3, [r7, #8]
 8001300:	4613      	mov	r3, r2
 8001302:	80fb      	strh	r3, [r7, #6]
	//handle horizontal and vertical lines with appropriate functions
	if (x0 == x1)
 8001304:	897a      	ldrh	r2, [r7, #10]
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	429a      	cmp	r2, r3
 800130a:	d10a      	bne.n	8001322 <draw_AA_line+0x3a>
	{
		draw_vline(frame_buffer, x0, y0, y1, brightness);
 800130c:	f8b7 0070 	ldrh.w	r0, [r7, #112]	; 0x70
 8001310:	893a      	ldrh	r2, [r7, #8]
 8001312:	8979      	ldrh	r1, [r7, #10]
 8001314:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4603      	mov	r3, r0
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff fec9 	bl	80010b4 <draw_vline>
	}
	if (y0 == y1)
 8001322:	893a      	ldrh	r2, [r7, #8]
 8001324:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001328:	429a      	cmp	r2, r3
 800132a:	d109      	bne.n	8001340 <draw_AA_line+0x58>
	{
		draw_hline(frame_buffer, y0, x0, x1, brightness);
 800132c:	88f8      	ldrh	r0, [r7, #6]
 800132e:	897a      	ldrh	r2, [r7, #10]
 8001330:	8939      	ldrh	r1, [r7, #8]
 8001332:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff fef2 	bl	8001124 <draw_hline>
	}

	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001340:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800134c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001350:	88f9      	ldrh	r1, [r7, #6]
 8001352:	897b      	ldrh	r3, [r7, #10]
 8001354:	1acb      	subs	r3, r1, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	bfb8      	it	lt
 800135a:	425b      	neglt	r3, r3
 800135c:	429a      	cmp	r2, r3
 800135e:	bfcc      	ite	gt
 8001360:	2301      	movgt	r3, #1
 8001362:	2300      	movle	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	if (steep)
 800136a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800136e:	2b00      	cmp	r3, #0
 8001370:	d011      	beq.n	8001396 <draw_AA_line+0xae>
	{
		uint16_t tmp = y0;
 8001372:	893b      	ldrh	r3, [r7, #8]
 8001374:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		y0 = x0;
 8001378:	897b      	ldrh	r3, [r7, #10]
 800137a:	813b      	strh	r3, [r7, #8]
		x0 = tmp;
 800137c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001380:	817b      	strh	r3, [r7, #10]
		tmp = y1;
 8001382:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001386:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		y1 = x1;
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		x1 = tmp;
 8001390:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001394:	80fb      	strh	r3, [r7, #6]
	}
	if (x0 > x1)
 8001396:	897a      	ldrh	r2, [r7, #10]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	d90d      	bls.n	80013ba <draw_AA_line+0xd2>
	{
		uint16_t tmp = x0;
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
		x0 = x1;
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	817b      	strh	r3, [r7, #10]
		x1 = tmp;
 80013a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80013a8:	80fb      	strh	r3, [r7, #6]
		tmp = y0;
 80013aa:	893b      	ldrh	r3, [r7, #8]
 80013ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
		y0 = y1;
 80013ae:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80013b2:	813b      	strh	r3, [r7, #8]
		y1 = tmp;
 80013b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80013b6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	}

	float dx = x1 - x0;
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	897b      	ldrh	r3, [r7, #10]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float dy = y1 - y0;
 80013cc:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80013d0:	893b      	ldrh	r3, [r7, #8]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float gradient = dy / dx;
 80013e0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80013e4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	// handle first endpoint
	float xend = round(x0);
 80013f0:	897b      	ldrh	r3, [r7, #10]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f954 	bl	80006a0 <__aeabi_ui2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fa70 	bl	80008e4 <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
	float yend = y0 + gradient * (xend - x0);
 8001408:	893b      	ldrh	r3, [r7, #8]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	897b      	ldrh	r3, [r7, #10]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001420:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001424:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float xgap =  1 - ((x0 + 0.5) - floor(x0 + 0.5));
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f942 	bl	80006c0 <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b74      	ldr	r3, [pc, #464]	; (8001614 <draw_AA_line+0x32c>)
 8001442:	f7fe fff1 	bl	8000428 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	897b      	ldrh	r3, [r7, #10]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f935 	bl	80006c0 <__aeabi_i2d>
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <draw_AA_line+0x32c>)
 800145c:	f7fe ffe4 	bl	8000428 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	ec43 2b17 	vmov	d7, r2, r3
 8001468:	eeb0 0a47 	vmov.f32	s0, s14
 800146c:	eef0 0a67 	vmov.f32	s1, s15
 8001470:	f009 feee 	bl	800b250 <floor>
 8001474:	ec53 2b10 	vmov	r2, r3, d0
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ffd2 	bl	8000424 <__aeabi_dsub>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	f04f 0000 	mov.w	r0, #0
 8001488:	4963      	ldr	r1, [pc, #396]	; (8001618 <draw_AA_line+0x330>)
 800148a:	f7fe ffcb 	bl	8000424 <__aeabi_dsub>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fa25 	bl	80008e4 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
	float xpxl1 = xend; // this will be used in the main loop
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	623b      	str	r3, [r7, #32]
	float ypxl1 = floor(yend);
 80014a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014a4:	f7ff f91e 	bl	80006e4 <__aeabi_f2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	ec43 2b10 	vmov	d0, r2, r3
 80014b0:	f009 fece 	bl	800b250 <floor>
 80014b4:	ec53 2b10 	vmov	r2, r3, d0
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fa12 	bl	80008e4 <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	61fb      	str	r3, [r7, #28]
	if (steep)
 80014c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a7 	beq.w	800161c <draw_AA_line+0x334>
	{
		draw_pixel(frame_buffer, ypxl1, xpxl1, (1-(yend - (floor(yend))) * xgap)*brightness);
 80014ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d6:	ee17 3a90 	vmov	r3, s15
 80014da:	b29e      	uxth	r6, r3
 80014dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	fa1f f883 	uxth.w	r8, r3
 80014ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014ee:	f7ff f8f9 	bl	80006e4 <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014f8:	f7ff f8f4 	bl	80006e4 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	ec43 2b10 	vmov	d0, r2, r3
 8001504:	f009 fea4 	bl	800b250 <floor>
 8001508:	ec53 2b10 	vmov	r2, r3, d0
 800150c:	4620      	mov	r0, r4
 800150e:	4629      	mov	r1, r5
 8001510:	f7fe ff88 	bl	8000424 <__aeabi_dsub>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4614      	mov	r4, r2
 800151a:	461d      	mov	r5, r3
 800151c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800151e:	f7ff f8e1 	bl	80006e4 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7fe fe4d 	bl	80001c8 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	f04f 0000 	mov.w	r0, #0
 8001536:	4938      	ldr	r1, [pc, #224]	; (8001618 <draw_AA_line+0x330>)
 8001538:	f7fe ff74 	bl	8000424 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f8b9 	bl	80006c0 <__aeabi_i2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7fe fe37 	bl	80001c8 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff f99f 	bl	80008a4 <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4642      	mov	r2, r8
 800156c:	4631      	mov	r1, r6
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fd24 	bl	8000fbc <draw_pixel>
		draw_pixel(frame_buffer, ypxl1 + 1, xpxl1, (yend - (floor(yend)) * xgap)*brightness);
 8001574:	edd7 7a07 	vldr	s15, [r7, #28]
 8001578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800157c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001584:	ee17 3a90 	vmov	r3, s15
 8001588:	b29e      	uxth	r6, r3
 800158a:	edd7 7a08 	vldr	s15, [r7, #32]
 800158e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001592:	ee17 3a90 	vmov	r3, s15
 8001596:	fa1f f883 	uxth.w	r8, r3
 800159a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800159c:	f7ff f8a2 	bl	80006e4 <__aeabi_f2d>
 80015a0:	4604      	mov	r4, r0
 80015a2:	460d      	mov	r5, r1
 80015a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015a6:	f7ff f89d 	bl	80006e4 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f009 fe4d 	bl	800b250 <floor>
 80015b6:	ec5b ab10 	vmov	sl, fp, d0
 80015ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015bc:	f7ff f892 	bl	80006e4 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4650      	mov	r0, sl
 80015c6:	4659      	mov	r1, fp
 80015c8:	f7fe fdfe 	bl	80001c8 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7fe ff26 	bl	8000424 <__aeabi_dsub>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4614      	mov	r4, r2
 80015de:	461d      	mov	r5, r3
 80015e0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f86b 	bl	80006c0 <__aeabi_i2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fde9 	bl	80001c8 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff f951 	bl	80008a4 <__aeabi_d2uiz>
 8001602:	4603      	mov	r3, r0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4642      	mov	r2, r8
 8001608:	4631      	mov	r1, r6
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff fcd6 	bl	8000fbc <draw_pixel>
 8001610:	e0a5      	b.n	800175e <draw_AA_line+0x476>
 8001612:	bf00      	nop
 8001614:	3fe00000 	.word	0x3fe00000
 8001618:	3ff00000 	.word	0x3ff00000
	}
	else
	{
		draw_pixel(frame_buffer, xpxl1, ypxl1, (1-(yend - (floor(yend))) * xgap)*brightness);
 800161c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001624:	ee17 3a90 	vmov	r3, s15
 8001628:	b29e      	uxth	r6, r3
 800162a:	edd7 7a07 	vldr	s15, [r7, #28]
 800162e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	fa1f f883 	uxth.w	r8, r3
 800163a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800163c:	f7ff f852 	bl	80006e4 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001646:	f7ff f84d 	bl	80006e4 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ec43 2b10 	vmov	d0, r2, r3
 8001652:	f009 fdfd 	bl	800b250 <floor>
 8001656:	ec53 2b10 	vmov	r2, r3, d0
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fee1 	bl	8000424 <__aeabi_dsub>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800166c:	f7ff f83a 	bl	80006e4 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fda6 	bl	80001c8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	49c0      	ldr	r1, [pc, #768]	; (8001988 <draw_AA_line+0x6a0>)
 8001686:	f7fe fecd 	bl	8000424 <__aeabi_dsub>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	461d      	mov	r5, r3
 8001692:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f812 	bl	80006c0 <__aeabi_i2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fd90 	bl	80001c8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f8f8 	bl	80008a4 <__aeabi_d2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4642      	mov	r2, r8
 80016ba:	4631      	mov	r1, r6
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fc7d 	bl	8000fbc <draw_pixel>
		draw_pixel(frame_buffer, xpxl1, ypxl1 + 1, (yend - (floor(yend)) * xgap)*brightness);
 80016c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ca:	ee17 3a90 	vmov	r3, s15
 80016ce:	b29e      	uxth	r6, r3
 80016d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	fa1f f883 	uxth.w	r8, r3
 80016e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ea:	f7fe fffb 	bl	80006e4 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016f4:	f7fe fff6 	bl	80006e4 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f009 fda6 	bl	800b250 <floor>
 8001704:	ec5b ab10 	vmov	sl, fp, d0
 8001708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800170a:	f7fe ffeb 	bl	80006e4 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4650      	mov	r0, sl
 8001714:	4659      	mov	r1, fp
 8001716:	f7fe fd57 	bl	80001c8 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7fe fe7f 	bl	8000424 <__aeabi_dsub>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	461d      	mov	r5, r3
 800172e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ffc4 	bl	80006c0 <__aeabi_i2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fd42 	bl	80001c8 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f8aa 	bl	80008a4 <__aeabi_d2uiz>
 8001750:	4603      	mov	r3, r0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4642      	mov	r2, r8
 8001756:	4631      	mov	r1, r6
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff fc2f 	bl	8000fbc <draw_pixel>
	}

	float intery = yend + gradient; // first y-intersection for the main loop
 800175e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001762:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// handle second endpoint
	xend = round(x1);
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff95 	bl	80006a0 <__aeabi_ui2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f8b1 	bl	80008e4 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
	yend = y1 + gradient * (xend - x1);
 8001786:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80017a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	xgap = (x1 + 0.5) - floor(x1 + 0.5);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe ff82 	bl	80006c0 <__aeabi_i2d>
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b72      	ldr	r3, [pc, #456]	; (800198c <draw_AA_line+0x6a4>)
 80017c2:	f7fe fe31 	bl	8000428 <__adddf3>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4614      	mov	r4, r2
 80017cc:	461d      	mov	r5, r3
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff75 	bl	80006c0 <__aeabi_i2d>
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b6c      	ldr	r3, [pc, #432]	; (800198c <draw_AA_line+0x6a4>)
 80017dc:	f7fe fe24 	bl	8000428 <__adddf3>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	ec43 2b17 	vmov	d7, r2, r3
 80017e8:	eeb0 0a47 	vmov.f32	s0, s14
 80017ec:	eef0 0a67 	vmov.f32	s1, s15
 80017f0:	f009 fd2e 	bl	800b250 <floor>
 80017f4:	ec53 2b10 	vmov	r2, r3, d0
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe fe12 	bl	8000424 <__aeabi_dsub>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f86c 	bl	80008e4 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
	float xpxl2 = xend; //this will be used in the main loop
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	61bb      	str	r3, [r7, #24]
	float ypxl2 = floor(yend);
 8001814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001816:	f7fe ff65 	bl	80006e4 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f009 fd15 	bl	800b250 <floor>
 8001826:	ec53 2b10 	vmov	r2, r3, d0
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f859 	bl	80008e4 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	617b      	str	r3, [r7, #20]
	if (steep)
 8001836:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a8 	beq.w	8001990 <draw_AA_line+0x6a8>
	{
		draw_pixel(frame_buffer, ypxl2, xpxl2, (1 - (yend - floor(yend)) * xgap)*brightness);
 8001840:	edd7 7a05 	vldr	s15, [r7, #20]
 8001844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001848:	ee17 3a90 	vmov	r3, s15
 800184c:	b29e      	uxth	r6, r3
 800184e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001856:	ee17 3a90 	vmov	r3, s15
 800185a:	fa1f f883 	uxth.w	r8, r3
 800185e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001860:	f7fe ff40 	bl	80006e4 <__aeabi_f2d>
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800186a:	f7fe ff3b 	bl	80006e4 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	ec43 2b10 	vmov	d0, r2, r3
 8001876:	f009 fceb 	bl	800b250 <floor>
 800187a:	ec53 2b10 	vmov	r2, r3, d0
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fdcf 	bl	8000424 <__aeabi_dsub>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4614      	mov	r4, r2
 800188c:	461d      	mov	r5, r3
 800188e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001890:	f7fe ff28 	bl	80006e4 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fc94 	bl	80001c8 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <draw_AA_line+0x6a0>)
 80018aa:	f7fe fdbb 	bl	8000424 <__aeabi_dsub>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4614      	mov	r4, r2
 80018b4:	461d      	mov	r5, r3
 80018b6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe ff00 	bl	80006c0 <__aeabi_i2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4620      	mov	r0, r4
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7fe fc7e 	bl	80001c8 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7fe ffe6 	bl	80008a4 <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4642      	mov	r2, r8
 80018de:	4631      	mov	r1, r6
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff fb6b 	bl	8000fbc <draw_pixel>
		draw_pixel(frame_buffer, ypxl2 + 1, xpxl2, ((yend - floor(yend)) * xgap)*brightness);
 80018e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f6:	ee17 3a90 	vmov	r3, s15
 80018fa:	b29e      	uxth	r6, r3
 80018fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001904:	ee17 3a90 	vmov	r3, s15
 8001908:	fa1f f883 	uxth.w	r8, r3
 800190c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800190e:	f7fe fee9 	bl	80006e4 <__aeabi_f2d>
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
 8001916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001918:	f7fe fee4 	bl	80006e4 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	ec43 2b10 	vmov	d0, r2, r3
 8001924:	f009 fc94 	bl	800b250 <floor>
 8001928:	ec53 2b10 	vmov	r2, r3, d0
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fd78 	bl	8000424 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800193e:	f7fe fed1 	bl	80006e4 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe fc3d 	bl	80001c8 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
 8001956:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe feb0 	bl	80006c0 <__aeabi_i2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fc2e 	bl	80001c8 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7fe ff96 	bl	80008a4 <__aeabi_d2uiz>
 8001978:	4603      	mov	r3, r0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4642      	mov	r2, r8
 800197e:	4631      	mov	r1, r6
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff fb1b 	bl	8000fbc <draw_pixel>
 8001986:	e0a6      	b.n	8001ad6 <draw_AA_line+0x7ee>
 8001988:	3ff00000 	.word	0x3ff00000
 800198c:	3fe00000 	.word	0x3fe00000
	}
	else
	{
		draw_pixel(frame_buffer, xpxl2, ypxl2, (1 - (yend - floor(yend)) * xgap)*brightness);
 8001990:	edd7 7a06 	vldr	s15, [r7, #24]
 8001994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001998:	ee17 3a90 	vmov	r3, s15
 800199c:	b29e      	uxth	r6, r3
 800199e:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 3a90 	vmov	r3, s15
 80019aa:	fa1f f883 	uxth.w	r8, r3
 80019ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019b0:	f7fe fe98 	bl	80006e4 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ba:	f7fe fe93 	bl	80006e4 <__aeabi_f2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	ec43 2b10 	vmov	d0, r2, r3
 80019c6:	f009 fc43 	bl	800b250 <floor>
 80019ca:	ec53 2b10 	vmov	r2, r3, d0
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f7fe fd27 	bl	8000424 <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	461d      	mov	r5, r3
 80019de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019e0:	f7fe fe80 	bl	80006e4 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fbec 	bl	80001c8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	499f      	ldr	r1, [pc, #636]	; (8001c78 <draw_AA_line+0x990>)
 80019fa:	f7fe fd13 	bl	8000424 <__aeabi_dsub>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	461d      	mov	r5, r3
 8001a06:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fe58 	bl	80006c0 <__aeabi_i2d>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fbd6 	bl	80001c8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7fe ff3e 	bl	80008a4 <__aeabi_d2uiz>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	4631      	mov	r1, r6
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fac3 	bl	8000fbc <draw_pixel>
		draw_pixel(frame_buffer, xpxl2, ypxl2 + 1, ((yend - floor(yend)) * xgap)*brightness);
 8001a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	b29e      	uxth	r6, r3
 8001a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	fa1f f883 	uxth.w	r8, r3
 8001a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a5e:	f7fe fe41 	bl	80006e4 <__aeabi_f2d>
 8001a62:	4604      	mov	r4, r0
 8001a64:	460d      	mov	r5, r1
 8001a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a68:	f7fe fe3c 	bl	80006e4 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b10 	vmov	d0, r2, r3
 8001a74:	f009 fbec 	bl	800b250 <floor>
 8001a78:	ec53 2b10 	vmov	r2, r3, d0
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f7fe fcd0 	bl	8000424 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a8e:	f7fe fe29 	bl	80006e4 <__aeabi_f2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fb95 	bl	80001c8 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fe08 	bl	80006c0 <__aeabi_i2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fb86 	bl	80001c8 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7fe feee 	bl	80008a4 <__aeabi_d2uiz>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4642      	mov	r2, r8
 8001ace:	4631      	mov	r1, r6
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff fa73 	bl	8000fbc <draw_pixel>
	}

	// main loop
	if (steep)
 8001ad6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80bf 	beq.w	8001c5e <draw_AA_line+0x976>
	{
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 8001ae0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001af6:	e0a0      	b.n	8001c3a <draw_AA_line+0x952>
		{
			draw_pixel(frame_buffer, floor(intery), x, (1 - (intery - floor(intery)))*brightness);
 8001af8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001afa:	f7fe fdf3 	bl	80006e4 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	ec43 2b10 	vmov	d0, r2, r3
 8001b06:	f009 fba3 	bl	800b250 <floor>
 8001b0a:	ec53 2b10 	vmov	r2, r3, d0
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7fe fec7 	bl	80008a4 <__aeabi_d2uiz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29e      	uxth	r6, r3
 8001b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b1c:	fa1f f883 	uxth.w	r8, r3
 8001b20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b22:	f7fe fddf 	bl	80006e4 <__aeabi_f2d>
 8001b26:	4604      	mov	r4, r0
 8001b28:	460d      	mov	r5, r1
 8001b2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b2c:	f7fe fdda 	bl	80006e4 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	ec43 2b10 	vmov	d0, r2, r3
 8001b38:	f009 fb8a 	bl	800b250 <floor>
 8001b3c:	ec53 2b10 	vmov	r2, r3, d0
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fc6e 	bl	8000424 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	4949      	ldr	r1, [pc, #292]	; (8001c78 <draw_AA_line+0x990>)
 8001b52:	f7fe fc67 	bl	8000424 <__aeabi_dsub>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	461d      	mov	r5, r3
 8001b5e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fdac 	bl	80006c0 <__aeabi_i2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb2a 	bl	80001c8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe fe92 	bl	80008a4 <__aeabi_d2uiz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4642      	mov	r2, r8
 8001b86:	4631      	mov	r1, r6
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fa17 	bl	8000fbc <draw_pixel>
			draw_pixel(frame_buffer, floor(intery) + 1, x, (intery - floor(intery))*brightness);
 8001b8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b90:	f7fe fda8 	bl	80006e4 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	ec43 2b10 	vmov	d0, r2, r3
 8001b9c:	f009 fb58 	bl	800b250 <floor>
 8001ba0:	ec51 0b10 	vmov	r0, r1, d0
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <draw_AA_line+0x990>)
 8001baa:	f7fe fc3d 	bl	8000428 <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe fe75 	bl	80008a4 <__aeabi_d2uiz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29e      	uxth	r6, r3
 8001bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc0:	fa1f f883 	uxth.w	r8, r3
 8001bc4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bc6:	f7fe fd8d 	bl	80006e4 <__aeabi_f2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
 8001bce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bd0:	f7fe fd88 	bl	80006e4 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f009 fb38 	bl	800b250 <floor>
 8001be0:	ec53 2b10 	vmov	r2, r3, d0
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fc1c 	bl	8000424 <__aeabi_dsub>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fd61 	bl	80006c0 <__aeabi_i2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fadf 	bl	80001c8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe fe47 	bl	80008a4 <__aeabi_d2uiz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4642      	mov	r2, r8
 8001c1c:	4631      	mov	r1, r6
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f7ff f9cc 	bl	8000fbc <draw_pixel>
			intery = intery + gradient;
 8001c24:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c28:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c30:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 8001c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c36:	3301      	adds	r3, #1
 8001c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	f67f af4e 	bls.w	8001af8 <draw_AA_line+0x810>
			draw_pixel(frame_buffer, x, floor(intery), (1 - (intery - floor(intery)))*brightness);
			draw_pixel(frame_buffer, x, floor(intery) + 1, (intery - floor(intery))*brightness);
			intery = intery + gradient;
		}
	}
}
 8001c5c:	e0c0      	b.n	8001de0 <draw_AA_line+0xaf8>
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 8001c5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6e:	ee17 3a90 	vmov	r3, s15
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
 8001c74:	e0a3      	b.n	8001dbe <draw_AA_line+0xad6>
 8001c76:	bf00      	nop
 8001c78:	3ff00000 	.word	0x3ff00000
			draw_pixel(frame_buffer, x, floor(intery), (1 - (intery - floor(intery)))*brightness);
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7e:	b29e      	uxth	r6, r3
 8001c80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c82:	f7fe fd2f 	bl	80006e4 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	ec43 2b10 	vmov	d0, r2, r3
 8001c8e:	f009 fadf 	bl	800b250 <floor>
 8001c92:	ec53 2b10 	vmov	r2, r3, d0
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7fe fe03 	bl	80008a4 <__aeabi_d2uiz>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	fa1f f883 	uxth.w	r8, r3
 8001ca4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ca6:	f7fe fd1d 	bl	80006e4 <__aeabi_f2d>
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cb0:	f7fe fd18 	bl	80006e4 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	ec43 2b10 	vmov	d0, r2, r3
 8001cbc:	f009 fac8 	bl	800b250 <floor>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fbac 	bl	8000424 <__aeabi_dsub>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	4945      	ldr	r1, [pc, #276]	; (8001dec <draw_AA_line+0xb04>)
 8001cd6:	f7fe fba5 	bl	8000424 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4614      	mov	r4, r2
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fcea 	bl	80006c0 <__aeabi_i2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fa68 	bl	80001c8 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7fe fdd0 	bl	80008a4 <__aeabi_d2uiz>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4642      	mov	r2, r8
 8001d0a:	4631      	mov	r1, r6
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7ff f955 	bl	8000fbc <draw_pixel>
			draw_pixel(frame_buffer, x, floor(intery) + 1, (intery - floor(intery))*brightness);
 8001d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d14:	b29e      	uxth	r6, r3
 8001d16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d18:	f7fe fce4 	bl	80006e4 <__aeabi_f2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	ec43 2b10 	vmov	d0, r2, r3
 8001d24:	f009 fa94 	bl	800b250 <floor>
 8001d28:	ec51 0b10 	vmov	r0, r1, d0
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <draw_AA_line+0xb04>)
 8001d32:	f7fe fb79 	bl	8000428 <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fdb1 	bl	80008a4 <__aeabi_d2uiz>
 8001d42:	4603      	mov	r3, r0
 8001d44:	fa1f f883 	uxth.w	r8, r3
 8001d48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d4a:	f7fe fccb 	bl	80006e4 <__aeabi_f2d>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	460d      	mov	r5, r1
 8001d52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d54:	f7fe fcc6 	bl	80006e4 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	ec43 2b10 	vmov	d0, r2, r3
 8001d60:	f009 fa76 	bl	800b250 <floor>
 8001d64:	ec53 2b10 	vmov	r2, r3, d0
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fb5a 	bl	8000424 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	461d      	mov	r5, r3
 8001d78:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fc9f 	bl	80006c0 <__aeabi_i2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fa1d 	bl	80001c8 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fd85 	bl	80008a4 <__aeabi_d2uiz>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4642      	mov	r2, r8
 8001da0:	4631      	mov	r1, r6
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff f90a 	bl	8000fbc <draw_pixel>
			intery = intery + gradient;
 8001da8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001dac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	3301      	adds	r3, #1
 8001dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	f67f af4e 	bls.w	8001c7c <draw_AA_line+0x994>
}
 8001de0:	bf00      	nop
 8001de2:	3750      	adds	r7, #80	; 0x50
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	3ff00000 	.word	0x3ff00000

08001df0 <draw_rect>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	817b      	strh	r3, [r7, #10]
 8001e02:	460b      	mov	r3, r1
 8001e04:	813b      	strh	r3, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
	draw_vline(frame_buffer, x0, y0, y1, brightness);
 8001e0a:	8b38      	ldrh	r0, [r7, #24]
 8001e0c:	893a      	ldrh	r2, [r7, #8]
 8001e0e:	8979      	ldrh	r1, [r7, #10]
 8001e10:	7f3b      	ldrb	r3, [r7, #28]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff f94c 	bl	80010b4 <draw_vline>
	draw_vline(frame_buffer, x1, y0, y1, brightness);
 8001e1c:	8b38      	ldrh	r0, [r7, #24]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	88f9      	ldrh	r1, [r7, #6]
 8001e22:	7f3b      	ldrb	r3, [r7, #28]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4603      	mov	r3, r0
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff f943 	bl	80010b4 <draw_vline>
	draw_hline(frame_buffer, y0, x0, x1, brightness);
 8001e2e:	88f8      	ldrh	r0, [r7, #6]
 8001e30:	897a      	ldrh	r2, [r7, #10]
 8001e32:	8939      	ldrh	r1, [r7, #8]
 8001e34:	7f3b      	ldrb	r3, [r7, #28]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff f972 	bl	8001124 <draw_hline>
	draw_hline(frame_buffer, y1, x0, x1, brightness);
 8001e40:	88f8      	ldrh	r0, [r7, #6]
 8001e42:	897a      	ldrh	r2, [r7, #10]
 8001e44:	8b39      	ldrh	r1, [r7, #24]
 8001e46:	7f3b      	ldrb	r3, [r7, #28]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff f969 	bl	8001124 <draw_hline>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <draw_rect_filled>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	461a      	mov	r2, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	817b      	strh	r3, [r7, #10]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	813b      	strh	r3, [r7, #8]
 8001e70:	4613      	mov	r3, r2
 8001e72:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = x0; i <= x1; i++)
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	82fb      	strh	r3, [r7, #22]
 8001e78:	e013      	b.n	8001ea2 <draw_rect_filled+0x48>
	{
		for (uint16_t j = y0; j <= y1; j++)
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	82bb      	strh	r3, [r7, #20]
 8001e7e:	e009      	b.n	8001e94 <draw_rect_filled+0x3a>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 8001e80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e84:	8aba      	ldrh	r2, [r7, #20]
 8001e86:	8af9      	ldrh	r1, [r7, #22]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff f897 	bl	8000fbc <draw_pixel>
		for (uint16_t j = y0; j <= y1; j++)
 8001e8e:	8abb      	ldrh	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	82bb      	strh	r3, [r7, #20]
 8001e94:	8aba      	ldrh	r2, [r7, #20]
 8001e96:	8c3b      	ldrh	r3, [r7, #32]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d9f1      	bls.n	8001e80 <draw_rect_filled+0x26>
	for (uint16_t i = x0; i <= x1; i++)
 8001e9c:	8afb      	ldrh	r3, [r7, #22]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	82fb      	strh	r3, [r7, #22]
 8001ea2:	8afa      	ldrh	r2, [r7, #22]
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d9e7      	bls.n	8001e7a <draw_rect_filled+0x20>
		}
	}
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <draw_circle>:
 *             radius of the circle (pixels)
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_circle(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t r, uint8_t brightness)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	813b      	strh	r3, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	f1c3 0301 	rsb	r3, r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	03d2      	lsls	r2, r2, #15
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	82fb      	strh	r3, [r7, #22]

  draw_pixel(frame_buffer, x0, y0 + r, brightness);
 8001ef2:	893a      	ldrh	r2, [r7, #8]
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001efe:	8979      	ldrh	r1, [r7, #10]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff f85b 	bl	8000fbc <draw_pixel>
  draw_pixel(frame_buffer, x0, y0 - r, brightness);
 8001f06:	893a      	ldrh	r2, [r7, #8]
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff f851 	bl	8000fbc <draw_pixel>
  draw_pixel(frame_buffer, x0 + r, y0, brightness);
 8001f1a:	897a      	ldrh	r2, [r7, #10]
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4413      	add	r3, r2
 8001f20:	b299      	uxth	r1, r3
 8001f22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f26:	893a      	ldrh	r2, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff f847 	bl	8000fbc <draw_pixel>
  draw_pixel(frame_buffer, x0 - r, y0, brightness);
 8001f2e:	897a      	ldrh	r2, [r7, #10]
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	b299      	uxth	r1, r3
 8001f36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f3a:	893a      	ldrh	r2, [r7, #8]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff f83d 	bl	8000fbc <draw_pixel>

  while (x < y)
 8001f42:	e089      	b.n	8002058 <draw_circle+0x1a4>
  {
    if (f >= 0)
 8001f44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0e      	blt.n	8001f6a <draw_circle+0xb6>
    {
      y--;
 8001f4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8001f58:	8b7b      	ldrh	r3, [r7, #26]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001f60:	8bfa      	ldrh	r2, [r7, #30]
 8001f62:	8b7b      	ldrh	r3, [r7, #26]
 8001f64:	4413      	add	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001f6a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8001f76:	8bbb      	ldrh	r3, [r7, #28]
 8001f78:	3302      	adds	r3, #2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001f7e:	8bfa      	ldrh	r2, [r7, #30]
 8001f80:	8bbb      	ldrh	r3, [r7, #28]
 8001f82:	4413      	add	r3, r2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	83fb      	strh	r3, [r7, #30]

    draw_pixel(frame_buffer, x0 + x, y0 + y, brightness);
 8001f88:	8b3a      	ldrh	r2, [r7, #24]
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b299      	uxth	r1, r3
 8001f90:	8afa      	ldrh	r2, [r7, #22]
 8001f92:	893b      	ldrh	r3, [r7, #8]
 8001f94:	4413      	add	r3, r2
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff f80d 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 + y, brightness);
 8001fa2:	8b3b      	ldrh	r3, [r7, #24]
 8001fa4:	897a      	ldrh	r2, [r7, #10]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	8afa      	ldrh	r2, [r7, #22]
 8001fac:	893b      	ldrh	r3, [r7, #8]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff f800 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 + x, y0 - y, brightness);
 8001fbc:	8b3a      	ldrh	r2, [r7, #24]
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	893a      	ldrh	r2, [r7, #8]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7fe fff3 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 - y, brightness);
 8001fd6:	8b3b      	ldrh	r3, [r7, #24]
 8001fd8:	897a      	ldrh	r2, [r7, #10]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	8afb      	ldrh	r3, [r7, #22]
 8001fe0:	893a      	ldrh	r2, [r7, #8]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe ffe6 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 + x, brightness);
 8001ff0:	8afa      	ldrh	r2, [r7, #22]
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b299      	uxth	r1, r3
 8001ff8:	8b3a      	ldrh	r2, [r7, #24]
 8001ffa:	893b      	ldrh	r3, [r7, #8]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7fe ffd9 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 + x, brightness);
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	897a      	ldrh	r2, [r7, #10]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	b299      	uxth	r1, r3
 8002012:	8b3a      	ldrh	r2, [r7, #24]
 8002014:	893b      	ldrh	r3, [r7, #8]
 8002016:	4413      	add	r3, r2
 8002018:	b29a      	uxth	r2, r3
 800201a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7fe ffcc 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 - x, brightness);
 8002024:	8afa      	ldrh	r2, [r7, #22]
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	4413      	add	r3, r2
 800202a:	b299      	uxth	r1, r3
 800202c:	8b3b      	ldrh	r3, [r7, #24]
 800202e:	893a      	ldrh	r2, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7fe ffbf 	bl	8000fbc <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 - x, brightness);
 800203e:	8afb      	ldrh	r3, [r7, #22]
 8002040:	897a      	ldrh	r2, [r7, #10]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b299      	uxth	r1, r3
 8002046:	8b3b      	ldrh	r3, [r7, #24]
 8002048:	893a      	ldrh	r2, [r7, #8]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	b29a      	uxth	r2, r3
 800204e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7fe ffb2 	bl	8000fbc <draw_pixel>
  while (x < y)
 8002058:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800205c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002060:	429a      	cmp	r2, r3
 8002062:	f6ff af6f 	blt.w	8001f44 <draw_circle+0x90>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <draw_bitmap_8bpp>:
 *             width of bitmap in pixels
 *  @param[in] y_size
 *             height of bitmap in pixels
 */
void draw_bitmap_8bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	460b      	mov	r3, r1
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	4613      	mov	r3, r2
 8002084:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	82bb      	strh	r3, [r7, #20]
 800208e:	e01c      	b.n	80020ca <draw_bitmap_8bpp+0x5a>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	827b      	strh	r3, [r7, #18]
 8002094:	e010      	b.n	80020b8 <draw_bitmap_8bpp+0x48>
		{
			draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	8aba      	ldrh	r2, [r7, #20]
 80020a4:	8a79      	ldrh	r1, [r7, #18]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7fe ff88 	bl	8000fbc <draw_pixel>
			bitmap_pos++;
 80020ac:	8afb      	ldrh	r3, [r7, #22]
 80020ae:	3301      	adds	r3, #1
 80020b0:	82fb      	strh	r3, [r7, #22]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80020b2:	8a7b      	ldrh	r3, [r7, #18]
 80020b4:	3301      	adds	r3, #1
 80020b6:	827b      	strh	r3, [r7, #18]
 80020b8:	8a7a      	ldrh	r2, [r7, #18]
 80020ba:	88f9      	ldrh	r1, [r7, #6]
 80020bc:	8c3b      	ldrh	r3, [r7, #32]
 80020be:	440b      	add	r3, r1
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbe8      	blt.n	8002096 <draw_bitmap_8bpp+0x26>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 80020c4:	8abb      	ldrh	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	82bb      	strh	r3, [r7, #20]
 80020ca:	8aba      	ldrh	r2, [r7, #20]
 80020cc:	88b9      	ldrh	r1, [r7, #4]
 80020ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020d0:	440b      	add	r3, r1
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbdc      	blt.n	8002090 <draw_bitmap_8bpp+0x20>
		}
	}
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <draw_bitmap_4bpp>:
 *             width of bitmap in pixels
 *  @param[in] y_size
 *             height of bitmap in pixels
 */
void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	460b      	mov	r3, r1
 80020f0:	80fb      	strh	r3, [r7, #6]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 80020f6:	2300      	movs	r3, #0
 80020f8:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 8002102:	88bb      	ldrh	r3, [r7, #4]
 8002104:	837b      	strh	r3, [r7, #26]
 8002106:	e034      	b.n	8002172 <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	833b      	strh	r3, [r7, #24]
 800210c:	e028      	b.n	8002160 <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 800210e:	8bbb      	ldrh	r3, [r7, #28]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10e      	bne.n	800213c <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 800211e:	8bfb      	ldrh	r3, [r7, #30]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	b2db      	uxtb	r3, r3
 800212a:	8b7a      	ldrh	r2, [r7, #26]
 800212c:	8b39      	ldrh	r1, [r7, #24]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7fe ff44 	bl	8000fbc <draw_pixel>
				processed_pixels++;
 8002134:	8bbb      	ldrh	r3, [r7, #28]
 8002136:	3301      	adds	r3, #1
 8002138:	83bb      	strh	r3, [r7, #28]
 800213a:	e00e      	b.n	800215a <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 800213c:	8bfb      	ldrh	r3, [r7, #30]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	8b7a      	ldrh	r2, [r7, #26]
 8002146:	8b39      	ldrh	r1, [r7, #24]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7fe ff37 	bl	8000fbc <draw_pixel>
				processed_pixels++;
 800214e:	8bbb      	ldrh	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 8002154:	8bfb      	ldrh	r3, [r7, #30]
 8002156:	3301      	adds	r3, #1
 8002158:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 800215a:	8b3b      	ldrh	r3, [r7, #24]
 800215c:	3301      	adds	r3, #1
 800215e:	833b      	strh	r3, [r7, #24]
 8002160:	8b3a      	ldrh	r2, [r7, #24]
 8002162:	88f9      	ldrh	r1, [r7, #6]
 8002164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002166:	440b      	add	r3, r1
 8002168:	429a      	cmp	r2, r3
 800216a:	dbd0      	blt.n	800210e <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 800216c:	8b7b      	ldrh	r3, [r7, #26]
 800216e:	3301      	adds	r3, #1
 8002170:	837b      	strh	r3, [r7, #26]
 8002172:	8b7a      	ldrh	r2, [r7, #26]
 8002174:	88b9      	ldrh	r1, [r7, #4]
 8002176:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002178:	440b      	add	r3, r1
 800217a:	429a      	cmp	r2, r3
 800217c:	dbc4      	blt.n	8002108 <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <select_font+0x1c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2000209c 	.word	0x2000209c

080021a8 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	72fb      	strb	r3, [r7, #11]
 80021ba:	460b      	mov	r3, r1
 80021bc:	813b      	strh	r3, [r7, #8]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 80021c2:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <draw_char+0x12c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d07f      	beq.n	80022ca <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <draw_char+0x12c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	891b      	ldrh	r3, [r3, #8]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	7afa      	ldrb	r2, [r7, #11]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <draw_char+0x12c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <draw_char+0x12c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t width = glyph->width;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	78db      	ldrb	r3, [r3, #3]
 80021fe:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	795b      	ldrb	r3, [r3, #5]
 8002204:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t bits = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t y_pos = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t x_pos = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800222a:	e048      	b.n	80022be <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 800222c:	2300      	movs	r3, #0
 800222e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002232:	e03a      	b.n	80022aa <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8002234:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8002246:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	84fa      	strh	r2, [r7, #38]	; 0x26
 800224c:	461a      	mov	r2, r3
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			if (bits & 0x80)
 8002258:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800225c:	2b00      	cmp	r3, #0
 800225e:	da1a      	bge.n	8002296 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 8002260:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002264:	b29a      	uxth	r2, r3
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	b29a      	uxth	r2, r3
 800226c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002270:	b29b      	uxth	r3, r3
 8002272:	4413      	add	r3, r2
 8002274:	b299      	uxth	r1, r3
 8002276:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800227a:	b29a      	uxth	r2, r3
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4413      	add	r3, r2
 8002280:	b29a      	uxth	r2, r3
 8002282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002286:	b29b      	uxth	r3, r3
 8002288:	4413      	add	r3, r2
 800228a:	b29a      	uxth	r2, r3
 800228c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe fe93 	bl	8000fbc <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 8002296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 80022a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80022a4:	3301      	adds	r3, #1
 80022a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80022aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3bf      	bcc.n	8002234 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 80022b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b8:	3301      	adds	r3, #1
 80022ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022c2:	7dbb      	ldrb	r3, [r7, #22]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3b1      	bcc.n	800222c <draw_char+0x84>
 80022c8:	e000      	b.n	80022cc <draw_char+0x124>
		return;
 80022ca:	bf00      	nop
		}
	}
}
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000209c 	.word	0x2000209c

080022d8 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	80fb      	strh	r3, [r7, #6]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80bb      	strh	r3, [r7, #4]
    while (*text)
 80022ee:	e01b      	b.n	8002328 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	7819      	ldrb	r1, [r3, #0]
 80022f4:	88b8      	ldrh	r0, [r7, #4]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	7e3b      	ldrb	r3, [r7, #24]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	4603      	mov	r3, r0
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff ff52 	bl	80021a8 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <draw_text+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002312:	3b20      	subs	r3, #32
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	791b      	ldrb	r3, [r3, #4]
 800231a:	b29a      	uxth	r2, r3
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	4413      	add	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
        text++;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3301      	adds	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
    while (*text)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1df      	bne.n	80022f0 <draw_text+0x18>
    }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000209c 	.word	0x2000209c

08002340 <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	803b      	strh	r3, [r7, #0]
	SSD1322_API_set_window(0, 63, 0, 127);
 8002350:	237f      	movs	r3, #127	; 0x7f
 8002352:	2200      	movs	r2, #0
 8002354:	213f      	movs	r1, #63	; 0x3f
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe fda8 	bl	8000eac <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 800235c:	883b      	ldrh	r3, [r7, #0]
 800235e:	01db      	lsls	r3, r3, #7
 8002360:	461a      	mov	r2, r3
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	4413      	add	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fdc9 	bl	8000f06 <SSD1322_API_send_buffer>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <SSD1322_HW_drive_CS_low+0x14>)
 8002388:	f001 f9da 	bl	8003740 <HAL_GPIO_WritePin>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020400 	.word	0x40020400

08002394 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800239e:	4802      	ldr	r0, [pc, #8]	; (80023a8 <SSD1322_HW_drive_CS_high+0x14>)
 80023a0:	f001 f9ce 	bl	8003740 <HAL_GPIO_WritePin>
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40020400 	.word	0x40020400

080023ac <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <SSD1322_HW_drive_DC_low+0x14>)
 80023b8:	f001 f9c2 	bl	8003740 <HAL_GPIO_WritePin>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ce:	4802      	ldr	r0, [pc, #8]	; (80023d8 <SSD1322_HW_drive_DC_high+0x14>)
 80023d0:	f001 f9b6 	bl	8003740 <HAL_GPIO_WritePin>
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020c00 	.word	0x40020c00

080023dc <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e6:	4802      	ldr	r0, [pc, #8]	; (80023f0 <SSD1322_HW_drive_RESET_low+0x14>)
 80023e8:	f001 f9aa 	bl	8003740 <HAL_GPIO_WritePin>
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40020400 	.word	0x40020400

080023f4 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023fe:	4802      	ldr	r0, [pc, #8]	; (8002408 <SSD1322_HW_drive_RESET_high+0x14>)
 8002400:	f001 f99e 	bl	8003740 <HAL_GPIO_WritePin>
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40020400 	.word	0x40020400

0800240c <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit(&hspi1, &byte_to_transmit, 1, 10);
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SSD1322_HW_SPI_send_array>:
 *  @param[in] array_size amount of bytes to transmit
 *
 */

void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, array_to_transmit, array_size, 100);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	2364      	movs	r3, #100	; 0x64
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4803      	ldr	r0, [pc, #12]	; (8002444 <SSD1322_HW_SPI_send_array+0x20>)
 8002438:	f004 fd85 	bl	8006f46 <HAL_SPI_Transmit>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200020e8 	.word	0x200020e8

08002448 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fe81 	bl	8003158 <HAL_Delay>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	f5ad 4d20 	sub.w	sp, sp, #40960	; 0xa000
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800246a:	f000 fe03 	bl	8003074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246e:	f000 fa53 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002472:	f000 fb21 	bl	8002ab8 <MX_GPIO_Init>
  MX_I2S3_Init();
 8002476:	f000 fab9 	bl	80029ec <MX_I2S3_Init>
  MX_SPI1_Init();
 800247a:	f000 fae7 	bl	8002a4c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800247e:	f008 fa91 	bl	800a9a4 <MX_USB_HOST_Init>
  	// Declare bytes array for a frame buffer.
  	// Dimensions are divided by 2 because one byte contains two 4-bit grayscale pixels
  	uint8_t tx_buf[256 * 64 / 2];

  	//Call initialization seqence for SSD1322
  	SSD1322_API_init();
 8002482:	f7fe fc23 	bl	8000ccc <SSD1322_API_init>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002486:	f008 fab3 	bl	800a9f0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //Set frame buffer size in pixels - it is used to avoid writing to memory outside frame buffer.
    		//Normally it has to only be done once on initialization, but buffer size is changed near the end of while(1);
    		set_buffer_size(256, 64);
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002490:	f7fe fd50 	bl	8000f34 <set_buffer_size>
    		// Fill buffer with zeros to clear any garbage values
    		fill_buffer(tx_buf, 0);
 8002494:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002498:	f103 0318 	add.w	r3, r3, #24
 800249c:	3b08      	subs	r3, #8
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fd5b 	bl	8000f5c <fill_buffer>

    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 80024a6:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80024aa:	f103 0318 	add.w	r3, r3, #24
 80024ae:	3b08      	subs	r3, #8
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff43 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 80024ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024be:	f000 fe4b 	bl	8003158 <HAL_Delay>

    		// Let's try some features of this OLED display

    		// First, draw some pixels on frame buffer
    		// draw_pixel(frame_buffer, x, y, brightness);
    		draw_pixel(tx_buf, 10, 10, 1);
 80024c2:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80024c6:	f100 0018 	add.w	r0, r0, #24
 80024ca:	3808      	subs	r0, #8
 80024cc:	2301      	movs	r3, #1
 80024ce:	220a      	movs	r2, #10
 80024d0:	210a      	movs	r1, #10
 80024d2:	f7fe fd73 	bl	8000fbc <draw_pixel>
    		draw_pixel(tx_buf, 15, 15, 5);
 80024d6:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80024da:	f100 0018 	add.w	r0, r0, #24
 80024de:	3808      	subs	r0, #8
 80024e0:	2305      	movs	r3, #5
 80024e2:	220f      	movs	r2, #15
 80024e4:	210f      	movs	r1, #15
 80024e6:	f7fe fd69 	bl	8000fbc <draw_pixel>
    		draw_pixel(tx_buf, 20, 20, 9);
 80024ea:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80024ee:	f100 0018 	add.w	r0, r0, #24
 80024f2:	3808      	subs	r0, #8
 80024f4:	2309      	movs	r3, #9
 80024f6:	2214      	movs	r2, #20
 80024f8:	2114      	movs	r1, #20
 80024fa:	f7fe fd5f 	bl	8000fbc <draw_pixel>
    		draw_pixel(tx_buf, 25, 25, 15);
 80024fe:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002502:	f100 0018 	add.w	r0, r0, #24
 8002506:	3808      	subs	r0, #8
 8002508:	230f      	movs	r3, #15
 800250a:	2219      	movs	r2, #25
 800250c:	2119      	movs	r1, #25
 800250e:	f7fe fd55 	bl	8000fbc <draw_pixel>

    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 8002512:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002516:	f103 0318 	add.w	r3, r3, #24
 800251a:	3b08      	subs	r3, #8
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff0d 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 8002526:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800252a:	f000 fe15 	bl	8003158 <HAL_Delay>

    		// draw vertical and horizontal lines
    		draw_hline(tx_buf, 31, 20, 50, 10);
 800252e:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002532:	f100 0018 	add.w	r0, r0, #24
 8002536:	3808      	subs	r0, #8
 8002538:	230a      	movs	r3, #10
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2332      	movs	r3, #50	; 0x32
 800253e:	2214      	movs	r2, #20
 8002540:	211f      	movs	r1, #31
 8002542:	f7fe fdef 	bl	8001124 <draw_hline>
    		draw_vline(tx_buf, 31, 0, 31, 10);
 8002546:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 800254a:	f100 0018 	add.w	r0, r0, #24
 800254e:	3808      	subs	r0, #8
 8002550:	230a      	movs	r3, #10
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	231f      	movs	r3, #31
 8002556:	2200      	movs	r2, #0
 8002558:	211f      	movs	r1, #31
 800255a:	f7fe fdab 	bl	80010b4 <draw_vline>

    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 800255e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002562:	f103 0318 	add.w	r3, r3, #24
 8002566:	3b08      	subs	r3, #8
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fee7 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 8002572:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002576:	f000 fdef 	bl	8003158 <HAL_Delay>

    		// draw simple oblique line
    		draw_line(tx_buf, 40, 0, 80, 31, 12);
 800257a:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 800257e:	f100 0018 	add.w	r0, r0, #24
 8002582:	3808      	subs	r0, #8
 8002584:	230c      	movs	r3, #12
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	231f      	movs	r3, #31
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2350      	movs	r3, #80	; 0x50
 800258e:	2200      	movs	r2, #0
 8002590:	2128      	movs	r1, #40	; 0x28
 8002592:	f7fe fdff 	bl	8001194 <draw_line>
    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 8002596:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800259a:	f103 0318 	add.w	r3, r3, #24
 800259e:	3b08      	subs	r3, #8
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fecb 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 80025aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025ae:	f000 fdd3 	bl	8003158 <HAL_Delay>

    		// draw antialiased oblique line. It should appear softer and nicer than a simple one
    		draw_AA_line(tx_buf, 50, 0, 90, 31, 12);
 80025b2:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80025b6:	f100 0018 	add.w	r0, r0, #24
 80025ba:	3808      	subs	r0, #8
 80025bc:	230c      	movs	r3, #12
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	231f      	movs	r3, #31
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	235a      	movs	r3, #90	; 0x5a
 80025c6:	2200      	movs	r2, #0
 80025c8:	2132      	movs	r1, #50	; 0x32
 80025ca:	f7fe fe8d 	bl	80012e8 <draw_AA_line>
    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 80025ce:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80025d2:	f103 0318 	add.w	r3, r3, #24
 80025d6:	3b08      	subs	r3, #8
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff feaf 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 80025e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025e6:	f000 fdb7 	bl	8003158 <HAL_Delay>

    		//draw circle, empty rectangle and filled rectangle
    		draw_circle(tx_buf, 180, 20, 20, 15);
 80025ea:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80025ee:	f100 0018 	add.w	r0, r0, #24
 80025f2:	3808      	subs	r0, #8
 80025f4:	230f      	movs	r3, #15
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2314      	movs	r3, #20
 80025fa:	2214      	movs	r2, #20
 80025fc:	21b4      	movs	r1, #180	; 0xb4
 80025fe:	f7ff fc59 	bl	8001eb4 <draw_circle>
    		draw_rect(tx_buf, 100, 5, 120, 25, 15);
 8002602:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002606:	f100 0018 	add.w	r0, r0, #24
 800260a:	3808      	subs	r0, #8
 800260c:	230f      	movs	r3, #15
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	2319      	movs	r3, #25
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2378      	movs	r3, #120	; 0x78
 8002616:	2205      	movs	r2, #5
 8002618:	2164      	movs	r1, #100	; 0x64
 800261a:	f7ff fbe9 	bl	8001df0 <draw_rect>
    		draw_rect_filled(tx_buf, 124, 5, 144, 25, 8);
 800261e:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002622:	f100 0018 	add.w	r0, r0, #24
 8002626:	3808      	subs	r0, #8
 8002628:	2308      	movs	r3, #8
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2319      	movs	r3, #25
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2390      	movs	r3, #144	; 0x90
 8002632:	2205      	movs	r2, #5
 8002634:	217c      	movs	r1, #124	; 0x7c
 8002636:	f7ff fc10 	bl	8001e5a <draw_rect_filled>
    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 800263a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800263e:	f103 0318 	add.w	r3, r3, #24
 8002642:	3b08      	subs	r3, #8
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe79 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 800264e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002652:	f000 fd81 	bl	8003158 <HAL_Delay>

    		//clean buffer
    		fill_buffer(tx_buf, 0);
 8002656:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800265a:	f103 0318 	add.w	r3, r3, #24
 800265e:	3b08      	subs	r3, #8
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fc7a 	bl	8000f5c <fill_buffer>

    		//display 8-bit grayscale bitmap (ony first 4 bits are actually written to memory)
    		draw_bitmap_8bpp(tx_buf, pat_i_mat, 0, 0, 64, 64);
 8002668:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 800266c:	f100 0018 	add.w	r0, r0, #24
 8002670:	3808      	subs	r0, #8
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	2200      	movs	r2, #0
 800267e:	499d      	ldr	r1, [pc, #628]	; (80028f4 <main+0x494>)
 8002680:	f7ff fcf6 	bl	8002070 <draw_bitmap_8bpp>
    		draw_bitmap_8bpp(tx_buf, krecik, 128, 0, 64, 64);
 8002684:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002688:	f100 0018 	add.w	r0, r0, #24
 800268c:	3808      	subs	r0, #8
 800268e:	2340      	movs	r3, #64	; 0x40
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	2340      	movs	r3, #64	; 0x40
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2300      	movs	r3, #0
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	4997      	ldr	r1, [pc, #604]	; (80028f8 <main+0x498>)
 800269c:	f7ff fce8 	bl	8002070 <draw_bitmap_8bpp>
    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 80026a0:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80026a4:	f103 0318 	add.w	r3, r3, #24
 80026a8:	3b08      	subs	r3, #8
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe46 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(5000);
 80026b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80026b8:	f000 fd4e 	bl	8003158 <HAL_Delay>

    		//display 4-bit grayscale bitmap (one byte in bitmap array corresponds to two pixels)
    		draw_bitmap_4bpp(tx_buf, stars_4bpp, 0, 0, 256, 64);
 80026bc:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80026c0:	f100 0018 	add.w	r0, r0, #24
 80026c4:	3808      	subs	r0, #8
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	4989      	ldr	r1, [pc, #548]	; (80028fc <main+0x49c>)
 80026d6:	f7ff fd03 	bl	80020e0 <draw_bitmap_4bpp>
    		send_buffer_to_OLED(tx_buf, 0, 0);
 80026da:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80026de:	f103 0318 	add.w	r3, r3, #24
 80026e2:	3b08      	subs	r3, #8
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fe29 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(3000);
 80026ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026f2:	f000 fd31 	bl	8003158 <HAL_Delay>

    		//you can invert screen colors using API function
    		SSD1322_API_set_display_mode(SSD1322_MODE_INVERTED);
 80026f6:	2003      	movs	r0, #3
 80026f8:	f7fe fb74 	bl	8000de4 <SSD1322_API_set_display_mode>
    		HAL_Delay(2000);
 80026fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002700:	f000 fd2a 	bl	8003158 <HAL_Delay>
    		//pixels can be also turned on or off
    		SSD1322_API_set_display_mode(SSD1322_MODE_ON);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fb6d 	bl	8000de4 <SSD1322_API_set_display_mode>
    		HAL_Delay(1000);
 800270a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800270e:	f000 fd23 	bl	8003158 <HAL_Delay>
    		SSD1322_API_set_display_mode(SSD1322_MODE_OFF);
 8002712:	2001      	movs	r0, #1
 8002714:	f7fe fb66 	bl	8000de4 <SSD1322_API_set_display_mode>
    		HAL_Delay(1000);
 8002718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800271c:	f000 fd1c 	bl	8003158 <HAL_Delay>
    		//ok, go back to normal
    		SSD1322_API_set_display_mode(SSD1322_MODE_NORMAL);
 8002720:	2002      	movs	r0, #2
 8002722:	f7fe fb5f 	bl	8000de4 <SSD1322_API_set_display_mode>
    		HAL_Delay(500);
 8002726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800272a:	f000 fd15 	bl	8003158 <HAL_Delay>

    		//exact grayscale values can be set individually for each level from 0 to 15 - always send 16 byte array of values 0-180
    		uint8_t grayscale_tab[16] = {0, 5, 10, 15, 20, 25, 30, 35, 145, 150, 155, 160, 165, 170, 175, 180};
 800272e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002732:	f103 0318 	add.w	r3, r3, #24
 8002736:	4a72      	ldr	r2, [pc, #456]	; (8002900 <main+0x4a0>)
 8002738:	f1a3 0418 	sub.w	r4, r3, #24
 800273c:	4613      	mov	r3, r2
 800273e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		SSD1322_API_custom_grayscale(grayscale_tab);
 8002744:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002748:	f103 0318 	add.w	r3, r3, #24
 800274c:	3b18      	subs	r3, #24
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fb7e 	bl	8000e50 <SSD1322_API_custom_grayscale>
    		HAL_Delay(2000);
 8002754:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002758:	f000 fcfe 	bl	8003158 <HAL_Delay>
    		//New grayscale values should be close to black in darker areas and close to white in brighter

    		//reset grayscale to default linear values
    		SSD1322_API_default_grayscale();
 800275c:	f7fe fb9f 	bl	8000e9e <SSD1322_API_default_grayscale>
    		HAL_Delay(2000);
 8002760:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002764:	f000 fcf8 	bl	8003158 <HAL_Delay>

    		//display can be set to sleep mode and then woken up
    		SSD1322_API_sleep_on();
 8002768:	f7fe fb64 	bl	8000e34 <SSD1322_API_sleep_on>
    		HAL_Delay(1000);
 800276c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002770:	f000 fcf2 	bl	8003158 <HAL_Delay>
    		SSD1322_API_sleep_off();
 8002774:	f7fe fb65 	bl	8000e42 <SSD1322_API_sleep_off>

    		//clean buffer
    		fill_buffer(tx_buf, 0);
 8002778:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800277c:	f103 0318 	add.w	r3, r3, #24
 8002780:	3b08      	subs	r3, #8
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fbe9 	bl	8000f5c <fill_buffer>

    		// now let's try to write some text with a font
    		// first thing to do is font selection
    		select_font(&FreeMono12pt7b);
 800278a:	485e      	ldr	r0, [pc, #376]	; (8002904 <main+0x4a4>)
 800278c:	f7ff fcfc 	bl	8002188 <select_font>
    		// now text will we written with that font
    		draw_text(tx_buf, "Lorem ipsum", 10, 20, 15);
 8002790:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002794:	f100 0018 	add.w	r0, r0, #24
 8002798:	3808      	subs	r0, #8
 800279a:	230f      	movs	r3, #15
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2314      	movs	r3, #20
 80027a0:	220a      	movs	r2, #10
 80027a2:	4959      	ldr	r1, [pc, #356]	; (8002908 <main+0x4a8>)
 80027a4:	f7ff fd98 	bl	80022d8 <draw_text>
    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 80027a8:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80027ac:	f103 0318 	add.w	r3, r3, #24
 80027b0:	3b08      	subs	r3, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fdc2 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 80027bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027c0:	f000 fcca 	bl	8003158 <HAL_Delay>

    		//change font to a differen one
    		select_font(&FreeSansOblique9pt7b);
 80027c4:	4851      	ldr	r0, [pc, #324]	; (800290c <main+0x4ac>)
 80027c6:	f7ff fcdf 	bl	8002188 <select_font>
    		draw_text(tx_buf, "dolor sit amet", 10, 45, 15);
 80027ca:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80027ce:	f100 0018 	add.w	r0, r0, #24
 80027d2:	3808      	subs	r0, #8
 80027d4:	230f      	movs	r3, #15
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	232d      	movs	r3, #45	; 0x2d
 80027da:	220a      	movs	r2, #10
 80027dc:	494c      	ldr	r1, [pc, #304]	; (8002910 <main+0x4b0>)
 80027de:	f7ff fd7b 	bl	80022d8 <draw_text>
    		// send a frame buffer to the display
    		send_buffer_to_OLED(tx_buf, 0, 0);
 80027e2:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80027e6:	f103 0318 	add.w	r3, r3, #24
 80027ea:	3b08      	subs	r3, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fda5 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 80027f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027fa:	f000 fcad 	bl	8003158 <HAL_Delay>

    		//you can use frame buffer that is bigger than default 256x64 pixels.
    		//Remember to divide size by two, because one byte stores two pixels.

    		uint8_t tx_buf2[256*256 / 2];
    		set_buffer_size(256, 256);
 80027fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002802:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002806:	f7fe fb95 	bl	8000f34 <set_buffer_size>

    		//now print a huge bitmap into frame buffer
    		draw_bitmap_8bpp(tx_buf2, creeper, 0, 0, 256, 256);
 800280a:	f107 0018 	add.w	r0, r7, #24
 800280e:	3818      	subs	r0, #24
 8002810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2300      	movs	r3, #0
 800281e:	2200      	movs	r2, #0
 8002820:	493c      	ldr	r1, [pc, #240]	; (8002914 <main+0x4b4>)
 8002822:	f7ff fc25 	bl	8002070 <draw_bitmap_8bpp>
    		send_buffer_to_OLED(tx_buf2, 0, 0);
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	3b18      	subs	r3, #24
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fd85 	bl	8002340 <send_buffer_to_OLED>
    		HAL_Delay(2000);
 8002836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800283a:	f000 fc8d 	bl	8003158 <HAL_Delay>

    		//only 1/4 of image is seen, so let's scroll the frame buffer down
    		for(int i = 0; i < 192; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8002844:	f102 0214 	add.w	r2, r2, #20
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01a      	b.n	8002882 <main+0x422>
    		{
    			send_buffer_to_OLED(tx_buf2, 0, i);
 800284c:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002850:	f103 0314 	add.w	r3, r3, #20
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29a      	uxth	r2, r3
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	3b18      	subs	r3, #24
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fd6d 	bl	8002340 <send_buffer_to_OLED>
    			HAL_Delay(5);
 8002866:	2005      	movs	r0, #5
 8002868:	f000 fc76 	bl	8003158 <HAL_Delay>
    		for(int i = 0; i < 192; i++)
 800286c:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002870:	f103 0314 	add.w	r3, r3, #20
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800287c:	f102 0214 	add.w	r2, r2, #20
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002886:	f103 0314 	add.w	r3, r3, #20
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2bbf      	cmp	r3, #191	; 0xbf
 800288e:	dddd      	ble.n	800284c <main+0x3ec>
    		}
    		HAL_Delay(200);
 8002890:	20c8      	movs	r0, #200	; 0xc8
 8002892:	f000 fc61 	bl	8003158 <HAL_Delay>
    		for (int i = 191; i >= 0; i--)
 8002896:	23bf      	movs	r3, #191	; 0xbf
 8002898:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800289c:	f102 0210 	add.w	r2, r2, #16
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01a      	b.n	80028da <main+0x47a>
    		{
    			send_buffer_to_OLED(tx_buf2, 0, i);
 80028a4:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028a8:	f103 0310 	add.w	r3, r3, #16
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f107 0318 	add.w	r3, r7, #24
 80028b4:	3b18      	subs	r3, #24
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fd41 	bl	8002340 <send_buffer_to_OLED>
    			HAL_Delay(5);
 80028be:	2005      	movs	r0, #5
 80028c0:	f000 fc4a 	bl	8003158 <HAL_Delay>
    		for (int i = 191; i >= 0; i--)
 80028c4:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028c8:	f103 0310 	add.w	r3, r3, #16
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80028d4:	f102 0210 	add.w	r2, r2, #16
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028de:	f103 0310 	add.w	r3, r3, #16
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dadd      	bge.n	80028a4 <main+0x444>
    		}
    		HAL_Delay(2000);
 80028e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028ec:	f000 fc34 	bl	8003158 <HAL_Delay>
  {
 80028f0:	e5c9      	b.n	8002486 <main+0x26>
 80028f2:	bf00      	nop
 80028f4:	0801d4b8 	.word	0x0801d4b8
 80028f8:	0801c4b8 	.word	0x0801c4b8
 80028fc:	20000004 	.word	0x20000004
 8002900:	0800b384 	.word	0x0800b384
 8002904:	0800bc44 	.word	0x0800bc44
 8002908:	0800b368 	.word	0x0800b368
 800290c:	0800c4a8 	.word	0x0800c4a8
 8002910:	0800b374 	.word	0x0800b374
 8002914:	0800c4b8 	.word	0x0800c4b8

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b094      	sub	sp, #80	; 0x50
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	2230      	movs	r2, #48	; 0x30
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f008 fc02 	bl	800b130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <SystemClock_Config+0xcc>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <SystemClock_Config+0xcc>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <SystemClock_Config+0xcc>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002958:	2300      	movs	r3, #0
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <SystemClock_Config+0xd0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <SystemClock_Config+0xd0>)
 8002962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <SystemClock_Config+0xd0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297e:	2302      	movs	r3, #2
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002988:	2308      	movs	r3, #8
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800298c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002990:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002992:	2302      	movs	r3, #2
 8002994:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002996:	2307      	movs	r3, #7
 8002998:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299a:	f107 0320 	add.w	r3, r7, #32
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fca2 	bl	80062e8 <HAL_RCC_OscConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80029aa:	f000 f9b5 	bl	8002d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	230f      	movs	r3, #15
 80029b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b2:	2302      	movs	r3, #2
 80029b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	2105      	movs	r1, #5
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 ff03 	bl	80067d8 <HAL_RCC_ClockConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80029d8:	f000 f99e 	bl	8002d18 <Error_Handler>
  }
}
 80029dc:	bf00      	nop
 80029de:	3750      	adds	r7, #80	; 0x50
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000

080029ec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <MX_I2S3_Init+0x54>)
 80029f2:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <MX_I2S3_Init+0x58>)
 80029f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <MX_I2S3_Init+0x54>)
 80029f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a10:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a14:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <MX_I2S3_Init+0x5c>)
 8002a16:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <MX_I2S3_Init+0x54>)
 8002a2c:	f002 ffbc 	bl	80059a8 <HAL_I2S_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002a36:	f000 f96f 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200020a0 	.word	0x200020a0
 8002a44:	40003c00 	.word	0x40003c00
 8002a48:	00017700 	.word	0x00017700

08002a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <MX_SPI1_Init+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a98:	220a      	movs	r2, #10
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a9c:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <MX_SPI1_Init+0x64>)
 8002a9e:	f004 f9c9 	bl	8006e34 <HAL_SPI_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002aa8:	f000 f936 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200020e8 	.word	0x200020e8
 8002ab4:	40013000 	.word	0x40013000

08002ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a8a      	ldr	r2, [pc, #552]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	4b84      	ldr	r3, [pc, #528]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a83      	ldr	r2, [pc, #524]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a6e      	ldr	r2, [pc, #440]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b64:	f043 0308 	orr.w	r3, r3, #8
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <MX_GPIO_Init+0x248>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2108      	movs	r1, #8
 8002b7a:	4862      	ldr	r0, [pc, #392]	; (8002d04 <MX_GPIO_Init+0x24c>)
 8002b7c:	f000 fde0 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b80:	2201      	movs	r2, #1
 8002b82:	2101      	movs	r1, #1
 8002b84:	4860      	ldr	r0, [pc, #384]	; (8002d08 <MX_GPIO_Init+0x250>)
 8002b86:	f000 fddb 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RES_Pin|CS_Pin|SHDN_Pin, GPIO_PIN_SET);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002b90:	485e      	ldr	r0, [pc, #376]	; (8002d0c <MX_GPIO_Init+0x254>)
 8002b92:	f000 fdd5 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BS1_GPIO_Port, BS1_Pin, GPIO_PIN_RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9c:	485b      	ldr	r0, [pc, #364]	; (8002d0c <MX_GPIO_Init+0x254>)
 8002b9e:	f000 fdcf 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BS0_GPIO_Port, BS0_Pin, GPIO_PIN_SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba8:	4859      	ldr	r0, [pc, #356]	; (8002d10 <MX_GPIO_Init+0x258>)
 8002baa:	f000 fdc9 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DC_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f24f 2110 	movw	r1, #61968	; 0xf210
 8002bb4:	4856      	ldr	r0, [pc, #344]	; (8002d10 <MX_GPIO_Init+0x258>)
 8002bb6:	f000 fdc3 	bl	8003740 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002bba:	2308      	movs	r3, #8
 8002bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	484c      	ldr	r0, [pc, #304]	; (8002d04 <MX_GPIO_Init+0x24c>)
 8002bd2:	f000 fc19 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4619      	mov	r1, r3
 8002bec:	4846      	ldr	r0, [pc, #280]	; (8002d08 <MX_GPIO_Init+0x250>)
 8002bee:	f000 fc0b 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c02:	2305      	movs	r3, #5
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	483e      	ldr	r0, [pc, #248]	; (8002d08 <MX_GPIO_Init+0x250>)
 8002c0e:	f000 fbfb 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4619      	mov	r1, r3
 8002c26:	483b      	ldr	r0, [pc, #236]	; (8002d14 <MX_GPIO_Init+0x25c>)
 8002c28:	f000 fbee 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4833      	ldr	r0, [pc, #204]	; (8002d0c <MX_GPIO_Init+0x254>)
 8002c40:	f000 fbe2 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c56:	2305      	movs	r3, #5
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	482a      	ldr	r0, [pc, #168]	; (8002d0c <MX_GPIO_Init+0x254>)
 8002c62:	f000 fbd1 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_Pin CS_Pin SHDN_Pin BS1_Pin */
  GPIO_InitStruct.Pin = RES_Pin|CS_Pin|SHDN_Pin|BS1_Pin;
 8002c66:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4823      	ldr	r0, [pc, #140]	; (8002d0c <MX_GPIO_Init+0x254>)
 8002c80:	f000 fbc2 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : BS0_Pin DC_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = BS0_Pin|DC_Pin|LD4_Pin|LD3_Pin
 8002c84:	f24f 3310 	movw	r3, #62224	; 0xf310
 8002c88:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c96:	f107 031c 	add.w	r3, r7, #28
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	481c      	ldr	r0, [pc, #112]	; (8002d10 <MX_GPIO_Init+0x258>)
 8002c9e:	f000 fbb3 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4816      	ldr	r0, [pc, #88]	; (8002d10 <MX_GPIO_Init+0x258>)
 8002cb6:	f000 fba7 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002cba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc0:	2312      	movs	r3, #18
 8002cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	480d      	ldr	r0, [pc, #52]	; (8002d0c <MX_GPIO_Init+0x254>)
 8002cd8:	f000 fb96 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ce0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4804      	ldr	r0, [pc, #16]	; (8002d04 <MX_GPIO_Init+0x24c>)
 8002cf2:	f000 fb89 	bl	8003408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cf6:	bf00      	nop
 8002cf8:	3730      	adds	r7, #48	; 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40020400 	.word	0x40020400
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40020000 	.word	0x40020000

08002d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <Error_Handler+0x8>
	...

08002d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_MspInit+0x4c>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <HAL_MspInit+0x4c>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_MspInit+0x4c>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_MspInit+0x4c>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a08      	ldr	r2, [pc, #32]	; (8002d70 <HAL_MspInit+0x4c>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_MspInit+0x4c>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d62:	2007      	movs	r0, #7
 8002d64:	f000 faec 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800

08002d74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	; 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <HAL_I2S_MspInit+0xf0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d15a      	bne.n	8002e5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002da4:	2301      	movs	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002da8:	23c0      	movs	r3, #192	; 0xc0
 8002daa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002dac:	2302      	movs	r3, #2
 8002dae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fefb 	bl	8006bb0 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002dc0:	f7ff ffaa 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_I2S_MspInit+0xf4>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002e18:	2310      	movs	r3, #16
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e28:	2306      	movs	r3, #6
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	4619      	mov	r1, r3
 8002e32:	480e      	ldr	r0, [pc, #56]	; (8002e6c <HAL_I2S_MspInit+0xf8>)
 8002e34:	f000 fae8 	bl	8003408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002e38:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e52:	4619      	mov	r1, r3
 8002e54:	4806      	ldr	r0, [pc, #24]	; (8002e70 <HAL_I2S_MspInit+0xfc>)
 8002e56:	f000 fad7 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e5a:	bf00      	nop
 8002e5c:	3738      	adds	r7, #56	; 0x38
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40003c00 	.word	0x40003c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	40020800 	.word	0x40020800

08002e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_SPI_MspInit+0x94>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d133      	bne.n	8002efe <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_SPI_MspInit+0x98>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <HAL_SPI_MspInit+0x98>)
 8002ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_SPI_MspInit+0x98>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_SPI_MspInit+0x98>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_SPI_MspInit+0x98>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_SPI_MspInit+0x98>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002ece:	23e0      	movs	r3, #224	; 0xe0
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ede:	2305      	movs	r3, #5
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <HAL_SPI_MspInit+0x9c>)
 8002eea:	f000 fa8d 	bl	8003408 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2023      	movs	r0, #35	; 0x23
 8002ef4:	f000 fa2f 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ef8:	2023      	movs	r0, #35	; 0x23
 8002efa:	f000 fa48 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40013000 	.word	0x40013000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020000 	.word	0x40020000

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f18:	e7fe      	b.n	8002f18 <NMI_Handler+0x4>

08002f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <HardFault_Handler+0x4>

08002f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <MemManage_Handler+0x4>

08002f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f60:	f000 f8da 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <SPI1_IRQHandler+0x10>)
 8002f6e:	f004 f92d 	bl	80071cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200020e8 	.word	0x200020e8

08002f7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <OTG_FS_IRQHandler+0x10>)
 8002f82:	f000 fed7 	bl	8003d34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20002524 	.word	0x20002524

08002f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <_sbrk+0x5c>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <_sbrk+0x60>)
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <_sbrk+0x64>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <_sbrk+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d207      	bcs.n	8002fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc0:	f008 f8ce 	bl	800b160 <__errno>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e009      	b.n	8002fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <_sbrk+0x64>)
 8002fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20020000 	.word	0x20020000
 8002ff0:	00000400 	.word	0x00000400
 8002ff4:	20002140 	.word	0x20002140
 8002ff8:	20002a50 	.word	0x20002a50

08002ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <SystemInit+0x20>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <SystemInit+0x20>)
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003024:	f7ff ffea 	bl	8002ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800302a:	490d      	ldr	r1, [pc, #52]	; (8003060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304e:	f008 f88d 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7ff fa05 	bl	8002460 <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	20002080 	.word	0x20002080
  ldr r2, =_sidata
 8003064:	0801e4d8 	.word	0x0801e4d8
  ldr r2, =_sbss
 8003068:	20002080 	.word	0x20002080
  ldr r4, =_ebss
 800306c:	20002a4c 	.word	0x20002a4c

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_Init+0x40>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_Init+0x40>)
 800308a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_Init+0x40>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309c:	2003      	movs	r0, #3
 800309e:	f000 f94f 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f000 f808 	bl	80030b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff fe3c 	bl	8002d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_InitTick+0x54>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_InitTick+0x58>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f967 	bl	80033aa <HAL_SYSTICK_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00e      	b.n	8003104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d80a      	bhi.n	8003102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ec:	2200      	movs	r2, #0
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f000 f92f 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f8:	4a06      	ldr	r2, [pc, #24]	; (8003114 <HAL_InitTick+0x5c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20002004 	.word	0x20002004
 8003110:	2000200c 	.word	0x2000200c
 8003114:	20002008 	.word	0x20002008

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	2000200c 	.word	0x2000200c
 800313c:	20002144 	.word	0x20002144

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20002144 	.word	0x20002144

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffde 	bl	8003140 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000200c 	.word	0x2000200c

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff29 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff3e 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff8e 	bl	8003294 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5d 	bl	8003240 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff31 	bl	8003204 <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e00c      	b.n	80033fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2205      	movs	r2, #5
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e16b      	b.n	80036fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 815a 	bne.w	80036f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80b4 	beq.w	80036f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b60      	ldr	r3, [pc, #384]	; (8003714 <HAL_GPIO_Init+0x30c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a5f      	ldr	r2, [pc, #380]	; (8003714 <HAL_GPIO_Init+0x30c>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_GPIO_Init+0x30c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_GPIO_Init+0x310>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_GPIO_Init+0x314>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02b      	beq.n	800362e <HAL_GPIO_Init+0x226>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a51      	ldr	r2, [pc, #324]	; (8003720 <HAL_GPIO_Init+0x318>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d025      	beq.n	800362a <HAL_GPIO_Init+0x222>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_GPIO_Init+0x31c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <HAL_GPIO_Init+0x21e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	; (8003728 <HAL_GPIO_Init+0x320>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	; (800372c <HAL_GPIO_Init+0x324>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_GPIO_Init+0x328>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4c      	ldr	r2, [pc, #304]	; (8003734 <HAL_GPIO_Init+0x32c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4b      	ldr	r2, [pc, #300]	; (8003738 <HAL_GPIO_Init+0x330>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x20a>
 800360e:	2307      	movs	r3, #7
 8003610:	e00e      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003612:	2308      	movs	r3, #8
 8003614:	e00c      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003616:	2306      	movs	r3, #6
 8003618:	e00a      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800361a:	2305      	movs	r3, #5
 800361c:	e008      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800361e:	2304      	movs	r3, #4
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003622:	2303      	movs	r3, #3
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800362e:	2300      	movs	r3, #0
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f002 0203 	and.w	r2, r2, #3
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003640:	4935      	ldr	r1, [pc, #212]	; (8003718 <HAL_GPIO_Init+0x310>)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_GPIO_Init+0x334>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a32      	ldr	r2, [pc, #200]	; (800373c <HAL_GPIO_Init+0x334>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_GPIO_Init+0x334>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_GPIO_Init+0x334>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_GPIO_Init+0x334>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_GPIO_Init+0x334>)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_GPIO_Init+0x334>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_GPIO_Init+0x334>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	f67f ae90 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	40013800 	.word	0x40013800
 800371c:	40020000 	.word	0x40020000
 8003720:	40020400 	.word	0x40020400
 8003724:	40020800 	.word	0x40020800
 8003728:	40020c00 	.word	0x40020c00
 800372c:	40021000 	.word	0x40021000
 8003730:	40021400 	.word	0x40021400
 8003734:	40021800 	.word	0x40021800
 8003738:	40021c00 	.word	0x40021c00
 800373c:	40013c00 	.word	0x40013c00

08003740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003750:	787b      	ldrb	r3, [r7, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800375c:	e003      	b.n	8003766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	041a      	lsls	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	619a      	str	r2, [r3, #24]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af02      	add	r7, sp, #8
 8003778:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e059      	b.n	8003838 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f007 f95e 	bl	800aa60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2203      	movs	r2, #3
 80037a8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b2:	d102      	bne.n	80037ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 ff67 	bl	8007692 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7c1a      	ldrb	r2, [r3, #16]
 80037cc:	f88d 2000 	strb.w	r2, [sp]
 80037d0:	3304      	adds	r3, #4
 80037d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d4:	f003 fee8 	bl	80075a8 <USB_CoreInit>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e026      	b.n	8003838 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f003 ff5f 	bl	80076b4 <USB_SetCurrentMode>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e017      	b.n	8003838 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7c1a      	ldrb	r2, [r3, #16]
 8003810:	f88d 2000 	strb.w	r2, [sp]
 8003814:	3304      	adds	r3, #4
 8003816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003818:	f004 f902 	bl	8007a20 <USB_HostInit>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e004      	b.n	8003838 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b08b      	sub	sp, #44	; 0x2c
 8003844:	af04      	add	r7, sp, #16
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	4608      	mov	r0, r1
 800384a:	4611      	mov	r1, r2
 800384c:	461a      	mov	r2, r3
 800384e:	4603      	mov	r3, r0
 8003850:	70fb      	strb	r3, [r7, #3]
 8003852:	460b      	mov	r3, r1
 8003854:	70bb      	strb	r3, [r7, #2]
 8003856:	4613      	mov	r3, r2
 8003858:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800385a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800385c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_HCD_HC_Init+0x2c>
 8003868:	2302      	movs	r3, #2
 800386a:	e09d      	b.n	80039a8 <HAL_HCD_HC_Init+0x168>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3319      	adds	r3, #25
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3314      	adds	r3, #20
 8003898:	787a      	ldrb	r2, [r7, #1]
 800389a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3315      	adds	r3, #21
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3326      	adds	r3, #38	; 0x26
 80038c0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80038c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	78bb      	ldrb	r3, [r7, #2]
 80038ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ce:	b2d8      	uxtb	r0, r3
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3316      	adds	r3, #22
 80038de:	4602      	mov	r2, r0
 80038e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fbc8 	bl	800407c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80038ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0a      	bge.n	800390a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3317      	adds	r3, #23
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e009      	b.n	800391e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3317      	adds	r3, #23
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f004 f9e0 	bl	8007ce8 <USB_GetHostSpeed>
 8003928:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800392a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10b      	bne.n	800394a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_HCD_HC_Init+0x10a>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2bbc      	cmp	r3, #188	; 0xbc
 8003944:	d901      	bls.n	800394a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003946:	23bc      	movs	r3, #188	; 0xbc
 8003948:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3318      	adds	r3, #24
 800395a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800395e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	b298      	uxth	r0, r3
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3328      	adds	r3, #40	; 0x28
 8003974:	4602      	mov	r2, r0
 8003976:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	b29b      	uxth	r3, r3
 8003980:	787c      	ldrb	r4, [r7, #1]
 8003982:	78ba      	ldrb	r2, [r7, #2]
 8003984:	78f9      	ldrb	r1, [r7, #3]
 8003986:	9302      	str	r3, [sp, #8]
 8003988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	4623      	mov	r3, r4
 8003996:	f004 f9cf 	bl	8007d38 <USB_HC_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}

080039b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_HCD_HC_Halt+0x1e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e00f      	b.n	80039ee <HAL_HCD_HC_Halt+0x3e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 fd61 	bl	80084a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	70fb      	strb	r3, [r7, #3]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70bb      	strb	r3, [r7, #2]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	3317      	adds	r3, #23
 8003a22:	78ba      	ldrb	r2, [r7, #2]
 8003a24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3326      	adds	r3, #38	; 0x26
 8003a36:	787a      	ldrb	r2, [r7, #1]
 8003a38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a3a:	7c3b      	ldrb	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d114      	bne.n	8003a6a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	332a      	adds	r3, #42	; 0x2a
 8003a50:	2203      	movs	r2, #3
 8003a52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3319      	adds	r3, #25
 8003a64:	7f3a      	ldrb	r2, [r7, #28]
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e009      	b.n	8003a7e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	332a      	adds	r3, #42	; 0x2a
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a7e:	787b      	ldrb	r3, [r7, #1]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	f200 8102 	bhi.w	8003c8a <HAL_HCD_HC_SubmitRequest+0x292>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003c75 	.word	0x08003c75
 8003a94:	08003b61 	.word	0x08003b61
 8003a98:	08003beb 	.word	0x08003beb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003a9c:	7c3b      	ldrb	r3, [r7, #16]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 80f5 	bne.w	8003c8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003aa4:	78bb      	ldrb	r3, [r7, #2]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12d      	bne.n	8003b06 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003aaa:	8b3b      	ldrh	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	333d      	adds	r3, #61	; 0x3d
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	333d      	adds	r3, #61	; 0x3d
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	332a      	adds	r3, #42	; 0x2a
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003aee:	e0ce      	b.n	8003c8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	332a      	adds	r3, #42	; 0x2a
 8003b00:	2202      	movs	r2, #2
 8003b02:	701a      	strb	r2, [r3, #0]
      break;
 8003b04:	e0c3      	b.n	8003c8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	331a      	adds	r3, #26
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 80b8 	bne.w	8003c8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	333c      	adds	r3, #60	; 0x3c
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	332a      	adds	r3, #42	; 0x2a
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
      break;
 8003b48:	e0a1      	b.n	8003c8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	332a      	adds	r3, #42	; 0x2a
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	701a      	strb	r2, [r3, #0]
      break;
 8003b5e:	e096      	b.n	8003c8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b60:	78bb      	ldrb	r3, [r7, #2]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d120      	bne.n	8003ba8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	333d      	adds	r3, #61	; 0x3d
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	332a      	adds	r3, #42	; 0x2a
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b90:	e07e      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	332a      	adds	r3, #42	; 0x2a
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
      break;
 8003ba6:	e073      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	333c      	adds	r3, #60	; 0x3c
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	332a      	adds	r3, #42	; 0x2a
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
      break;
 8003bd2:	e05d      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	332a      	adds	r3, #42	; 0x2a
 8003be4:	2202      	movs	r2, #2
 8003be6:	701a      	strb	r2, [r3, #0]
      break;
 8003be8:	e052      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003bea:	78bb      	ldrb	r3, [r7, #2]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d120      	bne.n	8003c32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	333d      	adds	r3, #61	; 0x3d
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	332a      	adds	r3, #42	; 0x2a
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c1a:	e039      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	332a      	adds	r3, #42	; 0x2a
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	701a      	strb	r2, [r3, #0]
      break;
 8003c30:	e02e      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	333c      	adds	r3, #60	; 0x3c
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	332a      	adds	r3, #42	; 0x2a
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
      break;
 8003c5c:	e018      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	332a      	adds	r3, #42	; 0x2a
 8003c6e:	2202      	movs	r2, #2
 8003c70:	701a      	strb	r2, [r3, #0]
      break;
 8003c72:	e00d      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	332a      	adds	r3, #42	; 0x2a
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
      break;
 8003c88:	e002      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003c8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	332c      	adds	r3, #44	; 0x2c
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	8b39      	ldrh	r1, [r7, #24]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4403      	add	r3, r0
 8003cb4:	3334      	adds	r3, #52	; 0x34
 8003cb6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	334c      	adds	r3, #76	; 0x4c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3338      	adds	r3, #56	; 0x38
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3315      	adds	r3, #21
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	334d      	adds	r3, #77	; 0x4d
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	3310      	adds	r3, #16
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	1d19      	adds	r1, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	799b      	ldrb	r3, [r3, #6]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f004 f934 	bl	8007f90 <USB_HC_StartXfer>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop

08003d34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 fe28 	bl	80079a0 <USB_GetMode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	f040 80fb 	bne.w	8003f4e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fdeb 	bl	8007938 <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80f1 	beq.w	8003f4c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 fde2 	bl	8007938 <USB_ReadInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d7e:	d104      	bne.n	8003d8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fdd2 	bl	8007938 <USB_ReadInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9e:	d104      	bne.n	8003daa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fdc2 	bl	8007938 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dbe:	d104      	bne.n	8003dca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 fdb2 	bl	8007938 <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d103      	bne.n	8003de6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2202      	movs	r2, #2
 8003de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f003 fda4 	bl	8007938 <USB_ReadInterrupts>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfa:	d120      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d113      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e16:	2110      	movs	r1, #16
 8003e18:	6938      	ldr	r0, [r7, #16]
 8003e1a:	f003 fc97 	bl	800774c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e1e:	6938      	ldr	r0, [r7, #16]
 8003e20:	f003 fcc6 	bl	80077b0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7a5b      	ldrb	r3, [r3, #9]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d105      	bne.n	8003e38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 feb8 	bl	8007ba8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f006 fe8f 	bl	800ab5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f003 fd78 	bl	8007938 <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e52:	d102      	bne.n	8003e5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 fd33 	bl	80058c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 fd6a 	bl	8007938 <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d106      	bne.n	8003e7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f006 fe58 	bl	800ab24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f003 fd59 	bl	8007938 <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e90:	d139      	bne.n	8003f06 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 faf4 	bl	8008484 <USB_HC_ReadInterrupt>
 8003e9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e025      	b.n	8003ef0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d018      	beq.n	8003eea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d106      	bne.n	8003ede <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f905 	bl	80040e6 <HCD_HC_IN_IRQHandler>
 8003edc:	e005      	b.n	8003eea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 ff67 	bl	8004db8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	3301      	adds	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	795b      	ldrb	r3, [r3, #5]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d3d3      	bcc.n	8003ea4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 fd14 	bl	8007938 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d101      	bne.n	8003f1e <HAL_HCD_IRQHandler+0x1ea>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_HCD_IRQHandler+0x1ec>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d014      	beq.n	8003f4e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0210 	bic.w	r2, r2, #16
 8003f32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 fbe4 	bl	8005702 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0210 	orr.w	r2, r2, #16
 8003f48:	619a      	str	r2, [r3, #24]
 8003f4a:	e000      	b.n	8003f4e <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f4c:	bf00      	nop
    }
  }
}
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_HCD_Start+0x16>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e013      	b.n	8003f92 <HAL_HCD_Start+0x3e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f003 fe7c 	bl	8007c76 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 fb74 	bl	8007670 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_HCD_Stop+0x16>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e00d      	b.n	8003fcc <HAL_HCD_Stop+0x32>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f004 fbcf 	bl	8008760 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f003 fe1e 	bl	8007c22 <USB_ResetPort>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334c      	adds	r3, #76	; 0x4c
 800400c:	781b      	ldrb	r3, [r3, #0]
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3338      	adds	r3, #56	; 0x38
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f003 fe60 	bl	8007d16 <USB_GetCurrentFrame>
 8004056:	4603      	mov	r3, r0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f003 fe3b 	bl	8007ce8 <USB_GetHostSpeed>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	331a      	adds	r3, #26
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	331b      	adds	r3, #27
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3325      	adds	r3, #37	; 0x25
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3324      	adds	r3, #36	; 0x24
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f003 fc2a 	bl	800795e <USB_ReadChInterrupts>
 800410a:	4603      	mov	r3, r0
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d11a      	bne.n	800414a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	461a      	mov	r2, r3
 8004122:	2304      	movs	r3, #4
 8004124:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334d      	adds	r3, #77	; 0x4d
 8004136:	2207      	movs	r2, #7
 8004138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f004 f9af 	bl	80084a6 <USB_HC_Halt>
 8004148:	e09e      	b.n	8004288 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f003 fc03 	bl	800795e <USB_ReadChInterrupts>
 8004158:	4603      	mov	r3, r0
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	d11b      	bne.n	800419c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	461a      	mov	r2, r3
 8004172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004176:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	334d      	adds	r3, #77	; 0x4d
 8004188:	2208      	movs	r2, #8
 800418a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f004 f986 	bl	80084a6 <USB_HC_Halt>
 800419a:	e075      	b.n	8004288 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f003 fbda 	bl	800795e <USB_ReadChInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d11a      	bne.n	80041ea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	2308      	movs	r3, #8
 80041c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334d      	adds	r3, #77	; 0x4d
 80041d6:	2206      	movs	r2, #6
 80041d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 f95f 	bl	80084a6 <USB_HC_Halt>
 80041e8:	e04e      	b.n	8004288 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f003 fbb3 	bl	800795e <USB_ReadChInterrupts>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d11b      	bne.n	800423c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	461a      	mov	r2, r3
 8004212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004216:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334d      	adds	r3, #77	; 0x4d
 8004228:	2209      	movs	r2, #9
 800422a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f004 f936 	bl	80084a6 <USB_HC_Halt>
 800423a:	e025      	b.n	8004288 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f003 fb8a 	bl	800795e <USB_ReadChInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d119      	bne.n	8004288 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	461a      	mov	r2, r3
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	334d      	adds	r3, #77	; 0x4d
 8004276:	2207      	movs	r2, #7
 8004278:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f004 f90f 	bl	80084a6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f003 fb64 	bl	800795e <USB_ReadChInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d112      	bne.n	80042c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f004 f8fb 	bl	80084a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	461a      	mov	r2, r3
 80042be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c2:	6093      	str	r3, [r2, #8]
 80042c4:	f000 bd75 	b.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f003 fb44 	bl	800795e <USB_ReadChInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 8128 	bne.w	8004532 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	461a      	mov	r2, r3
 80042f0:	2320      	movs	r3, #32
 80042f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	331b      	adds	r3, #27
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d119      	bne.n	800433e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	331b      	adds	r3, #27
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	440a      	add	r2, r1
 8004334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	799b      	ldrb	r3, [r3, #6]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01b      	beq.n	800437e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3330      	adds	r3, #48	; 0x30
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	1ac9      	subs	r1, r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4403      	add	r3, r0
 800437a:	3338      	adds	r3, #56	; 0x38
 800437c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	334d      	adds	r3, #77	; 0x4d
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3344      	adds	r3, #68	; 0x44
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	2301      	movs	r3, #1
 80043b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	3326      	adds	r3, #38	; 0x26
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3326      	adds	r3, #38	; 0x26
 80043de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d110      	bne.n	8004406 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f004 f85a 	bl	80084a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	461a      	mov	r2, r3
 8004400:	2310      	movs	r3, #16
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e03d      	b.n	8004482 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3326      	adds	r3, #38	; 0x26
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d00a      	beq.n	8004432 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3326      	adds	r3, #38	; 0x26
 800442c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800442e:	2b01      	cmp	r3, #1
 8004430:	d127      	bne.n	8004482 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004450:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334c      	adds	r3, #76	; 0x4c
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334c      	adds	r3, #76	; 0x4c
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f006 fb7b 	bl	800ab78 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	799b      	ldrb	r3, [r3, #6]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d13b      	bne.n	8004502 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3338      	adds	r3, #56	; 0x38
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4403      	add	r3, r0
 80044aa:	3328      	adds	r3, #40	; 0x28
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	440b      	add	r3, r1
 80044b0:	1e59      	subs	r1, r3, #1
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	3328      	adds	r3, #40	; 0x28
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8470 	beq.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	333c      	adds	r3, #60	; 0x3c
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2d8      	uxtb	r0, r3
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	333c      	adds	r3, #60	; 0x3c
 80044fa:	4602      	mov	r2, r0
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	f000 bc58 	b.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	333c      	adds	r3, #60	; 0x3c
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	f083 0301 	eor.w	r3, r3, #1
 800451a:	b2d8      	uxtb	r0, r3
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	333c      	adds	r3, #60	; 0x3c
 800452a:	4602      	mov	r2, r0
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	f000 bc40 	b.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f003 fa0f 	bl	800795e <USB_ReadChInterrupts>
 8004540:	4603      	mov	r3, r0
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	d131      	bne.n	80045ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	461a      	mov	r2, r3
 8004558:	2320      	movs	r3, #32
 800455a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	331a      	adds	r3, #26
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	f040 841f 	bne.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	331b      	adds	r3, #27
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	334d      	adds	r3, #77	; 0x4d
 8004598:	2203      	movs	r2, #3
 800459a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 ff7e 	bl	80084a6 <USB_HC_Halt>
 80045aa:	f000 bc02 	b.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 f9d1 	bl	800795e <USB_ReadChInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	f040 8305 	bne.w	8004bd2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	461a      	mov	r2, r3
 80045d6:	2302      	movs	r3, #2
 80045d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	334d      	adds	r3, #77	; 0x4d
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d114      	bne.n	800461a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	334d      	adds	r3, #77	; 0x4d
 8004600:	2202      	movs	r2, #2
 8004602:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	334c      	adds	r3, #76	; 0x4c
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e2cc      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	334d      	adds	r3, #77	; 0x4d
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d114      	bne.n	800465a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	334d      	adds	r3, #77	; 0x4d
 8004640:	2202      	movs	r2, #2
 8004642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	2205      	movs	r2, #5
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e2ac      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	334d      	adds	r3, #77	; 0x4d
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b07      	cmp	r3, #7
 800466e:	d00b      	beq.n	8004688 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	334d      	adds	r3, #77	; 0x4d
 8004680:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004682:	2b09      	cmp	r3, #9
 8004684:	f040 80a6 	bne.w	80047d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334d      	adds	r3, #77	; 0x4d
 8004698:	2202      	movs	r2, #2
 800469a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3344      	adds	r3, #68	; 0x44
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1c59      	adds	r1, r3, #1
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4403      	add	r3, r0
 80046bc:	3344      	adds	r3, #68	; 0x44
 80046be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	3344      	adds	r3, #68	; 0x44
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d943      	bls.n	800475e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	3344      	adds	r3, #68	; 0x44
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	331a      	adds	r3, #26
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d123      	bne.n	8004748 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	331b      	adds	r3, #27
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	331c      	adds	r3, #28
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	440a      	add	r2, r1
 800473e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	334c      	adds	r3, #76	; 0x4c
 8004758:	2204      	movs	r2, #4
 800475a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800475c:	e229      	b.n	8004bb2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	334c      	adds	r3, #76	; 0x4c
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	3326      	adds	r3, #38	; 0x26
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3326      	adds	r3, #38	; 0x26
 8004798:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800479a:	2b02      	cmp	r3, #2
 800479c:	f040 8209 	bne.w	8004bb2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	461a      	mov	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047d2:	e1ee      	b.n	8004bb2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334d      	adds	r3, #77	; 0x4d
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	f040 80c8 	bne.w	800497c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	334d      	adds	r3, #77	; 0x4d
 80047fc:	2202      	movs	r2, #2
 80047fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	331b      	adds	r3, #27
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	f040 81ce 	bne.w	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3326      	adds	r3, #38	; 0x26
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d16b      	bne.n	8004906 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	3348      	adds	r3, #72	; 0x48
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4403      	add	r3, r0
 800484e:	3348      	adds	r3, #72	; 0x48
 8004850:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3348      	adds	r3, #72	; 0x48
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d943      	bls.n	80048f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	3348      	adds	r3, #72	; 0x48
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	331b      	adds	r3, #27
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3344      	adds	r3, #68	; 0x44
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d809      	bhi.n	80048ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	331c      	adds	r3, #28
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	334c      	adds	r3, #76	; 0x4c
 80048ea:	2204      	movs	r2, #4
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e014      	b.n	800491a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	334c      	adds	r3, #76	; 0x4c
 8004900:	2202      	movs	r2, #2
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	e009      	b.n	800491a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	334c      	adds	r3, #76	; 0x4c
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3326      	adds	r3, #38	; 0x26
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	3326      	adds	r3, #38	; 0x26
 8004940:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004942:	2b02      	cmp	r3, #2
 8004944:	f040 8136 	bne.w	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800495e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004966:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	461a      	mov	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e11b      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	334d      	adds	r3, #77	; 0x4d
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b03      	cmp	r3, #3
 8004990:	f040 8081 	bne.w	8004a96 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334d      	adds	r3, #77	; 0x4d
 80049a4:	2202      	movs	r2, #2
 80049a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	331b      	adds	r3, #27
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	f040 80fa 	bne.w	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	334c      	adds	r3, #76	; 0x4c
 80049d0:	2202      	movs	r2, #2
 80049d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a12:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a2e:	f023 0320 	bic.w	r3, r3, #32
 8004a32:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	3326      	adds	r3, #38	; 0x26
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3326      	adds	r3, #38	; 0x26
 8004a5a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	f040 80a9 	bne.w	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a80:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e08e      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	334d      	adds	r3, #77	; 0x4d
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d143      	bne.n	8004b34 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	334d      	adds	r3, #77	; 0x4d
 8004abc:	2202      	movs	r2, #2
 8004abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	334c      	adds	r3, #76	; 0x4c
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	3326      	adds	r3, #38	; 0x26
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3326      	adds	r3, #38	; 0x26
 8004afa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d159      	bne.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e03f      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334d      	adds	r3, #77	; 0x4d
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d126      	bne.n	8004b98 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	334d      	adds	r3, #77	; 0x4d
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3344      	adds	r3, #68	; 0x44
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	1c59      	adds	r1, r3, #1
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4403      	add	r3, r0
 8004b7e:	3344      	adds	r3, #68	; 0x44
 8004b80:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	334c      	adds	r3, #76	; 0x4c
 8004b92:	2204      	movs	r2, #4
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e00d      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	334d      	adds	r3, #77	; 0x4d
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	f000 8100 	beq.w	8004db0 <HCD_HC_IN_IRQHandler+0xcca>
 8004bb0:	e000      	b.n	8004bb4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bb2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	334c      	adds	r3, #76	; 0x4c
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f005 ffd4 	bl	800ab78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bd0:	e0ef      	b.n	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 febf 	bl	800795e <USB_ReadChInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d12f      	bne.n	8004c4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2340      	movs	r3, #64	; 0x40
 8004bfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	334d      	adds	r3, #77	; 0x4d
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	331a      	adds	r3, #26
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3344      	adds	r3, #68	; 0x44
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f003 fc2f 	bl	80084a6 <USB_HC_Halt>
 8004c48:	e0b3      	b.n	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f002 fe83 	bl	800795e <USB_ReadChInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	f040 80a7 	bne.w	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3326      	adds	r3, #38	; 0x26
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d11b      	bne.n	8004cb2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	3344      	adds	r3, #68	; 0x44
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	334d      	adds	r3, #77	; 0x4d
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 fbfb 	bl	80084a6 <USB_HC_Halt>
 8004cb0:	e03f      	b.n	8004d32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3326      	adds	r3, #38	; 0x26
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3326      	adds	r3, #38	; 0x26
 8004cd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d129      	bne.n	8004d32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3344      	adds	r3, #68	; 0x44
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	799b      	ldrb	r3, [r3, #6]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HCD_HC_IN_IRQHandler+0xc2a>
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	331b      	adds	r3, #27
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d110      	bne.n	8004d32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334d      	adds	r3, #77	; 0x4d
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 fbba 	bl	80084a6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	331b      	adds	r3, #27
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d129      	bne.n	8004d9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	331b      	adds	r3, #27
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d96:	f043 0320 	orr.w	r3, r3, #32
 8004d9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	461a      	mov	r2, r3
 8004daa:	2310      	movs	r3, #16
 8004dac:	6093      	str	r3, [r2, #8]
 8004dae:	e000      	b.n	8004db2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004db0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fdc1 	bl	800795e <USB_ReadChInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d11b      	bne.n	8004e1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	461a      	mov	r2, r3
 8004df4:	2304      	movs	r3, #4
 8004df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	334d      	adds	r3, #77	; 0x4d
 8004e08:	2207      	movs	r2, #7
 8004e0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fb46 	bl	80084a6 <USB_HC_Halt>
 8004e1a:	f000 bc6f 	b.w	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 fd99 	bl	800795e <USB_ReadChInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	f040 8082 	bne.w	8004f3c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	2320      	movs	r3, #32
 8004e48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	3319      	adds	r3, #25
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d124      	bne.n	8004eaa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3319      	adds	r3, #25
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334c      	adds	r3, #76	; 0x4c
 8004e84:	2202      	movs	r2, #2
 8004e86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	334d      	adds	r3, #77	; 0x4d
 8004e98:	2203      	movs	r2, #3
 8004e9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fafe 	bl	80084a6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	331a      	adds	r3, #26
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f040 841d 	bne.w	80056fc <HCD_HC_OUT_IRQHandler+0x944>
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	331b      	adds	r3, #27
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8411 	bne.w	80056fc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3326      	adds	r3, #38	; 0x26
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d009      	beq.n	8004f04 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	331b      	adds	r3, #27
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	334d      	adds	r3, #77	; 0x4d
 8004f14:	2203      	movs	r2, #3
 8004f16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fac0 	bl	80084a6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3344      	adds	r3, #68	; 0x44
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e3df      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 fd0a 	bl	800795e <USB_ReadChInterrupts>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f54:	d111      	bne.n	8004f7a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f56:	78fb      	ldrb	r3, [r7, #3]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	461a      	mov	r2, r3
 8004f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 fa97 	bl	80084a6 <USB_HC_Halt>
 8004f78:	e3c0      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f002 fceb 	bl	800795e <USB_ReadChInterrupts>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d168      	bne.n	8005064 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3344      	adds	r3, #68	; 0x44
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 fcd5 	bl	800795e <USB_ReadChInterrupts>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d112      	bne.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3319      	adds	r3, #25
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2340      	movs	r3, #64	; 0x40
 8004fe2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	331b      	adds	r3, #27
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d019      	beq.n	800502e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	331b      	adds	r3, #27
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	440a      	add	r2, r1
 8005024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	461a      	mov	r2, r3
 800503c:	2301      	movs	r3, #1
 800503e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	334d      	adds	r3, #77	; 0x4d
 8005050:	2201      	movs	r2, #1
 8005052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f003 fa22 	bl	80084a6 <USB_HC_Halt>
 8005062:	e34b      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f002 fc76 	bl	800795e <USB_ReadChInterrupts>
 8005072:	4603      	mov	r3, r0
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d139      	bne.n	80050f0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	334d      	adds	r3, #77	; 0x4d
 800508c:	2205      	movs	r2, #5
 800508e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	331a      	adds	r3, #26
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3319      	adds	r3, #25
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3344      	adds	r3, #68	; 0x44
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f003 f9e5 	bl	80084a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	2340      	movs	r3, #64	; 0x40
 80050ec:	6093      	str	r3, [r2, #8]
 80050ee:	e305      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f002 fc30 	bl	800795e <USB_ReadChInterrupts>
 80050fe:	4603      	mov	r3, r0
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b08      	cmp	r3, #8
 8005106:	d11a      	bne.n	800513e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	2308      	movs	r3, #8
 8005118:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	334d      	adds	r3, #77	; 0x4d
 800512a:	2206      	movs	r2, #6
 800512c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f003 f9b5 	bl	80084a6 <USB_HC_Halt>
 800513c:	e2de      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f002 fc09 	bl	800795e <USB_ReadChInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d144      	bne.n	80051e0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	3344      	adds	r3, #68	; 0x44
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	334d      	adds	r3, #77	; 0x4d
 800517a:	2204      	movs	r2, #4
 800517c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3319      	adds	r3, #25
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d114      	bne.n	80051be <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	3318      	adds	r3, #24
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3319      	adds	r3, #25
 80051ba:	2201      	movs	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f003 f96d 	bl	80084a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d8:	461a      	mov	r2, r3
 80051da:	2310      	movs	r3, #16
 80051dc:	6093      	str	r3, [r2, #8]
 80051de:	e28d      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f002 fbb8 	bl	800795e <USB_ReadChInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d169      	bne.n	80052cc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	799b      	ldrb	r3, [r3, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d111      	bne.n	8005224 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	334d      	adds	r3, #77	; 0x4d
 8005210:	2207      	movs	r2, #7
 8005212:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f003 f942 	bl	80084a6 <USB_HC_Halt>
 8005222:	e049      	b.n	80052b8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	3344      	adds	r3, #68	; 0x44
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4403      	add	r3, r0
 8005244:	3344      	adds	r3, #68	; 0x44
 8005246:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	3344      	adds	r3, #68	; 0x44
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d922      	bls.n	80052a4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3344      	adds	r3, #68	; 0x44
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	334c      	adds	r3, #76	; 0x4c
 8005282:	2204      	movs	r2, #4
 8005284:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	334c      	adds	r3, #76	; 0x4c
 8005296:	781a      	ldrb	r2, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f005 fc6b 	bl	800ab78 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052a2:	e009      	b.n	80052b8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	334c      	adds	r3, #76	; 0x4c
 80052b4:	2202      	movs	r2, #2
 80052b6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	461a      	mov	r2, r3
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	6093      	str	r3, [r2, #8]
 80052ca:	e217      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	78fa      	ldrb	r2, [r7, #3]
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f002 fb42 	bl	800795e <USB_ReadChInterrupts>
 80052da:	4603      	mov	r3, r0
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d11b      	bne.n	800531e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	334d      	adds	r3, #77	; 0x4d
 80052f6:	2209      	movs	r2, #9
 80052f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f003 f8cf 	bl	80084a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	461a      	mov	r2, r3
 8005316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531a:	6093      	str	r3, [r2, #8]
 800531c:	e1ee      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f002 fb19 	bl	800795e <USB_ReadChInterrupts>
 800532c:	4603      	mov	r3, r0
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	f040 81df 	bne.w	80056f6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	461a      	mov	r2, r3
 8005346:	2302      	movs	r3, #2
 8005348:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	334d      	adds	r3, #77	; 0x4d
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	f040 8093 	bne.w	8005488 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334d      	adds	r3, #77	; 0x4d
 8005372:	2202      	movs	r2, #2
 8005374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	334c      	adds	r3, #76	; 0x4c
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3326      	adds	r3, #38	; 0x26
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d00b      	beq.n	80053b8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3326      	adds	r3, #38	; 0x26
 80053b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	f040 8190 	bne.w	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	799b      	ldrb	r3, [r3, #6]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d115      	bne.n	80053ec <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	333d      	adds	r3, #61	; 0x3d
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	f083 0301 	eor.w	r3, r3, #1
 80053d8:	b2d8      	uxtb	r0, r3
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	333d      	adds	r3, #61	; 0x3d
 80053e8:	4602      	mov	r2, r0
 80053ea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	799b      	ldrb	r3, [r3, #6]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f040 8171 	bne.w	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	3334      	adds	r3, #52	; 0x34
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8165 	beq.w	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3334      	adds	r3, #52	; 0x34
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4403      	add	r3, r0
 800542e:	3328      	adds	r3, #40	; 0x28
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	440b      	add	r3, r1
 8005434:	1e59      	subs	r1, r3, #1
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4403      	add	r3, r0
 8005444:	3328      	adds	r3, #40	; 0x28
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	fbb1 f3f3 	udiv	r3, r1, r3
 800544c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 813f 	beq.w	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	333d      	adds	r3, #61	; 0x3d
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2d8      	uxtb	r0, r3
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	333d      	adds	r3, #61	; 0x3d
 8005482:	4602      	mov	r2, r0
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e127      	b.n	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	334d      	adds	r3, #77	; 0x4d
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d120      	bne.n	80054e0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	334d      	adds	r3, #77	; 0x4d
 80054ae:	2202      	movs	r2, #2
 80054b0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	331b      	adds	r3, #27
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f040 8107 	bne.w	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	334c      	adds	r3, #76	; 0x4c
 80054da:	2202      	movs	r2, #2
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e0fb      	b.n	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	334d      	adds	r3, #77	; 0x4d
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d13a      	bne.n	800556c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	334d      	adds	r3, #77	; 0x4d
 8005506:	2202      	movs	r2, #2
 8005508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	334c      	adds	r3, #76	; 0x4c
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	331b      	adds	r3, #27
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 80d1 	bne.w	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	331b      	adds	r3, #27
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	440a      	add	r2, r1
 8005560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005568:	6053      	str	r3, [r2, #4]
 800556a:	e0b5      	b.n	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	334d      	adds	r3, #77	; 0x4d
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b05      	cmp	r3, #5
 8005580:	d114      	bne.n	80055ac <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	334d      	adds	r3, #77	; 0x4d
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334c      	adds	r3, #76	; 0x4c
 80055a6:	2202      	movs	r2, #2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e095      	b.n	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	334d      	adds	r3, #77	; 0x4d
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d114      	bne.n	80055ec <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	334d      	adds	r3, #77	; 0x4d
 80055d2:	2202      	movs	r2, #2
 80055d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	334c      	adds	r3, #76	; 0x4c
 80055e6:	2205      	movs	r2, #5
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e075      	b.n	80056d8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	334d      	adds	r3, #77	; 0x4d
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b07      	cmp	r3, #7
 8005600:	d00a      	beq.n	8005618 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	334d      	adds	r3, #77	; 0x4d
 8005612:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005614:	2b09      	cmp	r3, #9
 8005616:	d170      	bne.n	80056fa <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	334d      	adds	r3, #77	; 0x4d
 8005628:	2202      	movs	r2, #2
 800562a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3344      	adds	r3, #68	; 0x44
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4403      	add	r3, r0
 800564c:	3344      	adds	r3, #68	; 0x44
 800564e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3344      	adds	r3, #68	; 0x44
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d914      	bls.n	8005690 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3344      	adds	r3, #68	; 0x44
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	334c      	adds	r3, #76	; 0x4c
 800568a:	2204      	movs	r2, #4
 800568c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800568e:	e022      	b.n	80056d6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	334c      	adds	r3, #76	; 0x4c
 80056a0:	2202      	movs	r2, #2
 80056a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	461a      	mov	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	334c      	adds	r3, #76	; 0x4c
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f005 fa42 	bl	800ab78 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056f4:	e002      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80056fa:	bf00      	nop
  }
}
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b08a      	sub	sp, #40	; 0x28
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	0c5b      	lsrs	r3, r3, #17
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005736:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d004      	beq.n	8005748 <HCD_RXQLVL_IRQHandler+0x46>
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b05      	cmp	r3, #5
 8005742:	f000 80b6 	beq.w	80058b2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005746:	e0b7      	b.n	80058b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80b3 	beq.w	80058b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	332c      	adds	r3, #44	; 0x2c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80a7 	beq.w	80058b6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3338      	adds	r3, #56	; 0x38
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	18d1      	adds	r1, r2, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4403      	add	r3, r0
 800578c:	3334      	adds	r3, #52	; 0x34
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4299      	cmp	r1, r3
 8005792:	f200 8083 	bhi.w	800589c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4613      	mov	r3, r2
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	332c      	adds	r3, #44	; 0x2c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	b292      	uxth	r2, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	f002 f869 	bl	8007888 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4613      	mov	r3, r2
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	332c      	adds	r3, #44	; 0x2c
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	18d1      	adds	r1, r2, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4613      	mov	r3, r2
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4403      	add	r3, r0
 80057da:	332c      	adds	r3, #44	; 0x2c
 80057dc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	3338      	adds	r3, #56	; 0x38
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	18d1      	adds	r1, r2, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4613      	mov	r3, r2
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4403      	add	r3, r0
 8005802:	3338      	adds	r3, #56	; 0x38
 8005804:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	0cdb      	lsrs	r3, r3, #19
 8005816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	3328      	adds	r3, #40	; 0x28
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4293      	cmp	r3, r2
 8005834:	d13f      	bne.n	80058b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d03c      	beq.n	80058b6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005852:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800585a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005868:	461a      	mov	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4613      	mov	r3, r2
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	333c      	adds	r3, #60	; 0x3c
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f083 0301 	eor.w	r3, r3, #1
 8005884:	b2d8      	uxtb	r0, r3
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4613      	mov	r3, r2
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	333c      	adds	r3, #60	; 0x3c
 8005896:	4602      	mov	r2, r0
 8005898:	701a      	strb	r2, [r3, #0]
      break;
 800589a:	e00c      	b.n	80058b6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4613      	mov	r3, r2
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	334c      	adds	r3, #76	; 0x4c
 80058ac:	2204      	movs	r2, #4
 80058ae:	701a      	strb	r2, [r3, #0]
      break;
 80058b0:	e001      	b.n	80058b6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80058b6:	bf00      	nop
  }
}
 80058b8:	bf00      	nop
 80058ba:	3728      	adds	r7, #40	; 0x28
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d10b      	bne.n	8005910 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d102      	bne.n	8005908 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f005 f91c 	bl	800ab40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	d132      	bne.n	8005980 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f043 0308 	orr.w	r3, r3, #8
 8005920:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d126      	bne.n	800597a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7a5b      	ldrb	r3, [r3, #9]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d113      	bne.n	800595c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800593a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800593e:	d106      	bne.n	800594e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2102      	movs	r1, #2
 8005946:	4618      	mov	r0, r3
 8005948:	f002 f92e 	bl	8007ba8 <USB_InitFSLSPClkSel>
 800594c:	e011      	b.n	8005972 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f002 f927 	bl	8007ba8 <USB_InitFSLSPClkSel>
 800595a:	e00a      	b.n	8005972 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	79db      	ldrb	r3, [r3, #7]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d106      	bne.n	8005972 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800596a:	461a      	mov	r2, r3
 800596c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005970:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f005 f90e 	bl	800ab94 <HAL_HCD_PortEnabled_Callback>
 8005978:	e002      	b.n	8005980 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f005 f918 	bl	800abb0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d103      	bne.n	8005992 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6013      	str	r3, [r2, #0]
}
 800599e:	bf00      	nop
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e128      	b.n	8005c0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a90      	ldr	r2, [pc, #576]	; (8005c14 <HAL_I2S_Init+0x26c>)
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fd f9cd 	bl	8002d74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059f0:	f023 030f 	bic.w	r3, r3, #15
 80059f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2202      	movs	r2, #2
 80059fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d060      	beq.n	8005ac8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a0e:	2310      	movs	r3, #16
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e001      	b.n	8005a18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a14:	2320      	movs	r3, #32
 8005a16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d802      	bhi.n	8005a26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f001 f9a4 	bl	8006d74 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a36:	d125      	bne.n	8005a84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d010      	beq.n	8005a62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	461a      	mov	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	3305      	adds	r3, #5
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e01f      	b.n	8005aa2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	3305      	adds	r3, #5
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e00e      	b.n	8005aa2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	461a      	mov	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9e:	3305      	adds	r3, #5
 8005aa0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4a5c      	ldr	r2, [pc, #368]	; (8005c18 <HAL_I2S_Init+0x270>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e003      	b.n	8005ad0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d902      	bls.n	8005adc <HAL_I2S_Init+0x134>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2bff      	cmp	r3, #255	; 0xff
 8005ada:	d907      	bls.n	8005aec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e08f      	b.n	8005c0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	ea42 0103 	orr.w	r1, r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b0a:	f023 030f 	bic.w	r3, r3, #15
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6851      	ldr	r1, [r2, #4]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6892      	ldr	r2, [r2, #8]
 8005b16:	4311      	orrs	r1, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	68d2      	ldr	r2, [r2, #12]
 8005b1c:	4311      	orrs	r1, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6992      	ldr	r2, [r2, #24]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d161      	bne.n	8005bfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a38      	ldr	r2, [pc, #224]	; (8005c1c <HAL_I2S_Init+0x274>)
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <HAL_I2S_Init+0x278>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d101      	bne.n	8005b4c <HAL_I2S_Init+0x1a4>
 8005b48:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <HAL_I2S_Init+0x27c>)
 8005b4a:	e001      	b.n	8005b50 <HAL_I2S_Init+0x1a8>
 8005b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	4932      	ldr	r1, [pc, #200]	; (8005c20 <HAL_I2S_Init+0x278>)
 8005b58:	428a      	cmp	r2, r1
 8005b5a:	d101      	bne.n	8005b60 <HAL_I2S_Init+0x1b8>
 8005b5c:	4a31      	ldr	r2, [pc, #196]	; (8005c24 <HAL_I2S_Init+0x27c>)
 8005b5e:	e001      	b.n	8005b64 <HAL_I2S_Init+0x1bc>
 8005b60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005b64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b68:	f023 030f 	bic.w	r3, r3, #15
 8005b6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2b      	ldr	r2, [pc, #172]	; (8005c20 <HAL_I2S_Init+0x278>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <HAL_I2S_Init+0x1d4>
 8005b78:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <HAL_I2S_Init+0x27c>)
 8005b7a:	e001      	b.n	8005b80 <HAL_I2S_Init+0x1d8>
 8005b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b80:	2202      	movs	r2, #2
 8005b82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <HAL_I2S_Init+0x278>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_I2S_Init+0x1ea>
 8005b8e:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <HAL_I2S_Init+0x27c>)
 8005b90:	e001      	b.n	8005b96 <HAL_I2S_Init+0x1ee>
 8005b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba2:	d003      	beq.n	8005bac <HAL_I2S_Init+0x204>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	e001      	b.n	8005bb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005be4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <HAL_I2S_Init+0x278>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d101      	bne.n	8005bf4 <HAL_I2S_Init+0x24c>
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_I2S_Init+0x27c>)
 8005bf2:	e001      	b.n	8005bf8 <HAL_I2S_Init+0x250>
 8005bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf8:	897a      	ldrh	r2, [r7, #10]
 8005bfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	08005d1f 	.word	0x08005d1f
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	08005e35 	.word	0x08005e35
 8005c20:	40003800 	.word	0x40003800
 8005c24:	40003400 	.word	0x40003400

08005c28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	881a      	ldrh	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c9a      	adds	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ca8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffb8 	bl	8005c28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	1c9a      	adds	r2, r3, #2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10e      	bne.n	8005d16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ff93 	bl	8005c3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d13a      	bne.n	8005db0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d109      	bne.n	8005d58 <I2S_IRQHandler+0x3a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b40      	cmp	r3, #64	; 0x40
 8005d50:	d102      	bne.n	8005d58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff ffb4 	bl	8005cc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d126      	bne.n	8005db0 <I2S_IRQHandler+0x92>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d11f      	bne.n	8005db0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f043 0202 	orr.w	r2, r3, #2
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff ff50 	bl	8005c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d136      	bne.n	8005e2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d109      	bne.n	8005dda <I2S_IRQHandler+0xbc>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d102      	bne.n	8005dda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ff45 	bl	8005c64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d122      	bne.n	8005e2a <I2S_IRQHandler+0x10c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d11b      	bne.n	8005e2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	f043 0204 	orr.w	r2, r3, #4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff13 	bl	8005c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a92      	ldr	r2, [pc, #584]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005e4e:	4b92      	ldr	r3, [pc, #584]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e50:	e001      	b.n	8005e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a8b      	ldr	r2, [pc, #556]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e6c:	4b8a      	ldr	r3, [pc, #552]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e6e:	e001      	b.n	8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d004      	beq.n	8005e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 8099 	bne.w	8005fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d107      	bne.n	8005ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f925 	bl	80060f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d107      	bne.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f9c8 	bl	8006250 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d13a      	bne.n	8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d035      	beq.n	8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6e      	ldr	r2, [pc, #440]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005ede:	4b6e      	ldr	r3, [pc, #440]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ee0:	e001      	b.n	8005ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4969      	ldr	r1, [pc, #420]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eee:	428b      	cmp	r3, r1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005ef2:	4b69      	ldr	r3, [pc, #420]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef4:	e001      	b.n	8005efa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005efa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005efe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	f043 0202 	orr.w	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fe88 	bl	8005c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	f040 80c3 	bne.w	80060d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80bd 	beq.w	80060d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a49      	ldr	r2, [pc, #292]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f72:	4b49      	ldr	r3, [pc, #292]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f74:	e001      	b.n	8005f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4944      	ldr	r1, [pc, #272]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f82:	428b      	cmp	r3, r1
 8005f84:	d101      	bne.n	8005f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f86:	4b44      	ldr	r3, [pc, #272]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f88:	e001      	b.n	8005f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f94:	2300      	movs	r3, #0
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	f043 0204 	orr.w	r2, r3, #4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fe4a 	bl	8005c50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fbc:	e089      	b.n	80060d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d107      	bne.n	8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8be 	bl	8006154 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8fd 	bl	80061ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d12f      	bne.n	800605c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d02a      	beq.n	800605c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006014:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006020:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006022:	e001      	b.n	8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4919      	ldr	r1, [pc, #100]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006030:	428b      	cmp	r3, r1
 8006032:	d101      	bne.n	8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006034:	4b18      	ldr	r3, [pc, #96]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006036:	e001      	b.n	800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800603c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006040:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f043 0202 	orr.w	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fdfa 	bl	8005c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b08      	cmp	r3, #8
 8006064:	d136      	bne.n	80060d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d031      	beq.n	80060d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a07      	ldr	r2, [pc, #28]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800607c:	e001      	b.n	8006082 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800607e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4902      	ldr	r1, [pc, #8]	; (8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800608a:	428b      	cmp	r3, r1
 800608c:	d106      	bne.n	800609c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800608e:	4b02      	ldr	r3, [pc, #8]	; (8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006090:	e006      	b.n	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006092:	bf00      	nop
 8006094:	40003800 	.word	0x40003800
 8006098:	40003400 	.word	0x40003400
 800609c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f043 0204 	orr.w	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fdc0 	bl	8005c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060d0:	e000      	b.n	80060d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060d2:	bf00      	nop
}
 80060d4:	bf00      	nop
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	1c99      	adds	r1, r3, #2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6251      	str	r1, [r2, #36]	; 0x24
 8006102:	881a      	ldrh	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d113      	bne.n	800614a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006130:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ffc9 	bl	80060dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	1c99      	adds	r1, r3, #2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6251      	str	r1, [r2, #36]	; 0x24
 8006166:	8819      	ldrh	r1, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <I2SEx_TxISR_I2SExt+0x90>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d101      	bne.n	8006176 <I2SEx_TxISR_I2SExt+0x22>
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <I2SEx_TxISR_I2SExt+0x94>)
 8006174:	e001      	b.n	800617a <I2SEx_TxISR_I2SExt+0x26>
 8006176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800617a:	460a      	mov	r2, r1
 800617c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d121      	bne.n	80061da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <I2SEx_TxISR_I2SExt+0x90>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <I2SEx_TxISR_I2SExt+0x50>
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <I2SEx_TxISR_I2SExt+0x94>)
 80061a2:	e001      	b.n	80061a8 <I2SEx_TxISR_I2SExt+0x54>
 80061a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	490d      	ldr	r1, [pc, #52]	; (80061e4 <I2SEx_TxISR_I2SExt+0x90>)
 80061b0:	428b      	cmp	r3, r1
 80061b2:	d101      	bne.n	80061b8 <I2SEx_TxISR_I2SExt+0x64>
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <I2SEx_TxISR_I2SExt+0x94>)
 80061b6:	e001      	b.n	80061bc <I2SEx_TxISR_I2SExt+0x68>
 80061b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff81 	bl	80060dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40003800 	.word	0x40003800
 80061e8:	40003400 	.word	0x40003400

080061ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68d8      	ldr	r0, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	1c99      	adds	r1, r3, #2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006204:	b282      	uxth	r2, r0
 8006206:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d113      	bne.n	8006248 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800622e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff ff4a 	bl	80060dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <I2SEx_RxISR_I2SExt+0x90>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <I2SEx_RxISR_I2SExt+0x16>
 8006262:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <I2SEx_RxISR_I2SExt+0x94>)
 8006264:	e001      	b.n	800626a <I2SEx_RxISR_I2SExt+0x1a>
 8006266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800626a:	68d8      	ldr	r0, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	1c99      	adds	r1, r3, #2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006276:	b282      	uxth	r2, r0
 8006278:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d121      	bne.n	80062d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <I2SEx_RxISR_I2SExt+0x90>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d101      	bne.n	80062a0 <I2SEx_RxISR_I2SExt+0x50>
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <I2SEx_RxISR_I2SExt+0x94>)
 800629e:	e001      	b.n	80062a4 <I2SEx_RxISR_I2SExt+0x54>
 80062a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	490d      	ldr	r1, [pc, #52]	; (80062e0 <I2SEx_RxISR_I2SExt+0x90>)
 80062ac:	428b      	cmp	r3, r1
 80062ae:	d101      	bne.n	80062b4 <I2SEx_RxISR_I2SExt+0x64>
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <I2SEx_RxISR_I2SExt+0x94>)
 80062b2:	e001      	b.n	80062b8 <I2SEx_RxISR_I2SExt+0x68>
 80062b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff ff03 	bl	80060dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40003800 	.word	0x40003800
 80062e4:	40003400 	.word	0x40003400

080062e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e267      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d075      	beq.n	80063f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006306:	4b88      	ldr	r3, [pc, #544]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b04      	cmp	r3, #4
 8006310:	d00c      	beq.n	800632c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006312:	4b85      	ldr	r3, [pc, #532]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800631a:	2b08      	cmp	r3, #8
 800631c:	d112      	bne.n	8006344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800631e:	4b82      	ldr	r3, [pc, #520]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800632a:	d10b      	bne.n	8006344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632c:	4b7e      	ldr	r3, [pc, #504]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d05b      	beq.n	80063f0 <HAL_RCC_OscConfig+0x108>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d157      	bne.n	80063f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e242      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800634c:	d106      	bne.n	800635c <HAL_RCC_OscConfig+0x74>
 800634e:	4b76      	ldr	r3, [pc, #472]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a75      	ldr	r2, [pc, #468]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e01d      	b.n	8006398 <HAL_RCC_OscConfig+0xb0>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006364:	d10c      	bne.n	8006380 <HAL_RCC_OscConfig+0x98>
 8006366:	4b70      	ldr	r3, [pc, #448]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6f      	ldr	r2, [pc, #444]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800636c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	4b6d      	ldr	r3, [pc, #436]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6c      	ldr	r2, [pc, #432]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e00b      	b.n	8006398 <HAL_RCC_OscConfig+0xb0>
 8006380:	4b69      	ldr	r3, [pc, #420]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a68      	ldr	r2, [pc, #416]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	4b66      	ldr	r3, [pc, #408]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a65      	ldr	r2, [pc, #404]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d013      	beq.n	80063c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fc fece 	bl	8003140 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a8:	f7fc feca 	bl	8003140 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b64      	cmp	r3, #100	; 0x64
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e207      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ba:	4b5b      	ldr	r3, [pc, #364]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0xc0>
 80063c6:	e014      	b.n	80063f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fc feba 	bl	8003140 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d0:	f7fc feb6 	bl	8003140 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	; 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e1f3      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063e2:	4b51      	ldr	r3, [pc, #324]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f0      	bne.n	80063d0 <HAL_RCC_OscConfig+0xe8>
 80063ee:	e000      	b.n	80063f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d063      	beq.n	80064c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063fe:	4b4a      	ldr	r3, [pc, #296]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800640a:	4b47      	ldr	r3, [pc, #284]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006412:	2b08      	cmp	r3, #8
 8006414:	d11c      	bne.n	8006450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006416:	4b44      	ldr	r3, [pc, #272]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d116      	bne.n	8006450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006422:	4b41      	ldr	r3, [pc, #260]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_RCC_OscConfig+0x152>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e1c7      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643a:	4b3b      	ldr	r3, [pc, #236]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4937      	ldr	r1, [pc, #220]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800644a:	4313      	orrs	r3, r2
 800644c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644e:	e03a      	b.n	80064c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d020      	beq.n	800649a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006458:	4b34      	ldr	r3, [pc, #208]	; (800652c <HAL_RCC_OscConfig+0x244>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fc fe6f 	bl	8003140 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006466:	f7fc fe6b 	bl	8003140 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e1a8      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006478:	4b2b      	ldr	r3, [pc, #172]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006484:	4b28      	ldr	r3, [pc, #160]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4925      	ldr	r1, [pc, #148]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]
 8006498:	e015      	b.n	80064c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800649a:	4b24      	ldr	r3, [pc, #144]	; (800652c <HAL_RCC_OscConfig+0x244>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fc fe4e 	bl	8003140 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064a8:	f7fc fe4a 	bl	8003140 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e187      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d036      	beq.n	8006540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <HAL_RCC_OscConfig+0x248>)
 80064dc:	2201      	movs	r2, #1
 80064de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e0:	f7fc fe2e 	bl	8003140 <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e8:	f7fc fe2a 	bl	8003140 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e167      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <HAL_RCC_OscConfig+0x240>)
 80064fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x200>
 8006506:	e01b      	b.n	8006540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_RCC_OscConfig+0x248>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650e:	f7fc fe17 	bl	8003140 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006514:	e00e      	b.n	8006534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006516:	f7fc fe13 	bl	8003140 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d907      	bls.n	8006534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e150      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
 8006528:	40023800 	.word	0x40023800
 800652c:	42470000 	.word	0x42470000
 8006530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	4b88      	ldr	r3, [pc, #544]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ea      	bne.n	8006516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8097 	beq.w	800667c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b81      	ldr	r3, [pc, #516]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10f      	bne.n	800657e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	4b7d      	ldr	r3, [pc, #500]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a7c      	ldr	r2, [pc, #496]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
 800656e:	4b7a      	ldr	r3, [pc, #488]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657e:	4b77      	ldr	r3, [pc, #476]	; (800675c <HAL_RCC_OscConfig+0x474>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d118      	bne.n	80065bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800658a:	4b74      	ldr	r3, [pc, #464]	; (800675c <HAL_RCC_OscConfig+0x474>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a73      	ldr	r2, [pc, #460]	; (800675c <HAL_RCC_OscConfig+0x474>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006596:	f7fc fdd3 	bl	8003140 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fc fdcf 	bl	8003140 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e10c      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	4b6a      	ldr	r3, [pc, #424]	; (800675c <HAL_RCC_OscConfig+0x474>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2ea>
 80065c4:	4b64      	ldr	r3, [pc, #400]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	4a63      	ldr	r2, [pc, #396]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	; 0x70
 80065d0:	e01c      	b.n	800660c <HAL_RCC_OscConfig+0x324>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x30c>
 80065da:	4b5f      	ldr	r3, [pc, #380]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4a5e      	ldr	r2, [pc, #376]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065e0:	f043 0304 	orr.w	r3, r3, #4
 80065e4:	6713      	str	r3, [r2, #112]	; 0x70
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	4a5b      	ldr	r2, [pc, #364]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	6713      	str	r3, [r2, #112]	; 0x70
 80065f2:	e00b      	b.n	800660c <HAL_RCC_OscConfig+0x324>
 80065f4:	4b58      	ldr	r3, [pc, #352]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f8:	4a57      	ldr	r2, [pc, #348]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006600:	4b55      	ldr	r3, [pc, #340]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006604:	4a54      	ldr	r2, [pc, #336]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006606:	f023 0304 	bic.w	r3, r3, #4
 800660a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d015      	beq.n	8006640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fc fd94 	bl	8003140 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800661a:	e00a      	b.n	8006632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661c:	f7fc fd90 	bl	8003140 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	; 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e0cb      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006632:	4b49      	ldr	r3, [pc, #292]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ee      	beq.n	800661c <HAL_RCC_OscConfig+0x334>
 800663e:	e014      	b.n	800666a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006640:	f7fc fd7e 	bl	8003140 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006646:	e00a      	b.n	800665e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006648:	f7fc fd7a 	bl	8003140 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	f241 3288 	movw	r2, #5000	; 0x1388
 8006656:	4293      	cmp	r3, r2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e0b5      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800665e:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1ee      	bne.n	8006648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d105      	bne.n	800667c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006670:	4b39      	ldr	r3, [pc, #228]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	4a38      	ldr	r2, [pc, #224]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800667a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80a1 	beq.w	80067c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006686:	4b34      	ldr	r3, [pc, #208]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b08      	cmp	r3, #8
 8006690:	d05c      	beq.n	800674c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d141      	bne.n	800671e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669a:	4b31      	ldr	r3, [pc, #196]	; (8006760 <HAL_RCC_OscConfig+0x478>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a0:	f7fc fd4e 	bl	8003140 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fc fd4a 	bl	8003140 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e087      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	4b27      	ldr	r3, [pc, #156]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	019b      	lsls	r3, r3, #6
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	3b01      	subs	r3, #1
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	061b      	lsls	r3, r3, #24
 80066ea:	491b      	ldr	r1, [pc, #108]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f0:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <HAL_RCC_OscConfig+0x478>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f6:	f7fc fd23 	bl	8003140 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066fe:	f7fc fd1f 	bl	8003140 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e05c      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x416>
 800671c:	e054      	b.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <HAL_RCC_OscConfig+0x478>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fc fd0c 	bl	8003140 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672c:	f7fc fd08 	bl	8003140 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e045      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <HAL_RCC_OscConfig+0x470>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x444>
 800674a:	e03d      	b.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d107      	bne.n	8006764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e038      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
 8006758:	40023800 	.word	0x40023800
 800675c:	40007000 	.word	0x40007000
 8006760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <HAL_RCC_OscConfig+0x4ec>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d028      	beq.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d121      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d11a      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800679a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800679c:	4293      	cmp	r3, r2
 800679e:	d111      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	3b01      	subs	r3, #1
 80067ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d107      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d001      	beq.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800

080067d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0cc      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067ec:	4b68      	ldr	r3, [pc, #416]	; (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d90c      	bls.n	8006814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b65      	ldr	r3, [pc, #404]	; (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b63      	ldr	r3, [pc, #396]	; (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0b8      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d020      	beq.n	8006862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800682c:	4b59      	ldr	r3, [pc, #356]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	4a58      	ldr	r2, [pc, #352]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006844:	4b53      	ldr	r3, [pc, #332]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a52      	ldr	r2, [pc, #328]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800684e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006850:	4b50      	ldr	r3, [pc, #320]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	494d      	ldr	r1, [pc, #308]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d044      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d107      	bne.n	8006886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006876:	4b47      	ldr	r3, [pc, #284]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d119      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e07f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d003      	beq.n	8006896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	2b03      	cmp	r3, #3
 8006894:	d107      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006896:	4b3f      	ldr	r3, [pc, #252]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e06f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a6:	4b3b      	ldr	r3, [pc, #236]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e067      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068b6:	4b37      	ldr	r3, [pc, #220]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 0203 	bic.w	r2, r3, #3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4934      	ldr	r1, [pc, #208]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068c8:	f7fc fc3a 	bl	8003140 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d0:	f7fc fc36 	bl	8003140 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	; 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e04f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e6:	4b2b      	ldr	r3, [pc, #172]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 020c 	and.w	r2, r3, #12
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d1eb      	bne.n	80068d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d20c      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b22      	ldr	r3, [pc, #136]	; (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800690e:	4b20      	ldr	r3, [pc, #128]	; (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d001      	beq.n	8006920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e032      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800692c:	4b19      	ldr	r3, [pc, #100]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4916      	ldr	r1, [pc, #88]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	4313      	orrs	r3, r2
 800693c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800694a:	4b12      	ldr	r3, [pc, #72]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	490e      	ldr	r1, [pc, #56]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	4313      	orrs	r3, r2
 800695c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800695e:	f000 f821 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8006962:	4602      	mov	r2, r0
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	490a      	ldr	r1, [pc, #40]	; (8006998 <HAL_RCC_ClockConfig+0x1c0>)
 8006970:	5ccb      	ldrb	r3, [r1, r3]
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	4a09      	ldr	r2, [pc, #36]	; (800699c <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <HAL_RCC_ClockConfig+0x1c8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fc fb9a 	bl	80030b8 <HAL_InitTick>

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40023c00 	.word	0x40023c00
 8006994:	40023800 	.word	0x40023800
 8006998:	0801e4b8 	.word	0x0801e4b8
 800699c:	20002004 	.word	0x20002004
 80069a0:	20002008 	.word	0x20002008

080069a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b094      	sub	sp, #80	; 0x50
 80069aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	647b      	str	r3, [r7, #68]	; 0x44
 80069b0:	2300      	movs	r3, #0
 80069b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b4:	2300      	movs	r3, #0
 80069b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069bc:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 030c 	and.w	r3, r3, #12
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d00d      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x40>
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	f200 80e1 	bhi.w	8006b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x34>
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d003      	beq.n	80069de <HAL_RCC_GetSysClockFreq+0x3a>
 80069d6:	e0db      	b.n	8006b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4b73      	ldr	r3, [pc, #460]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80069da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80069dc:	e0db      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069de:	4b73      	ldr	r3, [pc, #460]	; (8006bac <HAL_RCC_GetSysClockFreq+0x208>)
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069e2:	e0d8      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e4:	4b6f      	ldr	r3, [pc, #444]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069ee:	4b6d      	ldr	r3, [pc, #436]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d063      	beq.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fa:	4b6a      	ldr	r3, [pc, #424]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	2200      	movs	r2, #0
 8006a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0e:	2300      	movs	r3, #0
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
 8006a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a16:	4622      	mov	r2, r4
 8006a18:	462b      	mov	r3, r5
 8006a1a:	f04f 0000 	mov.w	r0, #0
 8006a1e:	f04f 0100 	mov.w	r1, #0
 8006a22:	0159      	lsls	r1, r3, #5
 8006a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a28:	0150      	lsls	r0, r2, #5
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4621      	mov	r1, r4
 8006a30:	1a51      	subs	r1, r2, r1
 8006a32:	6139      	str	r1, [r7, #16]
 8006a34:	4629      	mov	r1, r5
 8006a36:	eb63 0301 	sbc.w	r3, r3, r1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a48:	4659      	mov	r1, fp
 8006a4a:	018b      	lsls	r3, r1, #6
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a52:	4651      	mov	r1, sl
 8006a54:	018a      	lsls	r2, r1, #6
 8006a56:	4651      	mov	r1, sl
 8006a58:	ebb2 0801 	subs.w	r8, r2, r1
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a76:	4690      	mov	r8, r2
 8006a78:	4699      	mov	r9, r3
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	eb18 0303 	adds.w	r3, r8, r3
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	462b      	mov	r3, r5
 8006a84:	eb49 0303 	adc.w	r3, r9, r3
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a96:	4629      	mov	r1, r5
 8006a98:	024b      	lsls	r3, r1, #9
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	024a      	lsls	r2, r1, #9
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aaa:	2200      	movs	r2, #0
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ab4:	f7f9 ff66 	bl	8000984 <__aeabi_uldivmod>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4613      	mov	r3, r2
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac0:	e058      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac2:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	099b      	lsrs	r3, r3, #6
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	4611      	mov	r1, r2
 8006ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	f04f 0000 	mov.w	r0, #0
 8006ae4:	f04f 0100 	mov.w	r1, #0
 8006ae8:	0159      	lsls	r1, r3, #5
 8006aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aee:	0150      	lsls	r0, r2, #5
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4641      	mov	r1, r8
 8006af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006afa:	4649      	mov	r1, r9
 8006afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b14:	ebb2 040a 	subs.w	r4, r2, sl
 8006b18:	eb63 050b 	sbc.w	r5, r3, fp
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	00eb      	lsls	r3, r5, #3
 8006b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b2a:	00e2      	lsls	r2, r4, #3
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	461d      	mov	r5, r3
 8006b30:	4643      	mov	r3, r8
 8006b32:	18e3      	adds	r3, r4, r3
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	464b      	mov	r3, r9
 8006b38:	eb45 0303 	adc.w	r3, r5, r3
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	028b      	lsls	r3, r1, #10
 8006b4e:	4621      	mov	r1, r4
 8006b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b54:	4621      	mov	r1, r4
 8006b56:	028a      	lsls	r2, r1, #10
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5e:	2200      	movs	r2, #0
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	61fa      	str	r2, [r7, #28]
 8006b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b68:	f7f9 ff0c 	bl	8000984 <__aeabi_uldivmod>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4613      	mov	r3, r2
 8006b72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	3301      	adds	r3, #1
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b8e:	e002      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b90:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3750      	adds	r7, #80	; 0x50
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	00f42400 	.word	0x00f42400
 8006bac:	007a1200 	.word	0x007a1200

08006bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d035      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bd8:	4b62      	ldr	r3, [pc, #392]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bde:	f7fc faaf 	bl	8003140 <HAL_GetTick>
 8006be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006be6:	f7fc faab 	bl	8003140 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e0b0      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bf8:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	019a      	lsls	r2, r3, #6
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	071b      	lsls	r3, r3, #28
 8006c10:	4955      	ldr	r1, [pc, #340]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c18:	4b52      	ldr	r3, [pc, #328]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c1e:	f7fc fa8f 	bl	8003140 <HAL_GetTick>
 8006c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c26:	f7fc fa8b 	bl	8003140 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e090      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c38:	4b4b      	ldr	r3, [pc, #300]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8083 	beq.w	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	4b44      	ldr	r3, [pc, #272]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	4a43      	ldr	r2, [pc, #268]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c60:	6413      	str	r3, [r2, #64]	; 0x40
 8006c62:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c6e:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a3e      	ldr	r2, [pc, #248]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c7a:	f7fc fa61 	bl	8003140 <HAL_GetTick>
 8006c7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c80:	e008      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c82:	f7fc fa5d 	bl	8003140 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e062      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c94:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ca0:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d028      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cc8:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cce:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cd4:	4a24      	ldr	r2, [pc, #144]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d114      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ce6:	f7fc fa2b 	bl	8003140 <HAL_GetTick>
 8006cea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fc fa27 	bl	8003140 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e02a      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ee      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d1c:	d10d      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d32:	490d      	ldr	r1, [pc, #52]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]
 8006d38:	e005      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	4a0a      	ldr	r2, [pc, #40]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d44:	6093      	str	r3, [r2, #8]
 8006d46:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d52:	4905      	ldr	r1, [pc, #20]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	42470068 	.word	0x42470068
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40007000 	.word	0x40007000
 8006d70:	42470e40 	.word	0x42470e40

08006d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d13f      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d92:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006da8:	d12f      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006daa:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006dac:	617b      	str	r3, [r7, #20]
          break;
 8006dae:	e02f      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc6:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e007      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd8:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006de0:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfa:	0f1b      	lsrs	r3, r3, #28
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	617b      	str	r3, [r7, #20]
          break;
 8006e08:	e002      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
          break;
 8006e0e:	bf00      	nop
        }
      }
      break;
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006e12:	bf00      	nop
    }
  }
  return frequency;
 8006e14:	697b      	ldr	r3, [r7, #20]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800
 8006e28:	00bb8000 	.word	0x00bb8000
 8006e2c:	007a1200 	.word	0x007a1200
 8006e30:	00f42400 	.word	0x00f42400

08006e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e07b      	b.n	8006f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d009      	beq.n	8006e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	61da      	str	r2, [r3, #28]
 8006e5e:	e005      	b.n	8006e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fb fff4 	bl	8002e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	ea42 0103 	orr.w	r1, r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	f003 0104 	and.w	r1, r3, #4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	f003 0210 	and.w	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b088      	sub	sp, #32
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_SPI_Transmit+0x22>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e12d      	b.n	80071c4 <HAL_SPI_Transmit+0x27e>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f70:	f7fc f8e6 	bl	8003140 <HAL_GetTick>
 8006f74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
 8006f88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f8a:	e116      	b.n	80071ba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_SPI_Transmit+0x52>
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f9c:	e10d      	b.n	80071ba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	88fa      	ldrh	r2, [r7, #6]
 8006fbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe4:	d10f      	bne.n	8007006 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007004:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d007      	beq.n	8007024 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702c:	d14f      	bne.n	80070ce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_SPI_Transmit+0xf6>
 8007036:	8afb      	ldrh	r3, [r7, #22]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d142      	bne.n	80070c2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	881a      	ldrh	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007060:	e02f      	b.n	80070c2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b02      	cmp	r3, #2
 800706e:	d112      	bne.n	8007096 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	881a      	ldrh	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	1c9a      	adds	r2, r3, #2
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	86da      	strh	r2, [r3, #54]	; 0x36
 8007094:	e015      	b.n	80070c2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007096:	f7fc f853 	bl	8003140 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d803      	bhi.n	80070ae <HAL_SPI_Transmit+0x168>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d102      	bne.n	80070b4 <HAL_SPI_Transmit+0x16e>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80070c0:	e07b      	b.n	80071ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ca      	bne.n	8007062 <HAL_SPI_Transmit+0x11c>
 80070cc:	e050      	b.n	8007170 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_SPI_Transmit+0x196>
 80070d6:	8afb      	ldrh	r3, [r7, #22]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d144      	bne.n	8007166 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007102:	e030      	b.n	8007166 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d113      	bne.n	800713a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	86da      	strh	r2, [r3, #54]	; 0x36
 8007138:	e015      	b.n	8007166 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713a:	f7fc f801 	bl	8003140 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d803      	bhi.n	8007152 <HAL_SPI_Transmit+0x20c>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d102      	bne.n	8007158 <HAL_SPI_Transmit+0x212>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007164:	e029      	b.n	80071ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1c9      	bne.n	8007104 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f9c3 	bl	8007500 <SPI_EndRxTxTransaction>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	77fb      	strb	r3, [r7, #31]
 80071b0:	e003      	b.n	80071ba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10e      	bne.n	800720c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d009      	beq.n	800720c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
    return;
 800720a:	e0ce      	b.n	80073aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <HAL_SPI_IRQHandler+0x5e>
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
    return;
 8007228:	e0bf      	b.n	80073aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <HAL_SPI_IRQHandler+0x7e>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80b0 	beq.w	80073aa <HAL_SPI_IRQHandler+0x1de>
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80aa 	beq.w	80073aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d023      	beq.n	80072a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b03      	cmp	r3, #3
 800726a:	d011      	beq.n	8007290 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007270:	f043 0204 	orr.w	r2, r3, #4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	e00b      	b.n	80072a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]
        return;
 80072a6:	e080      	b.n	80073aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d014      	beq.n	80072dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f043 0201 	orr.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00c      	beq.n	8007300 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	f043 0208 	orr.w	r2, r3, #8
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	2b00      	cmp	r3, #0
 8007306:	d04f      	beq.n	80073a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007316:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <HAL_SPI_IRQHandler+0x168>
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d034      	beq.n	800739e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0203 	bic.w	r2, r2, #3
 8007342:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d011      	beq.n	8007370 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007350:	4a17      	ldr	r2, [pc, #92]	; (80073b0 <HAL_SPI_IRQHandler+0x1e4>)
 8007352:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	4618      	mov	r0, r3
 800735a:	f7fc f832 	bl	80033c2 <HAL_DMA_Abort_IT>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007374:	2b00      	cmp	r3, #0
 8007376:	d016      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737c:	4a0c      	ldr	r2, [pc, #48]	; (80073b0 <HAL_SPI_IRQHandler+0x1e4>)
 800737e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007384:	4618      	mov	r0, r3
 8007386:	f7fc f81c 	bl	80033c2 <HAL_DMA_Abort_IT>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800739c:	e003      	b.n	80073a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f808 	bl	80073b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80073a4:	e000      	b.n	80073a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80073a6:	bf00      	nop
    return;
 80073a8:	bf00      	nop
  }
}
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	080073c9 	.word	0x080073c9

080073b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff ffe6 	bl	80073b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007400:	f7fb fe9e 	bl	8003140 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007410:	f7fb fe96 	bl	8003140 <HAL_GetTick>
 8007414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	015b      	lsls	r3, r3, #5
 800741c:	0d1b      	lsrs	r3, r3, #20
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007426:	e054      	b.n	80074d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d050      	beq.n	80074d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007430:	f7fb fe86 	bl	8003140 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	429a      	cmp	r2, r3
 800743e:	d902      	bls.n	8007446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d13d      	bne.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745e:	d111      	bne.n	8007484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007468:	d004      	beq.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d107      	bne.n	8007484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748c:	d10f      	bne.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e017      	b.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4013      	ands	r3, r2
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d19b      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20002004 	.word	0x20002004

08007500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2201      	movs	r2, #1
 8007514:	2102      	movs	r1, #2
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff ff6a 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f043 0220 	orr.w	r2, r3, #32
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e032      	b.n	8007598 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007532:	4b1b      	ldr	r3, [pc, #108]	; (80075a0 <SPI_EndRxTxTransaction+0xa0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1b      	ldr	r2, [pc, #108]	; (80075a4 <SPI_EndRxTxTransaction+0xa4>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	0d5b      	lsrs	r3, r3, #21
 800753e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007542:	fb02 f303 	mul.w	r3, r2, r3
 8007546:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007550:	d112      	bne.n	8007578 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	2180      	movs	r1, #128	; 0x80
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff ff47 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d016      	beq.n	8007596 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756c:	f043 0220 	orr.w	r2, r3, #32
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e00f      	b.n	8007598 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	3b01      	subs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b80      	cmp	r3, #128	; 0x80
 8007590:	d0f2      	beq.n	8007578 <SPI_EndRxTxTransaction+0x78>
 8007592:	e000      	b.n	8007596 <SPI_EndRxTxTransaction+0x96>
        break;
 8007594:	bf00      	nop
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20002004 	.word	0x20002004
 80075a4:	165e9f81 	.word	0x165e9f81

080075a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075a8:	b084      	sub	sp, #16
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	f107 001c 	add.w	r0, r7, #28
 80075b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d123      	bne.n	800760a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9dc 	bl	80079bc <USB_CoreReset>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e01b      	b.n	8007642 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9d0 	bl	80079bc <USB_CoreReset>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007620:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38
 8007634:	e005      	b.n	8007642 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007642:	7fbb      	ldrb	r3, [r7, #30]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10b      	bne.n	8007660 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f043 0206 	orr.w	r2, r3, #6
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f043 0220 	orr.w	r2, r3, #32
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800766c:	b004      	add	sp, #16
 800766e:	4770      	bx	lr

08007670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 0201 	bic.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d115      	bne.n	8007702 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076e2:	200a      	movs	r0, #10
 80076e4:	f7fb fd38 	bl	8003158 <HAL_Delay>
      ms += 10U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	330a      	adds	r3, #10
 80076ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f956 	bl	80079a0 <USB_GetMode>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d01e      	beq.n	8007738 <USB_SetCurrentMode+0x84>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2bc7      	cmp	r3, #199	; 0xc7
 80076fe:	d9f0      	bls.n	80076e2 <USB_SetCurrentMode+0x2e>
 8007700:	e01a      	b.n	8007738 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d115      	bne.n	8007734 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007714:	200a      	movs	r0, #10
 8007716:	f7fb fd1f 	bl	8003158 <HAL_Delay>
      ms += 10U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	330a      	adds	r3, #10
 800771e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f93d 	bl	80079a0 <USB_GetMode>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <USB_SetCurrentMode+0x84>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2bc7      	cmp	r3, #199	; 0xc7
 8007730:	d9f0      	bls.n	8007714 <USB_SetCurrentMode+0x60>
 8007732:	e001      	b.n	8007738 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e005      	b.n	8007744 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2bc8      	cmp	r3, #200	; 0xc8
 800773c:	d101      	bne.n	8007742 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007766:	d901      	bls.n	800776c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e01b      	b.n	80077a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	daf2      	bge.n	800775a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	019b      	lsls	r3, r3, #6
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007790:	d901      	bls.n	8007796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e006      	b.n	80077a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d0f0      	beq.n	8007784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077c8:	d901      	bls.n	80077ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e018      	b.n	8007800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	daf2      	bge.n	80077bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2210      	movs	r2, #16
 80077de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077ec:	d901      	bls.n	80077f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e006      	b.n	8007800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b10      	cmp	r3, #16
 80077fc:	d0f0      	beq.n	80077e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800780c:	b480      	push	{r7}
 800780e:	b089      	sub	sp, #36	; 0x24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	460b      	mov	r3, r1
 800781c:	71fb      	strb	r3, [r7, #7]
 800781e:	4613      	mov	r3, r2
 8007820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800782a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d123      	bne.n	800787a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007832:	88bb      	ldrh	r3, [r7, #4]
 8007834:	3303      	adds	r3, #3
 8007836:	089b      	lsrs	r3, r3, #2
 8007838:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	e018      	b.n	8007872 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	031a      	lsls	r2, r3, #12
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4413      	add	r3, r2
 8007848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784c:	461a      	mov	r2, r3
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	3301      	adds	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3301      	adds	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	3301      	adds	r3, #1
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	429a      	cmp	r2, r3
 8007878:	d3e2      	bcc.n	8007840 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3724      	adds	r7, #36	; 0x24
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007888:	b480      	push	{r7}
 800788a:	b08b      	sub	sp, #44	; 0x2c
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	089b      	lsrs	r3, r3, #2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	e014      	b.n	80078de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	601a      	str	r2, [r3, #0]
    pDest++;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	3301      	adds	r3, #1
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	3301      	adds	r3, #1
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	3301      	adds	r3, #1
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	3301      	adds	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	3301      	adds	r3, #1
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3e6      	bcc.n	80078b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078e6:	8bfb      	ldrh	r3, [r7, #30]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01e      	beq.n	800792a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	461a      	mov	r2, r3
 80078f8:	f107 0310 	add.w	r3, r7, #16
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	b2da      	uxtb	r2, r3
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	701a      	strb	r2, [r3, #0]
      i++;
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	3301      	adds	r3, #1
 8007916:	623b      	str	r3, [r7, #32]
      pDest++;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	3301      	adds	r3, #1
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800791e:	8bfb      	ldrh	r3, [r7, #30]
 8007920:	3b01      	subs	r3, #1
 8007922:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007924:	8bfb      	ldrh	r3, [r7, #30]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1ea      	bne.n	8007900 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800792c:	4618      	mov	r0, r3
 800792e:	372c      	adds	r7, #44	; 0x2c
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007950:	68fb      	ldr	r3, [r7, #12]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4013      	ands	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007992:	68bb      	ldr	r3, [r7, #8]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	f003 0301 	and.w	r3, r3, #1
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079d4:	d901      	bls.n	80079da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e01b      	b.n	8007a12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	daf2      	bge.n	80079c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f043 0201 	orr.w	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079fe:	d901      	bls.n	8007a04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e006      	b.n	8007a12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d0f0      	beq.n	80079f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a20:	b084      	sub	sp, #16
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d119      	bne.n	8007aaa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10a      	bne.n	8007a94 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a8c:	f043 0304 	orr.w	r3, r3, #4
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	e014      	b.n	8007abe <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aa2:	f023 0304 	bic.w	r3, r3, #4
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	e009      	b.n	8007abe <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ab8:	f023 0304 	bic.w	r3, r3, #4
 8007abc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007abe:	2110      	movs	r1, #16
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fe43 	bl	800774c <USB_FlushTxFifo>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fe6d 	bl	80077b0 <USB_FlushRxFifo>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	e015      	b.n	8007b12 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af2:	461a      	mov	r2, r3
 8007af4:	f04f 33ff 	mov.w	r3, #4294967295
 8007af8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b06:	461a      	mov	r2, r3
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007b16:	461a      	mov	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d3e3      	bcc.n	8007ae6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <USB_HostInit+0x170>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d10b      	bne.n	8007b4c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a15      	ldr	r2, [pc, #84]	; (8007b94 <USB_HostInit+0x174>)
 8007b40:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a14      	ldr	r2, [pc, #80]	; (8007b98 <USB_HostInit+0x178>)
 8007b46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b4a:	e009      	b.n	8007b60 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2280      	movs	r2, #128	; 0x80
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a11      	ldr	r2, [pc, #68]	; (8007b9c <USB_HostInit+0x17c>)
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a11      	ldr	r2, [pc, #68]	; (8007ba0 <USB_HostInit+0x180>)
 8007b5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d105      	bne.n	8007b74 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f043 0210 	orr.w	r2, r3, #16
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699a      	ldr	r2, [r3, #24]
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <USB_HostInit+0x184>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b8c:	b004      	add	sp, #16
 8007b8e:	4770      	bx	lr
 8007b90:	40040000 	.word	0x40040000
 8007b94:	01000200 	.word	0x01000200
 8007b98:	00e00300 	.word	0x00e00300
 8007b9c:	00600080 	.word	0x00600080
 8007ba0:	004000e0 	.word	0x004000e0
 8007ba4:	a3200008 	.word	0xa3200008

08007ba8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bc6:	f023 0303 	bic.w	r3, r3, #3
 8007bca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007be0:	4313      	orrs	r3, r2
 8007be2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d107      	bne.n	8007bfa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007bf6:	6053      	str	r3, [r2, #4]
 8007bf8:	e00c      	b.n	8007c14 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d107      	bne.n	8007c10 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c06:	461a      	mov	r2, r3
 8007c08:	f241 7370 	movw	r3, #6000	; 0x1770
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	e001      	b.n	8007c14 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c50:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c52:	2064      	movs	r0, #100	; 0x64
 8007c54:	f7fb fa80 	bl	8003158 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c64:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c66:	200a      	movs	r0, #10
 8007c68:	f7fb fa76 	bl	8003158 <HAL_Delay>

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <USB_DriveVbus+0x44>
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cb8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc4:	d109      	bne.n	8007cda <USB_DriveVbus+0x64>
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d106      	bne.n	8007cda <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	0c5b      	lsrs	r3, r3, #17
 8007d06:	f003 0303 	and.w	r3, r3, #3
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	b29b      	uxth	r3, r3
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	70fb      	strb	r3, [r7, #3]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70bb      	strb	r3, [r7, #2]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d66:	461a      	mov	r2, r3
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d87c      	bhi.n	8007e70 <USB_HC_Init+0x138>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <USB_HC_Init+0x44>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007e33 	.word	0x08007e33
 8007d84:	08007d8d 	.word	0x08007d8d
 8007d88:	08007df5 	.word	0x08007df5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f240 439d 	movw	r3, #1181	; 0x49d
 8007d9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007da0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	da10      	bge.n	8007dca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007dc8:	e055      	b.n	8007e76 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a6f      	ldr	r2, [pc, #444]	; (8007f8c <USB_HC_Init+0x254>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d151      	bne.n	8007e76 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007df0:	60d3      	str	r3, [r2, #12]
      break;
 8007df2:	e040      	b.n	8007e76 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e00:	461a      	mov	r2, r3
 8007e02:	f240 639d 	movw	r3, #1693	; 0x69d
 8007e06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da34      	bge.n	8007e7a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	78fa      	ldrb	r2, [r7, #3]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007e30:	e023      	b.n	8007e7a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f240 2325 	movw	r3, #549	; 0x225
 8007e44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da17      	bge.n	8007e7e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e6e:	e006      	b.n	8007e7e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	77fb      	strb	r3, [r7, #31]
      break;
 8007e74:	e004      	b.n	8007e80 <USB_HC_Init+0x148>
      break;
 8007e76:	bf00      	nop
 8007e78:	e002      	b.n	8007e80 <USB_HC_Init+0x148>
      break;
 8007e7a:	bf00      	nop
 8007e7c:	e000      	b.n	8007e80 <USB_HC_Init+0x148>
      break;
 8007e7e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	2300      	movs	r3, #0
 8007e90:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eac:	f043 0302 	orr.w	r3, r3, #2
 8007eb0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec6:	6939      	ldr	r1, [r7, #16]
 8007ec8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da03      	bge.n	8007eec <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	e001      	b.n	8007ef0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff fef9 	bl	8007ce8 <USB_GetHostSpeed>
 8007ef6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ef8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d106      	bne.n	8007f0e <USB_HC_Init+0x1d6>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d003      	beq.n	8007f0e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e001      	b.n	8007f12 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f12:	787b      	ldrb	r3, [r7, #1]
 8007f14:	059b      	lsls	r3, r3, #22
 8007f16:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f1a:	78bb      	ldrb	r3, [r7, #2]
 8007f1c:	02db      	lsls	r3, r3, #11
 8007f1e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f22:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f28:	049b      	lsls	r3, r3, #18
 8007f2a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007f30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f36:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f50:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d003      	beq.n	8007f62 <USB_HC_Init+0x22a>
 8007f5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d10f      	bne.n	8007f82 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3720      	adds	r7, #32
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40040000 	.word	0x40040000

08007f90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08c      	sub	sp, #48	; 0x30
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fac:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4a5d      	ldr	r2, [pc, #372]	; (8008128 <USB_HC_StartXfer+0x198>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d12f      	bne.n	8008016 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d11c      	bne.n	8007ff6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	7c9b      	ldrb	r3, [r3, #18]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <USB_HC_StartXfer+0x3c>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	7c9b      	ldrb	r3, [r3, #18]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d124      	bne.n	8008016 <USB_HC_StartXfer+0x86>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	799b      	ldrb	r3, [r3, #6]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d120      	bne.n	8008016 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	6a3a      	ldr	r2, [r7, #32]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60d3      	str	r3, [r2, #12]
 8007ff4:	e00f      	b.n	8008016 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	791b      	ldrb	r3, [r3, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <USB_HC_StartXfer+0x86>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	795b      	ldrb	r3, [r3, #5]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d107      	bne.n	8008016 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fb6b 	bl	80086e8 <USB_DoPing>
        return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e232      	b.n	800847c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	799b      	ldrb	r3, [r3, #6]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d158      	bne.n	80080d0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800801e:	2301      	movs	r3, #1
 8008020:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	78db      	ldrb	r3, [r3, #3]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800802a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	8a92      	ldrh	r2, [r2, #20]
 8008030:	fb03 f202 	mul.w	r2, r3, r2
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	61da      	str	r2, [r3, #28]
 8008038:	e07c      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	7c9b      	ldrb	r3, [r3, #18]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d130      	bne.n	80080a4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	2bbc      	cmp	r3, #188	; 0xbc
 8008048:	d918      	bls.n	800807c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	8a9b      	ldrh	r3, [r3, #20]
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d003      	beq.n	800806c <USB_HC_StartXfer+0xdc>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d103      	bne.n	8008074 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2202      	movs	r2, #2
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e05f      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2201      	movs	r2, #1
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e05b      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d007      	beq.n	800809c <USB_HC_StartXfer+0x10c>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d003      	beq.n	800809c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2204      	movs	r2, #4
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	e04b      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2203      	movs	r2, #3
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	e047      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10d      	bne.n	80080c6 <USB_HC_StartXfer+0x136>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	8a92      	ldrh	r2, [r2, #20]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d907      	bls.n	80080c6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	8a92      	ldrh	r2, [r2, #20]
 80080bc:	fb03 f202 	mul.w	r2, r3, r2
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61da      	str	r2, [r3, #28]
 80080c4:	e036      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	61da      	str	r2, [r3, #28]
 80080ce:	e031      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d018      	beq.n	800810a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	8a92      	ldrh	r2, [r2, #20]
 80080e0:	4413      	add	r3, r2
 80080e2:	3b01      	subs	r3, #1
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	8a92      	ldrh	r2, [r2, #20]
 80080e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ec:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80080ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080f0:	8b7b      	ldrh	r3, [r7, #26]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d90b      	bls.n	800810e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80080f6:	8b7b      	ldrh	r3, [r7, #26]
 80080f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	8a92      	ldrh	r2, [r2, #20]
 8008100:	fb03 f202 	mul.w	r2, r3, r2
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	61da      	str	r2, [r3, #28]
 8008108:	e001      	b.n	800810e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800810a:	2301      	movs	r3, #1
 800810c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	78db      	ldrb	r3, [r3, #3]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008116:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	8a92      	ldrh	r2, [r2, #20]
 800811c:	fb03 f202 	mul.w	r2, r3, r2
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	61da      	str	r2, [r3, #28]
 8008124:	e006      	b.n	8008134 <USB_HC_StartXfer+0x1a4>
 8008126:	bf00      	nop
 8008128:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800813c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800813e:	04d9      	lsls	r1, r3, #19
 8008140:	4ba3      	ldr	r3, [pc, #652]	; (80083d0 <USB_HC_StartXfer+0x440>)
 8008142:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008144:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	7d9b      	ldrb	r3, [r3, #22]
 800814a:	075b      	lsls	r3, r3, #29
 800814c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008150:	69f9      	ldr	r1, [r7, #28]
 8008152:	0148      	lsls	r0, r1, #5
 8008154:	6a39      	ldr	r1, [r7, #32]
 8008156:	4401      	add	r1, r0
 8008158:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800815c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800815e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6999      	ldr	r1, [r3, #24]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	460a      	mov	r2, r1
 8008178:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf0c      	ite	eq
 800818a:	2301      	moveq	r3, #1
 800818c:	2300      	movne	r3, #0
 800818e:	b2db      	uxtb	r3, r3
 8008190:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	7e7b      	ldrb	r3, [r7, #25]
 80081c2:	075b      	lsls	r3, r3, #29
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	0148      	lsls	r0, r1, #5
 80081c8:	6a39      	ldr	r1, [r7, #32]
 80081ca:	4401      	add	r1, r0
 80081cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80081d0:	4313      	orrs	r3, r2
 80081d2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	799b      	ldrb	r3, [r3, #6]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	f040 80c3 	bne.w	8008364 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	7c5b      	ldrb	r3, [r3, #17]
 80081e2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80081e8:	4313      	orrs	r3, r2
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	6a3a      	ldr	r2, [r7, #32]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80081f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80081fa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	6a3a      	ldr	r2, [r7, #32]
 8008210:	440a      	add	r2, r1
 8008212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008216:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800821a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	79db      	ldrb	r3, [r3, #7]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d123      	bne.n	800826c <USB_HC_StartXfer+0x2dc>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	78db      	ldrb	r3, [r3, #3]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d11f      	bne.n	800826c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	4413      	add	r3, r2
 8008234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	0151      	lsls	r1, r2, #5
 800823e:	6a3a      	ldr	r2, [r7, #32]
 8008240:	440a      	add	r2, r1
 8008242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800824a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	4413      	add	r3, r2
 8008254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	6a3a      	ldr	r2, [r7, #32]
 8008260:	440a      	add	r2, r1
 8008262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	7c9b      	ldrb	r3, [r3, #18]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d003      	beq.n	800827c <USB_HC_StartXfer+0x2ec>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	7c9b      	ldrb	r3, [r3, #18]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d117      	bne.n	80082ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008280:	2b01      	cmp	r3, #1
 8008282:	d113      	bne.n	80082ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	78db      	ldrb	r3, [r3, #3]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d10f      	bne.n	80082ac <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	4413      	add	r3, r2
 8008294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	6a3a      	ldr	r2, [r7, #32]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082aa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	7c9b      	ldrb	r3, [r3, #18]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d162      	bne.n	800837a <USB_HC_StartXfer+0x3ea>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	78db      	ldrb	r3, [r3, #3]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d15e      	bne.n	800837a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d858      	bhi.n	8008378 <USB_HC_StartXfer+0x3e8>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <USB_HC_StartXfer+0x33c>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082ff 	.word	0x080082ff
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008343 	.word	0x08008343
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	6a3a      	ldr	r2, [r7, #32]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fa:	6053      	str	r3, [r2, #4]
          break;
 80082fc:	e03d      	b.n	800837a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	440a      	add	r2, r1
 8008314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008318:	f043 030e 	orr.w	r3, r3, #14
 800831c:	6053      	str	r3, [r2, #4]
          break;
 800831e:	e02c      	b.n	800837a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	6a3a      	ldr	r2, [r7, #32]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800833e:	6053      	str	r3, [r2, #4]
          break;
 8008340:	e01b      	b.n	800837a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	4413      	add	r3, r2
 800834a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	6a3a      	ldr	r2, [r7, #32]
 8008356:	440a      	add	r2, r1
 8008358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800835c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008360:	6053      	str	r3, [r2, #4]
          break;
 8008362:	e00a      	b.n	800837a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	4413      	add	r3, r2
 800836c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008370:	461a      	mov	r2, r3
 8008372:	2300      	movs	r3, #0
 8008374:	6053      	str	r3, [r2, #4]
 8008376:	e000      	b.n	800837a <USB_HC_StartXfer+0x3ea>
          break;
 8008378:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008390:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a0:	613b      	str	r3, [r7, #16]
 80083a2:	e003      	b.n	80083ac <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083aa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083b2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c0:	461a      	mov	r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	e055      	b.n	800847c <USB_HC_StartXfer+0x4ec>
 80083d0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	78db      	ldrb	r3, [r3, #3]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d14e      	bne.n	800847a <USB_HC_StartXfer+0x4ea>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d04a      	beq.n	800847a <USB_HC_StartXfer+0x4ea>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	79db      	ldrb	r3, [r3, #7]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d146      	bne.n	800847a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	7c9b      	ldrb	r3, [r3, #18]
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d831      	bhi.n	8008458 <USB_HC_StartXfer+0x4c8>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <USB_HC_StartXfer+0x46c>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	08008431 	.word	0x08008431
 8008404:	0800840d 	.word	0x0800840d
 8008408:	08008431 	.word	0x08008431
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	3303      	adds	r3, #3
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008416:	8afa      	ldrh	r2, [r7, #22]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	b29b      	uxth	r3, r3
 800841e:	429a      	cmp	r2, r3
 8008420:	d91c      	bls.n	800845c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f043 0220 	orr.w	r2, r3, #32
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	619a      	str	r2, [r3, #24]
        }
        break;
 800842e:	e015      	b.n	800845c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	3303      	adds	r3, #3
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800843a:	8afa      	ldrh	r2, [r7, #22]
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	b29b      	uxth	r3, r3
 8008446:	429a      	cmp	r2, r3
 8008448:	d90a      	bls.n	8008460 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	619a      	str	r2, [r3, #24]
        }
        break;
 8008456:	e003      	b.n	8008460 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008458:	bf00      	nop
 800845a:	e002      	b.n	8008462 <USB_HC_StartXfer+0x4d2>
        break;
 800845c:	bf00      	nop
 800845e:	e000      	b.n	8008462 <USB_HC_StartXfer+0x4d2>
        break;
 8008460:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	6999      	ldr	r1, [r3, #24]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	785a      	ldrb	r2, [r3, #1]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	b29b      	uxth	r3, r3
 8008470:	2000      	movs	r0, #0
 8008472:	9000      	str	r0, [sp, #0]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff f9c9 	bl	800780c <USB_WritePacket>
  }

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3728      	adds	r7, #40	; 0x28
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	b29b      	uxth	r3, r3
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b089      	sub	sp, #36	; 0x24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	0c9b      	lsrs	r3, r3, #18
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	0fdb      	lsrs	r3, r3, #31
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	0fdb      	lsrs	r3, r3, #31
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b20      	cmp	r3, #32
 800850a:	d10d      	bne.n	8008528 <USB_HC_Halt+0x82>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <USB_HC_Halt+0x82>
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d002      	beq.n	8008524 <USB_HC_Halt+0x7e>
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b03      	cmp	r3, #3
 8008522:	d101      	bne.n	8008528 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	e0d8      	b.n	80086da <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <USB_HC_Halt+0x8e>
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b02      	cmp	r3, #2
 8008532:	d173      	bne.n	800861c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	440a      	add	r2, r1
 800854a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008552:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d14a      	bne.n	80085f6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d133      	bne.n	80085d4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	440a      	add	r2, r1
 8008582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800858a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085aa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b8:	d82e      	bhi.n	8008618 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d0:	d0ec      	beq.n	80085ac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085d2:	e081      	b.n	80086d8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085f2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085f4:	e070      	b.n	80086d8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008614:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008616:	e05f      	b.n	80086d8 <USB_HC_Halt+0x232>
            break;
 8008618:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800861a:	e05d      	b.n	80086d8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	440a      	add	r2, r1
 8008632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800863a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d133      	bne.n	80086b4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	69fa      	ldr	r2, [r7, #28]
 8008660:	440a      	add	r2, r1
 8008662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800866a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	440a      	add	r2, r1
 8008682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800868a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	3301      	adds	r3, #1
 8008690:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008698:	d81d      	bhi.n	80086d6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b0:	d0ec      	beq.n	800868c <USB_HC_Halt+0x1e6>
 80086b2:	e011      	b.n	80086d8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	e000      	b.n	80086d8 <USB_HC_Halt+0x232>
          break;
 80086d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3724      	adds	r7, #36	; 0x24
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
	...

080086e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80086fc:	2301      	movs	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	04da      	lsls	r2, r3, #19
 8008704:	4b15      	ldr	r3, [pc, #84]	; (800875c <USB_DoPing+0x74>)
 8008706:	4013      	ands	r3, r2
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	440a      	add	r2, r1
 8008710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008718:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008730:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008738:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	1ff80000 	.word	0x1ff80000

08008760 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7fe ff8c 	bl	8007692 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800877a:	2110      	movs	r1, #16
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fe ffe5 	bl	800774c <USB_FlushTxFifo>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff f80f 	bl	80077b0 <USB_FlushRxFifo>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800879c:	2300      	movs	r3, #0
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e01f      	b.n	80087e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d6:	461a      	mov	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	3301      	adds	r3, #1
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b0f      	cmp	r3, #15
 80087e6:	d9dc      	bls.n	80087a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	e034      	b.n	8008858 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008804:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800880c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008814:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008822:	461a      	mov	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008834:	d80c      	bhi.n	8008850 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800884c:	d0ec      	beq.n	8008828 <USB_StopHost+0xc8>
 800884e:	e000      	b.n	8008852 <USB_StopHost+0xf2>
        break;
 8008850:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	3301      	adds	r3, #1
 8008856:	61bb      	str	r3, [r7, #24]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b0f      	cmp	r3, #15
 800885c:	d9c7      	bls.n	80087ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008864:	461a      	mov	r2, r3
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f04f 32ff 	mov.w	r2, #4294967295
 8008872:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7fe fefb 	bl	8007670 <USB_EnableGlobalInt>

  return ret;
 800887a:	7ffb      	ldrb	r3, [r7, #31]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b089      	sub	sp, #36	; 0x24
 8008888:	af04      	add	r7, sp, #16
 800888a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800888c:	2301      	movs	r3, #1
 800888e:	2202      	movs	r2, #2
 8008890:	2102      	movs	r1, #2
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc85 	bl	80091a2 <USBH_FindInterface>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2bff      	cmp	r3, #255	; 0xff
 80088a0:	d002      	beq.n	80088a8 <USBH_CDC_InterfaceInit+0x24>
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d901      	bls.n	80088ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088a8:	2302      	movs	r3, #2
 80088aa:	e13d      	b.n	8008b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fc5a 	bl	800916a <USBH_SelectInterface>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80088c0:	2302      	movs	r3, #2
 80088c2:	e131      	b.n	8008b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80088ca:	2050      	movs	r0, #80	; 0x50
 80088cc:	f002 fb74 	bl	800afb8 <malloc>
 80088d0:	4603      	mov	r3, r0
 80088d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80088e4:	2302      	movs	r3, #2
 80088e6:	e11f      	b.n	8008b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80088e8:	2250      	movs	r2, #80	; 0x50
 80088ea:	2100      	movs	r1, #0
 80088ec:	68b8      	ldr	r0, [r7, #8]
 80088ee:	f002 fc1f 	bl	800b130 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	211a      	movs	r1, #26
 80088f8:	fb01 f303 	mul.w	r3, r1, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	b25b      	sxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	da15      	bge.n	8008936 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	211a      	movs	r1, #26
 8008910:	fb01 f303 	mul.w	r3, r1, r3
 8008914:	4413      	add	r3, r2
 8008916:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	211a      	movs	r1, #26
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	4413      	add	r3, r2
 800892c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008930:	881a      	ldrh	r2, [r3, #0]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 ffce 	bl	800a8de <USBH_AllocPipe>
 8008942:	4603      	mov	r3, r0
 8008944:	461a      	mov	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	7819      	ldrb	r1, [r3, #0]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	7858      	ldrb	r0, [r3, #1]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	8952      	ldrh	r2, [r2, #10]
 8008962:	9202      	str	r2, [sp, #8]
 8008964:	2203      	movs	r2, #3
 8008966:	9201      	str	r2, [sp, #4]
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4623      	mov	r3, r4
 800896c:	4602      	mov	r2, r0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 ff86 	bl	800a880 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2200      	movs	r2, #0
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f002 fa95 	bl	800aeac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008982:	2300      	movs	r3, #0
 8008984:	2200      	movs	r2, #0
 8008986:	210a      	movs	r1, #10
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc0a 	bl	80091a2 <USBH_FindInterface>
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	2bff      	cmp	r3, #255	; 0xff
 8008996:	d002      	beq.n	800899e <USBH_CDC_InterfaceInit+0x11a>
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d901      	bls.n	80089a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800899e:	2302      	movs	r3, #2
 80089a0:	e0c2      	b.n	8008b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	211a      	movs	r1, #26
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	b25b      	sxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da16      	bge.n	80089e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	211a      	movs	r1, #26
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	211a      	movs	r1, #26
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80089e0:	881a      	ldrh	r2, [r3, #0]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	835a      	strh	r2, [r3, #26]
 80089e6:	e015      	b.n	8008a14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	211a      	movs	r1, #26
 80089ee:	fb01 f303 	mul.w	r3, r1, r3
 80089f2:	4413      	add	r3, r2
 80089f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	211a      	movs	r1, #26
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a0e:	881a      	ldrh	r2, [r3, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	211a      	movs	r1, #26
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	da16      	bge.n	8008a5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	211a      	movs	r1, #26
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	211a      	movs	r1, #26
 8008a48:	fb01 f303 	mul.w	r3, r1, r3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008a52:	881a      	ldrh	r2, [r3, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	835a      	strh	r2, [r3, #26]
 8008a58:	e015      	b.n	8008a86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	211a      	movs	r1, #26
 8008a60:	fb01 f303 	mul.w	r3, r1, r3
 8008a64:	4413      	add	r3, r2
 8008a66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	211a      	movs	r1, #26
 8008a76:	fb01 f303 	mul.w	r3, r1, r3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008a80:	881a      	ldrh	r2, [r3, #0]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	7b9b      	ldrb	r3, [r3, #14]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 ff26 	bl	800a8de <USBH_AllocPipe>
 8008a92:	4603      	mov	r3, r0
 8008a94:	461a      	mov	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	7bdb      	ldrb	r3, [r3, #15]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 ff1c 	bl	800a8de <USBH_AllocPipe>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	7b59      	ldrb	r1, [r3, #13]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	7b98      	ldrb	r0, [r3, #14]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	8b12      	ldrh	r2, [r2, #24]
 8008ac6:	9202      	str	r2, [sp, #8]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	9201      	str	r2, [sp, #4]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4623      	mov	r3, r4
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fed4 	bl	800a880 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	7b19      	ldrb	r1, [r3, #12]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	7bd8      	ldrb	r0, [r3, #15]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	8b52      	ldrh	r2, [r2, #26]
 8008af0:	9202      	str	r2, [sp, #8]
 8008af2:	2202      	movs	r2, #2
 8008af4:	9201      	str	r2, [sp, #4]
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	4623      	mov	r3, r4
 8008afa:	4602      	mov	r2, r0
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 febf 	bl	800a880 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	7b5b      	ldrb	r3, [r3, #13]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f002 f9ca 	bl	800aeac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	7b1b      	ldrb	r3, [r3, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f002 f9c3 	bl	800aeac <USBH_LL_SetToggle>

  return USBH_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd90      	pop	{r4, r7, pc}

08008b30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00e      	beq.n	8008b68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 feb4 	bl	800a8be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 fedf 	bl	800a920 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	7b1b      	ldrb	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00e      	beq.n	8008b8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	7b1b      	ldrb	r3, [r3, #12]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fea1 	bl	800a8be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	7b1b      	ldrb	r3, [r3, #12]
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fecc 	bl	800a920 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	7b5b      	ldrb	r3, [r3, #13]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00e      	beq.n	8008bb4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	7b5b      	ldrb	r3, [r3, #13]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 fe8e 	bl	800a8be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	7b5b      	ldrb	r3, [r3, #13]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 feb9 	bl	800a920 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f002 f9fd 	bl	800afc8 <free>
    phost->pActiveClass->pData = 0U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3340      	adds	r3, #64	; 0x40
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8b1 	bl	8008d62 <GetLineCoding>
 8008c00:	4603      	mov	r3, r0
 8008c02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c10:	2102      	movs	r1, #2
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008c16:	7afb      	ldrb	r3, [r7, #11]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d877      	bhi.n	8008d34 <USBH_CDC_Process+0x114>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <USBH_CDC_Process+0x2c>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c61 	.word	0x08008c61
 8008c50:	08008c67 	.word	0x08008c67
 8008c54:	08008c97 	.word	0x08008c97
 8008c58:	08008d0b 	.word	0x08008d0b
 8008c5c:	08008d19 	.word	0x08008d19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e06d      	b.n	8008d42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f897 	bl	8008da0 <SetLineCoding>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c84:	e058      	b.n	8008d38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d055      	beq.n	8008d38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c94:	e050      	b.n	8008d38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	3340      	adds	r3, #64	; 0x40
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f860 	bl	8008d62 <GetLineCoding>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d126      	bne.n	8008cfa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbe:	791b      	ldrb	r3, [r3, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d13b      	bne.n	8008d3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d133      	bne.n	8008d3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cde:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d12b      	bne.n	8008d3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d124      	bne.n	8008d3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f958 	bl	8008fa8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008cf8:	e020      	b.n	8008d3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d01d      	beq.n	8008d3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2204      	movs	r2, #4
 8008d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008d08:	e018      	b.n	8008d3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f867 	bl	8008dde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f8da 	bl	8008eca <CDC_ProcessReception>
      break;
 8008d16:	e014      	b.n	8008d42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 f822 	bl	8009d64 <USBH_ClrFeature>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008d32:	e005      	b.n	8008d40 <USBH_CDC_Process+0x120>

    default:
      break;
 8008d34:	bf00      	nop
 8008d36:	e004      	b.n	8008d42 <USBH_CDC_Process+0x122>
      break;
 8008d38:	bf00      	nop
 8008d3a:	e002      	b.n	8008d42 <USBH_CDC_Process+0x122>
      break;
 8008d3c:	bf00      	nop
 8008d3e:	e000      	b.n	8008d42 <USBH_CDC_Process+0x122>
      break;
 8008d40:	bf00      	nop

  }

  return status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	22a1      	movs	r2, #161	; 0xa1
 8008d70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2221      	movs	r2, #33	; 0x21
 8008d76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2207      	movs	r2, #7
 8008d88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2207      	movs	r2, #7
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 fb23 	bl	800a3dc <USBH_CtlReq>
 8008d96:	4603      	mov	r3, r0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2221      	movs	r2, #33	; 0x21
 8008dae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2220      	movs	r2, #32
 8008db4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2207      	movs	r2, #7
 8008dc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2207      	movs	r2, #7
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fb04 	bl	800a3dc <USBH_CtlReq>
 8008dd4:	4603      	mov	r3, r0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af02      	add	r7, sp, #8
 8008de4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d002      	beq.n	8008e04 <CDC_ProcessTransmission+0x26>
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d023      	beq.n	8008e4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008e02:	e05e      	b.n	8008ec2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	8b12      	ldrh	r2, [r2, #24]
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d90b      	bls.n	8008e28 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	69d9      	ldr	r1, [r3, #28]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8b1a      	ldrh	r2, [r3, #24]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	7b5b      	ldrb	r3, [r3, #13]
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	9000      	str	r0, [sp, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 fcea 	bl	800a7fa <USBH_BulkSendData>
 8008e26:	e00b      	b.n	8008e40 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	7b5b      	ldrb	r3, [r3, #13]
 8008e36:	2001      	movs	r0, #1
 8008e38:	9000      	str	r0, [sp, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 fcdd 	bl	800a7fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e48:	e03b      	b.n	8008ec2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	7b5b      	ldrb	r3, [r3, #13]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f002 f801 	bl	800ae58 <USBH_LL_GetURBState>
 8008e56:	4603      	mov	r3, r0
 8008e58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008e5a:	7afb      	ldrb	r3, [r7, #11]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d128      	bne.n	8008eb2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	8b12      	ldrh	r2, [r2, #24]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d90e      	bls.n	8008e8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	8b12      	ldrh	r2, [r2, #24]
 8008e74:	1a9a      	subs	r2, r3, r2
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	8b12      	ldrh	r2, [r2, #24]
 8008e82:	441a      	add	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	61da      	str	r2, [r3, #28]
 8008e88:	e002      	b.n	8008e90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ea0:	e00e      	b.n	8008ec0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f868 	bl	8008f80 <USBH_CDC_TransmitCallback>
      break;
 8008eb0:	e006      	b.n	8008ec0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d103      	bne.n	8008ec0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ec0:	bf00      	nop
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b086      	sub	sp, #24
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d002      	beq.n	8008ef0 <CDC_ProcessReception+0x26>
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d00e      	beq.n	8008f0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008eee:	e043      	b.n	8008f78 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	6a19      	ldr	r1, [r3, #32]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	8b5a      	ldrh	r2, [r3, #26]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	7b1b      	ldrb	r3, [r3, #12]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fca1 	bl	800a844 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2204      	movs	r2, #4
 8008f06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008f0a:	e035      	b.n	8008f78 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	7b1b      	ldrb	r3, [r3, #12]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 ffa0 	bl	800ae58 <USBH_LL_GetURBState>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008f1c:	7cfb      	ldrb	r3, [r7, #19]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d129      	bne.n	8008f76 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	7b1b      	ldrb	r3, [r3, #12]
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 ff03 	bl	800ad34 <USBH_LL_GetLastXferSize>
 8008f2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d016      	beq.n	8008f68 <CDC_ProcessReception+0x9e>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	8b5b      	ldrh	r3, [r3, #26]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d910      	bls.n	8008f68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1ad2      	subs	r2, r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6a1a      	ldr	r2, [r3, #32]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	441a      	add	r2, r3
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2203      	movs	r2, #3
 8008f62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008f66:	e006      	b.n	8008f76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f80f 	bl	8008f94 <USBH_CDC_ReceiveCallback>
      break;
 8008f76:	bf00      	nop
  }
}
 8008f78:	bf00      	nop
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e029      	b.n	8009028 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	79fa      	ldrb	r2, [r7, #7]
 8008fd8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f81f 	bl	8009030 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f001 fdd3 	bl	800abcc <USBH_LL_Init>

  return USBH_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e009      	b.n	8009056 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	33e0      	adds	r3, #224	; 0xe0
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	2200      	movs	r2, #0
 800904e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b0f      	cmp	r3, #15
 800905a:	d9f2      	bls.n	8009042 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e009      	b.n	8009076 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800907c:	d3f1      	bcc.n	8009062 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2240      	movs	r2, #64	; 0x40
 80090a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	331c      	adds	r3, #28
 80090ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 f82b 	bl	800b130 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80090e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f002 f822 	bl	800b130 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f203 3326 	addw	r3, r3, #806	; 0x326
 80090f2:	2212      	movs	r2, #18
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 f81a 	bl	800b130 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009102:	223e      	movs	r2, #62	; 0x3e
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f002 f812 	bl	800b130 <memset>

  return USBH_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10e      	bne.n	8009152 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800913a:	1c59      	adds	r1, r3, #1
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	33de      	adds	r3, #222	; 0xde
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
 8009150:	e004      	b.n	800915c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009152:	2302      	movs	r3, #2
 8009154:	73fb      	strb	r3, [r7, #15]
 8009156:	e001      	b.n	800915c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009158:	2302      	movs	r3, #2
 800915a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009180:	78fa      	ldrb	r2, [r7, #3]
 8009182:	429a      	cmp	r2, r3
 8009184:	d204      	bcs.n	8009190 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800918e:	e001      	b.n	8009194 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009190:	2302      	movs	r3, #2
 8009192:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009194:	7bfb      	ldrb	r3, [r7, #15]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b087      	sub	sp, #28
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	4608      	mov	r0, r1
 80091ac:	4611      	mov	r1, r2
 80091ae:	461a      	mov	r2, r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	70fb      	strb	r3, [r7, #3]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70bb      	strb	r3, [r7, #2]
 80091b8:	4613      	mov	r3, r2
 80091ba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80091ca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091cc:	e025      	b.n	800921a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	221a      	movs	r2, #26
 80091d2:	fb02 f303 	mul.w	r3, r2, r3
 80091d6:	3308      	adds	r3, #8
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	3302      	adds	r3, #2
 80091de:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	795b      	ldrb	r3, [r3, #5]
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d002      	beq.n	80091f0 <USBH_FindInterface+0x4e>
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	2bff      	cmp	r3, #255	; 0xff
 80091ee:	d111      	bne.n	8009214 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091f4:	78ba      	ldrb	r2, [r7, #2]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d002      	beq.n	8009200 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091fa:	78bb      	ldrb	r3, [r7, #2]
 80091fc:	2bff      	cmp	r3, #255	; 0xff
 80091fe:	d109      	bne.n	8009214 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009204:	787a      	ldrb	r2, [r7, #1]
 8009206:	429a      	cmp	r2, r3
 8009208:	d002      	beq.n	8009210 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800920a:	787b      	ldrb	r3, [r7, #1]
 800920c:	2bff      	cmp	r3, #255	; 0xff
 800920e:	d101      	bne.n	8009214 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	e006      	b.n	8009222 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	3301      	adds	r3, #1
 8009218:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d9d6      	bls.n	80091ce <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009220:	23ff      	movs	r3, #255	; 0xff
}
 8009222:	4618      	mov	r0, r3
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fd04 	bl	800ac44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800923c:	2101      	movs	r1, #1
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fe1d 	bl	800ae7e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af04      	add	r7, sp, #16
 8009256:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009258:	2302      	movs	r3, #2
 800925a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	d102      	bne.n	8009272 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2203      	movs	r2, #3
 8009270:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b0b      	cmp	r3, #11
 800927a:	f200 81be 	bhi.w	80095fa <USBH_Process+0x3aa>
 800927e:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <USBH_Process+0x34>)
 8009280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009284:	080092b5 	.word	0x080092b5
 8009288:	080092e7 	.word	0x080092e7
 800928c:	0800934f 	.word	0x0800934f
 8009290:	08009595 	.word	0x08009595
 8009294:	080095fb 	.word	0x080095fb
 8009298:	080093f3 	.word	0x080093f3
 800929c:	0800953b 	.word	0x0800953b
 80092a0:	08009429 	.word	0x08009429
 80092a4:	08009449 	.word	0x08009449
 80092a8:	08009469 	.word	0x08009469
 80092ac:	080094ad 	.word	0x080094ad
 80092b0:	0800957d 	.word	0x0800957d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 819e 	beq.w	80095fe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80092c8:	20c8      	movs	r0, #200	; 0xc8
 80092ca:	f001 fe22 	bl	800af12 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 fd15 	bl	800acfe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092e4:	e18b      	b.n	80095fe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d107      	bne.n	8009300 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092fe:	e18d      	b.n	800961c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800930a:	d914      	bls.n	8009336 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009312:	3301      	adds	r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009322:	2b03      	cmp	r3, #3
 8009324:	d903      	bls.n	800932e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	220d      	movs	r2, #13
 800932a:	701a      	strb	r2, [r3, #0]
      break;
 800932c:	e176      	b.n	800961c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	701a      	strb	r2, [r3, #0]
      break;
 8009334:	e172      	b.n	800961c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800933c:	f103 020a 	add.w	r2, r3, #10
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009346:	200a      	movs	r0, #10
 8009348:	f001 fde3 	bl	800af12 <USBH_Delay>
      break;
 800934c:	e166      	b.n	800961c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800935e:	2104      	movs	r1, #4
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009364:	2064      	movs	r0, #100	; 0x64
 8009366:	f001 fdd4 	bl	800af12 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fca0 	bl	800acb0 <USBH_LL_GetSpeed>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2205      	movs	r2, #5
 800937e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009380:	2100      	movs	r1, #0
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 faab 	bl	800a8de <USBH_AllocPipe>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 faa3 	bl	800a8de <USBH_AllocPipe>
 8009398:	4603      	mov	r3, r0
 800939a:	461a      	mov	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7919      	ldrb	r1, [r3, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80093b4:	b292      	uxth	r2, r2
 80093b6:	9202      	str	r2, [sp, #8]
 80093b8:	2200      	movs	r2, #0
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4603      	mov	r3, r0
 80093c0:	2280      	movs	r2, #128	; 0x80
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 fa5c 	bl	800a880 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7959      	ldrb	r1, [r3, #5]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80093dc:	b292      	uxth	r2, r2
 80093de:	9202      	str	r2, [sp, #8]
 80093e0:	2200      	movs	r2, #0
 80093e2:	9201      	str	r2, [sp, #4]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4603      	mov	r3, r0
 80093e8:	2200      	movs	r2, #0
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 fa48 	bl	800a880 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093f0:	e114      	b.n	800961c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f918 	bl	8009628 <USBH_HandleEnum>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	f040 80fe 	bne.w	8009602 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009414:	2b01      	cmp	r3, #1
 8009416:	d103      	bne.n	8009420 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2208      	movs	r2, #8
 800941c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800941e:	e0f0      	b.n	8009602 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2207      	movs	r2, #7
 8009424:	701a      	strb	r2, [r3, #0]
      break;
 8009426:	e0ec      	b.n	8009602 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 80e9 	beq.w	8009606 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800943a:	2101      	movs	r1, #1
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2208      	movs	r2, #8
 8009444:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009446:	e0de      	b.n	8009606 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800944e:	b29b      	uxth	r3, r3
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fc3f 	bl	8009cd6 <USBH_SetCfg>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 80d5 	bne.w	800960a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2209      	movs	r2, #9
 8009464:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009466:	e0d0      	b.n	800960a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d016      	beq.n	80094a4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009476:	2101      	movs	r1, #1
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fc4f 	bl	8009d1c <USBH_SetFeature>
 800947e:	4603      	mov	r3, r0
 8009480:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	220a      	movs	r2, #10
 800948e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009490:	e0bd      	b.n	800960e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	f040 80b9 	bne.w	800960e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	220a      	movs	r2, #10
 80094a0:	701a      	strb	r2, [r3, #0]
      break;
 80094a2:	e0b4      	b.n	800960e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	220a      	movs	r2, #10
 80094a8:	701a      	strb	r2, [r3, #0]
      break;
 80094aa:	e0b0      	b.n	800960e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 80ad 	beq.w	8009612 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
 80094c4:	e016      	b.n	80094f4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80094c6:	7bfa      	ldrb	r2, [r7, #15]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	32de      	adds	r2, #222	; 0xde
 80094cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d0:	791a      	ldrb	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80094d8:	429a      	cmp	r2, r3
 80094da:	d108      	bne.n	80094ee <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32de      	adds	r2, #222	; 0xde
 80094e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80094ec:	e005      	b.n	80094fa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	3301      	adds	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0e5      	beq.n	80094c6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d016      	beq.n	8009532 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2206      	movs	r2, #6
 800951a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009522:	2103      	movs	r1, #3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009528:	e073      	b.n	8009612 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	220d      	movs	r2, #13
 800952e:	701a      	strb	r2, [r3, #0]
      break;
 8009530:	e06f      	b.n	8009612 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	220d      	movs	r2, #13
 8009536:	701a      	strb	r2, [r3, #0]
      break;
 8009538:	e06b      	b.n	8009612 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d017      	beq.n	8009574 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
 8009550:	4603      	mov	r3, r0
 8009552:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d103      	bne.n	8009564 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	220b      	movs	r2, #11
 8009560:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009562:	e058      	b.n	8009616 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d154      	bne.n	8009616 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220d      	movs	r2, #13
 8009570:	701a      	strb	r2, [r3, #0]
      break;
 8009572:	e050      	b.n	8009616 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	220d      	movs	r2, #13
 8009578:	701a      	strb	r2, [r3, #0]
      break;
 800957a:	e04c      	b.n	8009616 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d049      	beq.n	800961a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
      }
      break;
 8009592:	e042      	b.n	800961a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff fd47 	bl	8009030 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d009      	beq.n	80095c0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d005      	beq.n	80095d6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095d0:	2105      	movs	r1, #5
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d107      	bne.n	80095f2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff fe1f 	bl	800922e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095f0:	e014      	b.n	800961c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fb26 	bl	800ac44 <USBH_LL_Start>
      break;
 80095f8:	e010      	b.n	800961c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80095fa:	bf00      	nop
 80095fc:	e00e      	b.n	800961c <USBH_Process+0x3cc>
      break;
 80095fe:	bf00      	nop
 8009600:	e00c      	b.n	800961c <USBH_Process+0x3cc>
      break;
 8009602:	bf00      	nop
 8009604:	e00a      	b.n	800961c <USBH_Process+0x3cc>
    break;
 8009606:	bf00      	nop
 8009608:	e008      	b.n	800961c <USBH_Process+0x3cc>
      break;
 800960a:	bf00      	nop
 800960c:	e006      	b.n	800961c <USBH_Process+0x3cc>
      break;
 800960e:	bf00      	nop
 8009610:	e004      	b.n	800961c <USBH_Process+0x3cc>
      break;
 8009612:	bf00      	nop
 8009614:	e002      	b.n	800961c <USBH_Process+0x3cc>
      break;
 8009616:	bf00      	nop
 8009618:	e000      	b.n	800961c <USBH_Process+0x3cc>
      break;
 800961a:	bf00      	nop
  }
  return USBH_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop

08009628 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af04      	add	r7, sp, #16
 800962e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009630:	2301      	movs	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009634:	2301      	movs	r3, #1
 8009636:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	785b      	ldrb	r3, [r3, #1]
 800963c:	2b07      	cmp	r3, #7
 800963e:	f200 81c1 	bhi.w	80099c4 <USBH_HandleEnum+0x39c>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <USBH_HandleEnum+0x20>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009669 	.word	0x08009669
 800964c:	08009727 	.word	0x08009727
 8009650:	08009791 	.word	0x08009791
 8009654:	0800981f 	.word	0x0800981f
 8009658:	08009889 	.word	0x08009889
 800965c:	080098f9 	.word	0x080098f9
 8009660:	0800993f 	.word	0x0800993f
 8009664:	08009985 	.word	0x08009985
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009668:	2108      	movs	r1, #8
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa50 	bl	8009b10 <USBH_Get_DevDesc>
 8009670:	4603      	mov	r3, r0
 8009672:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d130      	bne.n	80096dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	7919      	ldrb	r1, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800969e:	b292      	uxth	r2, r2
 80096a0:	9202      	str	r2, [sp, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	9201      	str	r2, [sp, #4]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4603      	mov	r3, r0
 80096aa:	2280      	movs	r2, #128	; 0x80
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 f8e7 	bl	800a880 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7959      	ldrb	r1, [r3, #5]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096c6:	b292      	uxth	r2, r2
 80096c8:	9202      	str	r2, [sp, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	9201      	str	r2, [sp, #4]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	2200      	movs	r2, #0
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 f8d3 	bl	800a880 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80096da:	e175      	b.n	80099c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b03      	cmp	r3, #3
 80096e0:	f040 8172 	bne.w	80099c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096ea:	3301      	adds	r3, #1
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d903      	bls.n	8009706 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	220d      	movs	r2, #13
 8009702:	701a      	strb	r2, [r3, #0]
      break;
 8009704:	e160      	b.n	80099c8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	795b      	ldrb	r3, [r3, #5]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 f907 	bl	800a920 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 f901 	bl	800a920 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	701a      	strb	r2, [r3, #0]
      break;
 8009724:	e150      	b.n	80099c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009726:	2112      	movs	r1, #18
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f9f1 	bl	8009b10 <USBH_Get_DevDesc>
 800972e:	4603      	mov	r3, r0
 8009730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d103      	bne.n	8009740 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800973e:	e145      	b.n	80099cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b03      	cmp	r3, #3
 8009744:	f040 8142 	bne.w	80099cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800974e:	3301      	adds	r3, #1
 8009750:	b2da      	uxtb	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800975e:	2b03      	cmp	r3, #3
 8009760:	d903      	bls.n	800976a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	220d      	movs	r2, #13
 8009766:	701a      	strb	r2, [r3, #0]
      break;
 8009768:	e130      	b.n	80099cc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	795b      	ldrb	r3, [r3, #5]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 f8d5 	bl	800a920 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	791b      	ldrb	r3, [r3, #4]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 f8cf 	bl	800a920 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	701a      	strb	r2, [r3, #0]
      break;
 800978e:	e11d      	b.n	80099cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009790:	2101      	movs	r1, #1
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa7b 	bl	8009c8e <USBH_SetAddress>
 8009798:	4603      	mov	r3, r0
 800979a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d132      	bne.n	8009808 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80097a2:	2002      	movs	r0, #2
 80097a4:	f001 fbb5 	bl	800af12 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2203      	movs	r2, #3
 80097b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7919      	ldrb	r1, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80097ca:	b292      	uxth	r2, r2
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	2280      	movs	r2, #128	; 0x80
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 f851 	bl	800a880 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7959      	ldrb	r1, [r3, #5]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097f2:	b292      	uxth	r2, r2
 80097f4:	9202      	str	r2, [sp, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	9201      	str	r2, [sp, #4]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4603      	mov	r3, r0
 80097fe:	2200      	movs	r2, #0
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 f83d 	bl	800a880 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009806:	e0e3      	b.n	80099d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b03      	cmp	r3, #3
 800980c:	f040 80e0 	bne.w	80099d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	220d      	movs	r2, #13
 8009814:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	705a      	strb	r2, [r3, #1]
      break;
 800981c:	e0d8      	b.n	80099d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800981e:	2109      	movs	r1, #9
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f9a1 	bl	8009b68 <USBH_Get_CfgDesc>
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d103      	bne.n	8009838 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2204      	movs	r2, #4
 8009834:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009836:	e0cd      	b.n	80099d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	2b03      	cmp	r3, #3
 800983c:	f040 80ca 	bne.w	80099d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009846:	3301      	adds	r3, #1
 8009848:	b2da      	uxtb	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009856:	2b03      	cmp	r3, #3
 8009858:	d903      	bls.n	8009862 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	220d      	movs	r2, #13
 800985e:	701a      	strb	r2, [r3, #0]
      break;
 8009860:	e0b8      	b.n	80099d4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	795b      	ldrb	r3, [r3, #5]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f859 	bl	800a920 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	791b      	ldrb	r3, [r3, #4]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f001 f853 	bl	800a920 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
      break;
 8009886:	e0a5      	b.n	80099d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f969 	bl	8009b68 <USBH_Get_CfgDesc>
 8009896:	4603      	mov	r3, r0
 8009898:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2205      	movs	r2, #5
 80098a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098a6:	e097      	b.n	80099d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	f040 8094 	bne.w	80099d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098b6:	3301      	adds	r3, #1
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d903      	bls.n	80098d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	220d      	movs	r2, #13
 80098ce:	701a      	strb	r2, [r3, #0]
      break;
 80098d0:	e082      	b.n	80099d8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	795b      	ldrb	r3, [r3, #5]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f821 	bl	800a920 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	791b      	ldrb	r3, [r3, #4]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 f81b 	bl	800a920 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
      break;
 80098f6:	e06f      	b.n	80099d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d019      	beq.n	8009936 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800990e:	23ff      	movs	r3, #255	; 0xff
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f953 	bl	8009bbc <USBH_Get_StringDesc>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d103      	bne.n	8009928 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2206      	movs	r2, #6
 8009924:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009926:	e059      	b.n	80099dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d156      	bne.n	80099dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2206      	movs	r2, #6
 8009932:	705a      	strb	r2, [r3, #1]
      break;
 8009934:	e052      	b.n	80099dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2206      	movs	r2, #6
 800993a:	705a      	strb	r2, [r3, #1]
      break;
 800993c:	e04e      	b.n	80099dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009944:	2b00      	cmp	r3, #0
 8009946:	d019      	beq.n	800997c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009954:	23ff      	movs	r3, #255	; 0xff
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f930 	bl	8009bbc <USBH_Get_StringDesc>
 800995c:	4603      	mov	r3, r0
 800995e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d103      	bne.n	800996e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2207      	movs	r2, #7
 800996a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800996c:	e038      	b.n	80099e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b03      	cmp	r3, #3
 8009972:	d135      	bne.n	80099e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2207      	movs	r2, #7
 8009978:	705a      	strb	r2, [r3, #1]
      break;
 800997a:	e031      	b.n	80099e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2207      	movs	r2, #7
 8009980:	705a      	strb	r2, [r3, #1]
      break;
 8009982:	e02d      	b.n	80099e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800998a:	2b00      	cmp	r3, #0
 800998c:	d017      	beq.n	80099be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800999a:	23ff      	movs	r3, #255	; 0xff
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f90d 	bl	8009bbc <USBH_Get_StringDesc>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80099b0:	e018      	b.n	80099e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d115      	bne.n	80099e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]
      break;
 80099bc:	e012      	b.n	80099e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
      break;
 80099c2:	e00f      	b.n	80099e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80099c4:	bf00      	nop
 80099c6:	e00e      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099c8:	bf00      	nop
 80099ca:	e00c      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099cc:	bf00      	nop
 80099ce:	e00a      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099d0:	bf00      	nop
 80099d2:	e008      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099d4:	bf00      	nop
 80099d6:	e006      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099d8:	bf00      	nop
 80099da:	e004      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099dc:	bf00      	nop
 80099de:	e002      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <USBH_HandleEnum+0x3be>
      break;
 80099e4:	bf00      	nop
  }
  return Status;
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f804 	bl	8009a32 <USBH_HandleSof>
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b0b      	cmp	r3, #11
 8009a42:	d10a      	bne.n	8009a5a <USBH_HandleSof+0x28>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
  }
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009a72:	bf00      	nop
}
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009a8e:	bf00      	nop
}
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 f8c6 	bl	800ac7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	791b      	ldrb	r3, [r3, #4]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 ff13 	bl	800a920 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 ff0d 	bl	800a920 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af02      	add	r7, sp, #8
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009b1c:	887b      	ldrh	r3, [r7, #2]
 8009b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b22:	d901      	bls.n	8009b28 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e01b      	b.n	8009b60 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009b2e:	887b      	ldrh	r3, [r7, #2]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	4613      	mov	r3, r2
 8009b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f872 	bl	8009c24 <USBH_GetDescriptor>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b50:	887a      	ldrh	r2, [r7, #2]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f929 	bl	8009dac <USBH_ParseDevDesc>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	331c      	adds	r3, #28
 8009b78:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009b7a:	887b      	ldrh	r3, [r7, #2]
 8009b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b80:	d901      	bls.n	8009b86 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e016      	b.n	8009bb4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009b86:	887b      	ldrh	r3, [r7, #2]
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b90:	2100      	movs	r1, #0
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f846 	bl	8009c24 <USBH_GetDescriptor>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d107      	bne.n	8009bb2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009ba2:	887b      	ldrh	r3, [r7, #2]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9b3 	bl	8009f14 <USBH_ParseCfgDesc>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	460b      	mov	r3, r1
 8009bca:	72fb      	strb	r3, [r7, #11]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009bd0:	893b      	ldrh	r3, [r7, #8]
 8009bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd6:	d802      	bhi.n	8009bde <USBH_Get_StringDesc+0x22>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e01c      	b.n	8009c1c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009bea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009bf2:	893b      	ldrh	r3, [r7, #8]
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 f812 	bl	8009c24 <USBH_GetDescriptor>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d107      	bne.n	8009c1a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c10:	893a      	ldrh	r2, [r7, #8]
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 fb93 	bl	800a340 <USBH_ParseStringDesc>
  }

  return status;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	607b      	str	r3, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	72fb      	strb	r3, [r7, #11]
 8009c32:	4613      	mov	r3, r2
 8009c34:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	789b      	ldrb	r3, [r3, #2]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d11c      	bne.n	8009c78 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2206      	movs	r2, #6
 8009c4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	893a      	ldrh	r2, [r7, #8]
 8009c54:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009c56:	893b      	ldrh	r3, [r7, #8]
 8009c58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c60:	d104      	bne.n	8009c6c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f240 4209 	movw	r2, #1033	; 0x409
 8009c68:	829a      	strh	r2, [r3, #20]
 8009c6a:	e002      	b.n	8009c72 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8b3a      	ldrh	r2, [r7, #24]
 8009c76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009c78:	8b3b      	ldrh	r3, [r7, #24]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fbac 	bl	800a3dc <USBH_CtlReq>
 8009c84:	4603      	mov	r3, r0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	789b      	ldrb	r3, [r3, #2]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d10f      	bne.n	8009cc2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2205      	movs	r2, #5
 8009cac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009cae:	78fb      	ldrb	r3, [r7, #3]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fb88 	bl	800a3dc <USBH_CtlReq>
 8009ccc:	4603      	mov	r3, r0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	789b      	ldrb	r3, [r3, #2]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d10e      	bne.n	8009d08 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2209      	movs	r2, #9
 8009cf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	887a      	ldrh	r2, [r7, #2]
 8009cfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb65 	bl	800a3dc <USBH_CtlReq>
 8009d12:	4603      	mov	r3, r0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	789b      	ldrb	r3, [r3, #2]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d10f      	bne.n	8009d50 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2203      	movs	r2, #3
 8009d3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d50:	2200      	movs	r2, #0
 8009d52:	2100      	movs	r1, #0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb41 	bl	800a3dc <USBH_CtlReq>
 8009d5a:	4603      	mov	r3, r0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	789b      	ldrb	r3, [r3, #2]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d10f      	bne.n	8009d98 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fb1d 	bl	800a3dc <USBH_CtlReq>
 8009da2:	4603      	mov	r3, r0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009dc0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e098      	b.n	8009f02 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	785a      	ldrb	r2, [r3, #1]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	3302      	adds	r3, #2
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3303      	adds	r3, #3
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4313      	orrs	r3, r2
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	791a      	ldrb	r2, [r3, #4]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	795a      	ldrb	r2, [r3, #5]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	799a      	ldrb	r2, [r3, #6]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	79da      	ldrb	r2, [r3, #7]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d11b      	bne.n	8009e68 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	79db      	ldrb	r3, [r3, #7]
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	dc0f      	bgt.n	8009e58 <USBH_ParseDevDesc+0xac>
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	db0f      	blt.n	8009e5c <USBH_ParseDevDesc+0xb0>
 8009e3c:	3b08      	subs	r3, #8
 8009e3e:	4a34      	ldr	r2, [pc, #208]	; (8009f10 <USBH_ParseDevDesc+0x164>)
 8009e40:	fa22 f303 	lsr.w	r3, r2, r3
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bf14      	ite	ne
 8009e4c:	2301      	movne	r3, #1
 8009e4e:	2300      	moveq	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <USBH_ParseDevDesc+0xb8>
 8009e56:	e001      	b.n	8009e5c <USBH_ParseDevDesc+0xb0>
 8009e58:	2b40      	cmp	r3, #64	; 0x40
 8009e5a:	d003      	beq.n	8009e64 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2208      	movs	r2, #8
 8009e60:	71da      	strb	r2, [r3, #7]
        break;
 8009e62:	e000      	b.n	8009e66 <USBH_ParseDevDesc+0xba>
        break;
 8009e64:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009e66:	e00e      	b.n	8009e86 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d107      	bne.n	8009e82 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	79db      	ldrb	r3, [r3, #7]
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	d005      	beq.n	8009e86 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	71da      	strb	r2, [r3, #7]
 8009e80:	e001      	b.n	8009e86 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009e82:	2303      	movs	r3, #3
 8009e84:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d939      	bls.n	8009f00 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3309      	adds	r3, #9
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	330a      	adds	r3, #10
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	330b      	adds	r3, #11
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	021b      	lsls	r3, r3, #8
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	330c      	adds	r3, #12
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	330d      	adds	r3, #13
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	7b9a      	ldrb	r2, [r3, #14]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	7bda      	ldrb	r2, [r3, #15]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	7c1a      	ldrb	r2, [r3, #16]
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	7c5a      	ldrb	r2, [r3, #17]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	01000101 	.word	0x01000101

08009f14 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08c      	sub	sp, #48	; 0x30
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f28:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009f42:	2302      	movs	r3, #2
 8009f44:	e0db      	b.n	800a0fe <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	781a      	ldrb	r2, [r3, #0]
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	785a      	ldrb	r2, [r3, #1]
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	3303      	adds	r3, #3
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f76:	bf28      	it	cs
 8009f78:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	791a      	ldrb	r2, [r3, #4]
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	795a      	ldrb	r2, [r3, #5]
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	799a      	ldrb	r2, [r3, #6]
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	79da      	ldrb	r2, [r3, #7]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	7a1a      	ldrb	r2, [r3, #8]
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b09      	cmp	r3, #9
 8009fb0:	d002      	beq.n	8009fb8 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	2209      	movs	r2, #9
 8009fb6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	2b09      	cmp	r3, #9
 8009fbc:	f240 809d 	bls.w	800a0fa <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8009fc0:	2309      	movs	r3, #9
 8009fc2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009fc8:	e081      	b.n	800a0ce <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009fca:	f107 0316 	add.w	r3, r7, #22
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd2:	f000 f9e8 	bl	800a3a6 <USBH_GetNextDesc>
 8009fd6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	d176      	bne.n	800a0ce <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	d002      	beq.n	8009fee <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	2209      	movs	r2, #9
 8009fec:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff2:	221a      	movs	r2, #26
 8009ff4:	fb02 f303 	mul.w	r3, r2, r3
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3302      	adds	r3, #2
 800a000:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a004:	69f8      	ldr	r0, [r7, #28]
 800a006:	f000 f87e 	bl	800a106 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a014:	e043      	b.n	800a09e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a016:	f107 0316 	add.w	r3, r7, #22
 800a01a:	4619      	mov	r1, r3
 800a01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01e:	f000 f9c2 	bl	800a3a6 <USBH_GetNextDesc>
 800a022:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d138      	bne.n	800a09e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	795b      	ldrb	r3, [r3, #5]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d113      	bne.n	800a05c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d003      	beq.n	800a044 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	799b      	ldrb	r3, [r3, #6]
 800a040:	2b03      	cmp	r3, #3
 800a042:	d10b      	bne.n	800a05c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	79db      	ldrb	r3, [r3, #7]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10b      	bne.n	800a064 <USBH_ParseCfgDesc+0x150>
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b09      	cmp	r3, #9
 800a052:	d007      	beq.n	800a064 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	2209      	movs	r2, #9
 800a058:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a05a:	e003      	b.n	800a064 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	2207      	movs	r2, #7
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	e000      	b.n	800a066 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a064:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a06a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a06e:	3201      	adds	r2, #1
 800a070:	00d2      	lsls	r2, r2, #3
 800a072:	211a      	movs	r1, #26
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	4413      	add	r3, r2
 800a07a:	3308      	adds	r3, #8
 800a07c:	6a3a      	ldr	r2, [r7, #32]
 800a07e:	4413      	add	r3, r2
 800a080:	3304      	adds	r3, #4
 800a082:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a086:	69b9      	ldr	r1, [r7, #24]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f870 	bl	800a16e <USBH_ParseEPDesc>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a098:	3301      	adds	r3, #1
 800a09a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	791b      	ldrb	r3, [r3, #4]
 800a0a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d204      	bcs.n	800a0b4 <USBH_ParseCfgDesc+0x1a0>
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	885a      	ldrh	r2, [r3, #2]
 800a0ae:	8afb      	ldrh	r3, [r7, #22]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d8b0      	bhi.n	800a016 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	791b      	ldrb	r3, [r3, #4]
 800a0b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d201      	bcs.n	800a0c4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e01c      	b.n	800a0fe <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800a0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d805      	bhi.n	800a0e2 <USBH_ParseCfgDesc+0x1ce>
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	885a      	ldrh	r2, [r3, #2]
 800a0da:	8afb      	ldrh	r3, [r7, #22]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	f63f af74 	bhi.w	8009fca <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	791b      	ldrb	r3, [r3, #4]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	bf28      	it	cs
 800a0ea:	2302      	movcs	r3, #2
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d201      	bcs.n	800a0fa <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e001      	b.n	800a0fe <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800a0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3730      	adds	r7, #48	; 0x30
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	785a      	ldrb	r2, [r3, #1]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	789a      	ldrb	r2, [r3, #2]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	78da      	ldrb	r2, [r3, #3]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	3304      	adds	r3, #4
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b02      	cmp	r3, #2
 800a138:	bf28      	it	cs
 800a13a:	2302      	movcs	r3, #2
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	795a      	ldrb	r2, [r3, #5]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	799a      	ldrb	r2, [r3, #6]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	79da      	ldrb	r2, [r3, #7]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	7a1a      	ldrb	r2, [r3, #8]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	721a      	strb	r2, [r3, #8]
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a16e:	b480      	push	{r7}
 800a170:	b087      	sub	sp, #28
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	785a      	ldrb	r2, [r3, #1]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	789a      	ldrb	r2, [r3, #2]
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	78da      	ldrb	r2, [r3, #3]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3305      	adds	r3, #5
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	799a      	ldrb	r2, [r3, #6]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	889b      	ldrh	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d009      	beq.n	800a1de <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a1ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d2:	d804      	bhi.n	800a1de <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1dc:	d901      	bls.n	800a1e2 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d136      	bne.n	800a25a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	78db      	ldrb	r3, [r3, #3]
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d108      	bne.n	800a20a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	889b      	ldrh	r3, [r3, #4]
 800a1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a200:	f240 8097 	bls.w	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a204:	2303      	movs	r3, #3
 800a206:	75fb      	strb	r3, [r7, #23]
 800a208:	e093      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d107      	bne.n	800a226 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	889b      	ldrh	r3, [r3, #4]
 800a21a:	2b40      	cmp	r3, #64	; 0x40
 800a21c:	f240 8089 	bls.w	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a220:	2303      	movs	r3, #3
 800a222:	75fb      	strb	r3, [r7, #23]
 800a224:	e085      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	78db      	ldrb	r3, [r3, #3]
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d005      	beq.n	800a23e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	78db      	ldrb	r3, [r3, #3]
 800a236:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d10a      	bne.n	800a254 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	799b      	ldrb	r3, [r3, #6]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <USBH_ParseEPDesc+0xe0>
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	799b      	ldrb	r3, [r3, #6]
 800a24a:	2b10      	cmp	r3, #16
 800a24c:	d970      	bls.n	800a330 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a24e:	2303      	movs	r3, #3
 800a250:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a252:	e06d      	b.n	800a330 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a254:	2303      	movs	r3, #3
 800a256:	75fb      	strb	r3, [r7, #23]
 800a258:	e06b      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a260:	2b01      	cmp	r3, #1
 800a262:	d13c      	bne.n	800a2de <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	78db      	ldrb	r3, [r3, #3]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d005      	beq.n	800a27c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	78db      	ldrb	r3, [r3, #3]
 800a274:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d106      	bne.n	800a28a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	889b      	ldrh	r3, [r3, #4]
 800a280:	2b40      	cmp	r3, #64	; 0x40
 800a282:	d956      	bls.n	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a284:	2303      	movs	r3, #3
 800a286:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a288:	e053      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	78db      	ldrb	r3, [r3, #3]
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	2b01      	cmp	r3, #1
 800a294:	d10e      	bne.n	800a2b4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	799b      	ldrb	r3, [r3, #6]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d803      	bhi.n	800a2ae <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a2aa:	2b40      	cmp	r3, #64	; 0x40
 800a2ac:	d941      	bls.n	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	75fb      	strb	r3, [r7, #23]
 800a2b2:	e03e      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	78db      	ldrb	r3, [r3, #3]
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d10b      	bne.n	800a2d8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	799b      	ldrb	r3, [r3, #6]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d004      	beq.n	800a2d2 <USBH_ParseEPDesc+0x164>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	889b      	ldrh	r3, [r3, #4]
 800a2cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d0:	d32f      	bcc.n	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	75fb      	strb	r3, [r7, #23]
 800a2d6:	e02c      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	75fb      	strb	r3, [r7, #23]
 800a2dc:	e029      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d120      	bne.n	800a32a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	78db      	ldrb	r3, [r3, #3]
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	889b      	ldrh	r3, [r3, #4]
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d01a      	beq.n	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	75fb      	strb	r3, [r7, #23]
 800a300:	e017      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	78db      	ldrb	r3, [r3, #3]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d10a      	bne.n	800a324 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	799b      	ldrb	r3, [r3, #6]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <USBH_ParseEPDesc+0x1b0>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	889b      	ldrh	r3, [r3, #4]
 800a31a:	2b08      	cmp	r3, #8
 800a31c:	d909      	bls.n	800a332 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a31e:	2303      	movs	r3, #3
 800a320:	75fb      	strb	r3, [r7, #23]
 800a322:	e006      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a324:	2303      	movs	r3, #3
 800a326:	75fb      	strb	r3, [r7, #23]
 800a328:	e003      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a32a:	2303      	movs	r3, #3
 800a32c:	75fb      	strb	r3, [r7, #23]
 800a32e:	e000      	b.n	800a332 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a330:	bf00      	nop
  }

  return status;
 800a332:	7dfb      	ldrb	r3, [r7, #23]
}
 800a334:	4618      	mov	r0, r3
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b03      	cmp	r3, #3
 800a356:	d120      	bne.n	800a39a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	1e9a      	subs	r2, r3, #2
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	4293      	cmp	r3, r2
 800a362:	bf28      	it	cs
 800a364:	4613      	movcs	r3, r2
 800a366:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3302      	adds	r3, #2
 800a36c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a36e:	2300      	movs	r3, #0
 800a370:	82fb      	strh	r3, [r7, #22]
 800a372:	e00b      	b.n	800a38c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a374:	8afb      	ldrh	r3, [r7, #22]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	3301      	adds	r3, #1
 800a384:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a386:	8afb      	ldrh	r3, [r7, #22]
 800a388:	3302      	adds	r3, #2
 800a38a:	82fb      	strh	r3, [r7, #22]
 800a38c:	8afa      	ldrh	r2, [r7, #22]
 800a38e:	8abb      	ldrh	r3, [r7, #20]
 800a390:	429a      	cmp	r2, r3
 800a392:	d3ef      	bcc.n	800a374 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]
  }
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b085      	sub	sp, #20
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	881a      	ldrh	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	789b      	ldrb	r3, [r3, #2]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d002      	beq.n	800a3fc <USBH_CtlReq+0x20>
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d00f      	beq.n	800a41a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a3fa:	e027      	b.n	800a44c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	88fa      	ldrh	r2, [r7, #6]
 800a406:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2201      	movs	r2, #1
 800a40c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2202      	movs	r2, #2
 800a412:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a414:	2301      	movs	r3, #1
 800a416:	75fb      	strb	r3, [r7, #23]
      break;
 800a418:	e018      	b.n	800a44c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 f81c 	bl	800a458 <USBH_HandleControl>
 800a420:	4603      	mov	r3, r0
 800a422:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <USBH_CtlReq+0x54>
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d106      	bne.n	800a43e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2201      	movs	r2, #1
 800a434:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	761a      	strb	r2, [r3, #24]
      break;
 800a43c:	e005      	b.n	800a44a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b02      	cmp	r3, #2
 800a442:	d102      	bne.n	800a44a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	709a      	strb	r2, [r3, #2]
      break;
 800a44a:	bf00      	nop
  }
  return status;
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af02      	add	r7, sp, #8
 800a45e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a460:	2301      	movs	r3, #1
 800a462:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a464:	2300      	movs	r3, #0
 800a466:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	7e1b      	ldrb	r3, [r3, #24]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	2b0a      	cmp	r3, #10
 800a470:	f200 8156 	bhi.w	800a720 <USBH_HandleControl+0x2c8>
 800a474:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <USBH_HandleControl+0x24>)
 800a476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47a:	bf00      	nop
 800a47c:	0800a4a9 	.word	0x0800a4a9
 800a480:	0800a4c3 	.word	0x0800a4c3
 800a484:	0800a52d 	.word	0x0800a52d
 800a488:	0800a553 	.word	0x0800a553
 800a48c:	0800a58b 	.word	0x0800a58b
 800a490:	0800a5b5 	.word	0x0800a5b5
 800a494:	0800a607 	.word	0x0800a607
 800a498:	0800a629 	.word	0x0800a629
 800a49c:	0800a665 	.word	0x0800a665
 800a4a0:	0800a68b 	.word	0x0800a68b
 800a4a4:	0800a6c9 	.word	0x0800a6c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f103 0110 	add.w	r1, r3, #16
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	795b      	ldrb	r3, [r3, #5]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f943 	bl	800a740 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	761a      	strb	r2, [r3, #24]
      break;
 800a4c0:	e139      	b.n	800a736 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	795b      	ldrb	r3, [r3, #5]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fcc5 	bl	800ae58 <USBH_LL_GetURBState>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d11e      	bne.n	800a516 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7c1b      	ldrb	r3, [r3, #16]
 800a4dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	8adb      	ldrh	r3, [r3, #22]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a4ea:	7b7b      	ldrb	r3, [r7, #13]
 800a4ec:	2b80      	cmp	r3, #128	; 0x80
 800a4ee:	d103      	bne.n	800a4f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4f6:	e115      	b.n	800a724 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	761a      	strb	r2, [r3, #24]
      break;
 800a4fe:	e111      	b.n	800a724 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a500:	7b7b      	ldrb	r3, [r7, #13]
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d103      	bne.n	800a50e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2209      	movs	r2, #9
 800a50a:	761a      	strb	r2, [r3, #24]
      break;
 800a50c:	e10a      	b.n	800a724 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2207      	movs	r2, #7
 800a512:	761a      	strb	r2, [r3, #24]
      break;
 800a514:	e106      	b.n	800a724 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d003      	beq.n	800a524 <USBH_HandleControl+0xcc>
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	f040 8100 	bne.w	800a724 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	220b      	movs	r2, #11
 800a528:	761a      	strb	r2, [r3, #24]
      break;
 800a52a:	e0fb      	b.n	800a724 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a532:	b29a      	uxth	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6899      	ldr	r1, [r3, #8]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	899a      	ldrh	r2, [r3, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	791b      	ldrb	r3, [r3, #4]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f93a 	bl	800a7be <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2204      	movs	r2, #4
 800a54e:	761a      	strb	r2, [r3, #24]
      break;
 800a550:	e0f1      	b.n	800a736 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	791b      	ldrb	r3, [r3, #4]
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fc7d 	bl	800ae58 <USBH_LL_GetURBState>
 800a55e:	4603      	mov	r3, r0
 800a560:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d102      	bne.n	800a56e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2209      	movs	r2, #9
 800a56c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	2b05      	cmp	r3, #5
 800a572:	d102      	bne.n	800a57a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a574:	2303      	movs	r3, #3
 800a576:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a578:	e0d6      	b.n	800a728 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	f040 80d3 	bne.w	800a728 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	220b      	movs	r2, #11
 800a586:	761a      	strb	r2, [r3, #24]
      break;
 800a588:	e0ce      	b.n	800a728 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6899      	ldr	r1, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	899a      	ldrh	r2, [r3, #12]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	795b      	ldrb	r3, [r3, #5]
 800a596:	2001      	movs	r0, #1
 800a598:	9000      	str	r0, [sp, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f8ea 	bl	800a774 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2206      	movs	r2, #6
 800a5b0:	761a      	strb	r2, [r3, #24]
      break;
 800a5b2:	e0c0      	b.n	800a736 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	795b      	ldrb	r3, [r3, #5]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fc4c 	bl	800ae58 <USBH_LL_GetURBState>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d103      	bne.n	800a5d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2207      	movs	r2, #7
 800a5ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5d0:	e0ac      	b.n	800a72c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b05      	cmp	r3, #5
 800a5d6:	d105      	bne.n	800a5e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	220c      	movs	r2, #12
 800a5dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e2:	e0a3      	b.n	800a72c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d103      	bne.n	800a5f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	761a      	strb	r2, [r3, #24]
      break;
 800a5f0:	e09c      	b.n	800a72c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	f040 8099 	bne.w	800a72c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	220b      	movs	r2, #11
 800a5fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a600:	2302      	movs	r3, #2
 800a602:	73fb      	strb	r3, [r7, #15]
      break;
 800a604:	e092      	b.n	800a72c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	791b      	ldrb	r3, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f8d5 	bl	800a7be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2208      	movs	r2, #8
 800a624:	761a      	strb	r2, [r3, #24]

      break;
 800a626:	e086      	b.n	800a736 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	791b      	ldrb	r3, [r3, #4]
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fc12 	bl	800ae58 <USBH_LL_GetURBState>
 800a634:	4603      	mov	r3, r0
 800a636:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d105      	bne.n	800a64a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	220d      	movs	r2, #13
 800a642:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a648:	e072      	b.n	800a730 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d103      	bne.n	800a658 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	220b      	movs	r2, #11
 800a654:	761a      	strb	r2, [r3, #24]
      break;
 800a656:	e06b      	b.n	800a730 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a658:	7bbb      	ldrb	r3, [r7, #14]
 800a65a:	2b05      	cmp	r3, #5
 800a65c:	d168      	bne.n	800a730 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a65e:	2303      	movs	r3, #3
 800a660:	73fb      	strb	r3, [r7, #15]
      break;
 800a662:	e065      	b.n	800a730 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	795b      	ldrb	r3, [r3, #5]
 800a668:	2201      	movs	r2, #1
 800a66a:	9200      	str	r2, [sp, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	2100      	movs	r1, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f87f 	bl	800a774 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	220a      	movs	r2, #10
 800a686:	761a      	strb	r2, [r3, #24]
      break;
 800a688:	e055      	b.n	800a736 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	795b      	ldrb	r3, [r3, #5]
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fbe1 	bl	800ae58 <USBH_LL_GetURBState>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d105      	bne.n	800a6ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	220d      	movs	r2, #13
 800a6a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6aa:	e043      	b.n	800a734 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d103      	bne.n	800a6ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2209      	movs	r2, #9
 800a6b6:	761a      	strb	r2, [r3, #24]
      break;
 800a6b8:	e03c      	b.n	800a734 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d139      	bne.n	800a734 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220b      	movs	r2, #11
 800a6c4:	761a      	strb	r2, [r3, #24]
      break;
 800a6c6:	e035      	b.n	800a734 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	7e5b      	ldrb	r3, [r3, #25]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	765a      	strb	r2, [r3, #25]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7e5b      	ldrb	r3, [r3, #25]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d806      	bhi.n	800a6ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a6e8:	e025      	b.n	800a736 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6f0:	2106      	movs	r1, #6
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	795b      	ldrb	r3, [r3, #5]
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f90c 	bl	800a920 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	791b      	ldrb	r3, [r3, #4]
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f906 	bl	800a920 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a71a:	2302      	movs	r3, #2
 800a71c:	73fb      	strb	r3, [r7, #15]
      break;
 800a71e:	e00a      	b.n	800a736 <USBH_HandleControl+0x2de>

    default:
      break;
 800a720:	bf00      	nop
 800a722:	e008      	b.n	800a736 <USBH_HandleControl+0x2de>
      break;
 800a724:	bf00      	nop
 800a726:	e006      	b.n	800a736 <USBH_HandleControl+0x2de>
      break;
 800a728:	bf00      	nop
 800a72a:	e004      	b.n	800a736 <USBH_HandleControl+0x2de>
      break;
 800a72c:	bf00      	nop
 800a72e:	e002      	b.n	800a736 <USBH_HandleControl+0x2de>
      break;
 800a730:	bf00      	nop
 800a732:	e000      	b.n	800a736 <USBH_HandleControl+0x2de>
      break;
 800a734:	bf00      	nop
  }

  return status;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af04      	add	r7, sp, #16
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	4613      	mov	r3, r2
 800a74c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a74e:	79f9      	ldrb	r1, [r7, #7]
 800a750:	2300      	movs	r3, #0
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	2308      	movs	r3, #8
 800a756:	9302      	str	r3, [sp, #8]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	2300      	movs	r3, #0
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	2300      	movs	r3, #0
 800a762:	2200      	movs	r2, #0
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fb46 	bl	800adf6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af04      	add	r7, sp, #16
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	4611      	mov	r1, r2
 800a780:	461a      	mov	r2, r3
 800a782:	460b      	mov	r3, r1
 800a784:	80fb      	strh	r3, [r7, #6]
 800a786:	4613      	mov	r3, r2
 800a788:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a798:	7979      	ldrb	r1, [r7, #5]
 800a79a:	7e3b      	ldrb	r3, [r7, #24]
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	9302      	str	r3, [sp, #8]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fb21 	bl	800adf6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af04      	add	r7, sp, #16
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	80fb      	strh	r3, [r7, #6]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7d4:	7979      	ldrb	r1, [r7, #5]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9303      	str	r3, [sp, #12]
 800a7da:	88fb      	ldrh	r3, [r7, #6]
 800a7dc:	9302      	str	r3, [sp, #8]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 fb03 	bl	800adf6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a7f0:	2300      	movs	r3, #0

}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b088      	sub	sp, #32
 800a7fe:	af04      	add	r7, sp, #16
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	4611      	mov	r1, r2
 800a806:	461a      	mov	r2, r3
 800a808:	460b      	mov	r3, r1
 800a80a:	80fb      	strh	r3, [r7, #6]
 800a80c:	4613      	mov	r3, r2
 800a80e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a81e:	7979      	ldrb	r1, [r7, #5]
 800a820:	7e3b      	ldrb	r3, [r7, #24]
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	2301      	movs	r3, #1
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2302      	movs	r3, #2
 800a832:	2200      	movs	r2, #0
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 fade 	bl	800adf6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b088      	sub	sp, #32
 800a848:	af04      	add	r7, sp, #16
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4611      	mov	r1, r2
 800a850:	461a      	mov	r2, r3
 800a852:	460b      	mov	r3, r1
 800a854:	80fb      	strh	r3, [r7, #6]
 800a856:	4613      	mov	r3, r2
 800a858:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a85a:	7979      	ldrb	r1, [r7, #5]
 800a85c:	2300      	movs	r3, #0
 800a85e:	9303      	str	r3, [sp, #12]
 800a860:	88fb      	ldrh	r3, [r7, #6]
 800a862:	9302      	str	r3, [sp, #8]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	2301      	movs	r3, #1
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	2302      	movs	r3, #2
 800a86e:	2201      	movs	r2, #1
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fac0 	bl	800adf6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af04      	add	r7, sp, #16
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	4608      	mov	r0, r1
 800a88a:	4611      	mov	r1, r2
 800a88c:	461a      	mov	r2, r3
 800a88e:	4603      	mov	r3, r0
 800a890:	70fb      	strb	r3, [r7, #3]
 800a892:	460b      	mov	r3, r1
 800a894:	70bb      	strb	r3, [r7, #2]
 800a896:	4613      	mov	r3, r2
 800a898:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a89a:	7878      	ldrb	r0, [r7, #1]
 800a89c:	78ba      	ldrb	r2, [r7, #2]
 800a89e:	78f9      	ldrb	r1, [r7, #3]
 800a8a0:	8b3b      	ldrh	r3, [r7, #24]
 800a8a2:	9302      	str	r3, [sp, #8]
 800a8a4:	7d3b      	ldrb	r3, [r7, #20]
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	7c3b      	ldrb	r3, [r7, #16]
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa53 	bl	800ad5a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a8ca:	78fb      	ldrb	r3, [r7, #3]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa72 	bl	800adb8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f836 	bl	800a95c <USBH_GetFreePipe>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a8f4:	89fb      	ldrh	r3, [r7, #14]
 800a8f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d00a      	beq.n	800a914 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a8fe:	78fa      	ldrb	r2, [r7, #3]
 800a900:	89fb      	ldrh	r3, [r7, #14]
 800a902:	f003 030f 	and.w	r3, r3, #15
 800a906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	33e0      	adds	r3, #224	; 0xe0
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	440b      	add	r3, r1
 800a912:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a914:	89fb      	ldrh	r3, [r7, #14]
 800a916:	b2db      	uxtb	r3, r3
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a92c:	78fb      	ldrb	r3, [r7, #3]
 800a92e:	2b0f      	cmp	r3, #15
 800a930:	d80d      	bhi.n	800a94e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a932:	78fb      	ldrb	r3, [r7, #3]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	33e0      	adds	r3, #224	; 0xe0
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	78fb      	ldrb	r3, [r7, #3]
 800a940:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	33e0      	adds	r3, #224	; 0xe0
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	440b      	add	r3, r1
 800a94c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
 800a96c:	e00f      	b.n	800a98e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	33e0      	adds	r3, #224	; 0xe0
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	b29b      	uxth	r3, r3
 800a986:	e007      	b.n	800a998 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	3301      	adds	r3, #1
 800a98c:	73fb      	strb	r3, [r7, #15]
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	2b0f      	cmp	r3, #15
 800a992:	d9ec      	bls.n	800a96e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a994:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	490e      	ldr	r1, [pc, #56]	; (800a9e4 <MX_USB_HOST_Init+0x40>)
 800a9ac:	480e      	ldr	r0, [pc, #56]	; (800a9e8 <MX_USB_HOST_Init+0x44>)
 800a9ae:	f7fe fb05 	bl	8008fbc <USBH_Init>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a9b8:	f7f8 f9ae 	bl	8002d18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a9bc:	490b      	ldr	r1, [pc, #44]	; (800a9ec <MX_USB_HOST_Init+0x48>)
 800a9be:	480a      	ldr	r0, [pc, #40]	; (800a9e8 <MX_USB_HOST_Init+0x44>)
 800a9c0:	f7fe fba9 	bl	8009116 <USBH_RegisterClass>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a9ca:	f7f8 f9a5 	bl	8002d18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a9ce:	4806      	ldr	r0, [pc, #24]	; (800a9e8 <MX_USB_HOST_Init+0x44>)
 800a9d0:	f7fe fc2d 	bl	800922e <USBH_Start>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a9da:	f7f8 f99d 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a9de:	bf00      	nop
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	0800aa05 	.word	0x0800aa05
 800a9e8:	20002148 	.word	0x20002148
 800a9ec:	20002010 	.word	0x20002010

0800a9f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a9f4:	4802      	ldr	r0, [pc, #8]	; (800aa00 <MX_USB_HOST_Process+0x10>)
 800a9f6:	f7fe fc2b 	bl	8009250 <USBH_Process>
}
 800a9fa:	bf00      	nop
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20002148 	.word	0x20002148

0800aa04 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	2b04      	cmp	r3, #4
 800aa16:	d819      	bhi.n	800aa4c <USBH_UserProcess+0x48>
 800aa18:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <USBH_UserProcess+0x1c>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800aa4d 	.word	0x0800aa4d
 800aa24:	0800aa3d 	.word	0x0800aa3d
 800aa28:	0800aa4d 	.word	0x0800aa4d
 800aa2c:	0800aa45 	.word	0x0800aa45
 800aa30:	0800aa35 	.word	0x0800aa35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa34:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <USBH_UserProcess+0x58>)
 800aa36:	2203      	movs	r2, #3
 800aa38:	701a      	strb	r2, [r3, #0]
  break;
 800aa3a:	e008      	b.n	800aa4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa3c:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <USBH_UserProcess+0x58>)
 800aa3e:	2202      	movs	r2, #2
 800aa40:	701a      	strb	r2, [r3, #0]
  break;
 800aa42:	e004      	b.n	800aa4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <USBH_UserProcess+0x58>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	701a      	strb	r2, [r3, #0]
  break;
 800aa4a:	e000      	b.n	800aa4e <USBH_UserProcess+0x4a>

  default:
  break;
 800aa4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa4e:	bf00      	nop
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20002520 	.word	0x20002520

0800aa60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08a      	sub	sp, #40	; 0x28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa68:	f107 0314 	add.w	r3, r7, #20
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	605a      	str	r2, [r3, #4]
 800aa72:	609a      	str	r2, [r3, #8]
 800aa74:	60da      	str	r2, [r3, #12]
 800aa76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa80:	d147      	bne.n	800ab12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa82:	2300      	movs	r3, #0
 800aa84:	613b      	str	r3, [r7, #16]
 800aa86:	4b25      	ldr	r3, [pc, #148]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	4a24      	ldr	r2, [pc, #144]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aa8c:	f043 0301 	orr.w	r3, r3, #1
 800aa90:	6313      	str	r3, [r2, #48]	; 0x30
 800aa92:	4b22      	ldr	r3, [pc, #136]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	613b      	str	r3, [r7, #16]
 800aa9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aa9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aaac:	f107 0314 	add.w	r3, r7, #20
 800aab0:	4619      	mov	r1, r3
 800aab2:	481b      	ldr	r0, [pc, #108]	; (800ab20 <HAL_HCD_MspInit+0xc0>)
 800aab4:	f7f8 fca8 	bl	8003408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aab8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aabc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aabe:	2302      	movs	r3, #2
 800aac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aac6:	2300      	movs	r3, #0
 800aac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaca:	230a      	movs	r3, #10
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aace:	f107 0314 	add.w	r3, r7, #20
 800aad2:	4619      	mov	r1, r3
 800aad4:	4812      	ldr	r0, [pc, #72]	; (800ab20 <HAL_HCD_MspInit+0xc0>)
 800aad6:	f7f8 fc97 	bl	8003408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aada:	4b10      	ldr	r3, [pc, #64]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aade:	4a0f      	ldr	r2, [pc, #60]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae4:	6353      	str	r3, [r2, #52]	; 0x34
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	4b0c      	ldr	r3, [pc, #48]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aaec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaee:	4a0b      	ldr	r2, [pc, #44]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aaf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aaf4:	6453      	str	r3, [r2, #68]	; 0x44
 800aaf6:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <HAL_HCD_MspInit+0xbc>)
 800aaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab02:	2200      	movs	r2, #0
 800ab04:	2100      	movs	r1, #0
 800ab06:	2043      	movs	r0, #67	; 0x43
 800ab08:	f7f8 fc25 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab0c:	2043      	movs	r0, #67	; 0x43
 800ab0e:	f7f8 fc3e 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab12:	bf00      	nop
 800ab14:	3728      	adds	r7, #40	; 0x28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	40023800 	.word	0x40023800
 800ab20:	40020000 	.word	0x40020000

0800ab24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe ff6b 	bl	8009a0e <USBH_LL_IncTimer>
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe ffa3 	bl	8009a9a <USBH_LL_Connect>
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe ffac 	bl	8009ac8 <USBH_LL_Disconnect>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
 800ab84:	4613      	mov	r3, r2
 800ab86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe ff5d 	bl	8009a62 <USBH_LL_PortEnabled>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe ff5d 	bl	8009a7e <USBH_LL_PortDisabled>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d12a      	bne.n	800ac34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800abde:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <USBH_LL_Init+0x74>)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a15      	ldr	r2, [pc, #84]	; (800ac40 <USBH_LL_Init+0x74>)
 800abea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abee:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <USBH_LL_Init+0x74>)
 800abf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abf4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800abf6:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <USBH_LL_Init+0x74>)
 800abf8:	2208      	movs	r2, #8
 800abfa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800abfc:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <USBH_LL_Init+0x74>)
 800abfe:	2201      	movs	r2, #1
 800ac00:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac02:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <USBH_LL_Init+0x74>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac08:	4b0d      	ldr	r3, [pc, #52]	; (800ac40 <USBH_LL_Init+0x74>)
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <USBH_LL_Init+0x74>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac14:	480a      	ldr	r0, [pc, #40]	; (800ac40 <USBH_LL_Init+0x74>)
 800ac16:	f7f8 fdac 	bl	8003772 <HAL_HCD_Init>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac20:	f7f8 f87a 	bl	8002d18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac24:	4806      	ldr	r0, [pc, #24]	; (800ac40 <USBH_LL_Init+0x74>)
 800ac26:	f7f9 fa0d 	bl	8004044 <HAL_HCD_GetCurrentFrame>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fe fede 	bl	80099f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20002524 	.word	0x20002524

0800ac44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7f9 f97a 	bl	8003f54 <HAL_HCD_Start>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f95e 	bl	800af28 <USBH_Get_USB_Status>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7f9 f982 	bl	8003f9a <HAL_HCD_Stop>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 f943 	bl	800af28 <USBH_Get_USB_Status>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800acb8:	2301      	movs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f9 f9cc 	bl	8004060 <HAL_HCD_GetCurrentSpeed>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b02      	cmp	r3, #2
 800accc:	d00c      	beq.n	800ace8 <USBH_LL_GetSpeed+0x38>
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d80d      	bhi.n	800acee <USBH_LL_GetSpeed+0x3e>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <USBH_LL_GetSpeed+0x2c>
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d003      	beq.n	800ace2 <USBH_LL_GetSpeed+0x32>
 800acda:	e008      	b.n	800acee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
    break;
 800ace0:	e008      	b.n	800acf4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ace2:	2301      	movs	r3, #1
 800ace4:	73fb      	strb	r3, [r7, #15]
    break;
 800ace6:	e005      	b.n	800acf4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ace8:	2302      	movs	r3, #2
 800acea:	73fb      	strb	r3, [r7, #15]
    break;
 800acec:	e002      	b.n	800acf4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800acee:	2301      	movs	r3, #1
 800acf0:	73fb      	strb	r3, [r7, #15]
    break;
 800acf2:	bf00      	nop
  }
  return  speed;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f9 f95d 	bl	8003fd4 <HAL_HCD_ResetPort>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 f901 	bl	800af28 <USBH_Get_USB_Status>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad46:	78fa      	ldrb	r2, [r7, #3]
 800ad48:	4611      	mov	r1, r2
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7f9 f965 	bl	800401a <HAL_HCD_HC_GetXferCount>
 800ad50:	4603      	mov	r3, r0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad5a:	b590      	push	{r4, r7, lr}
 800ad5c:	b089      	sub	sp, #36	; 0x24
 800ad5e:	af04      	add	r7, sp, #16
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	4608      	mov	r0, r1
 800ad64:	4611      	mov	r1, r2
 800ad66:	461a      	mov	r2, r3
 800ad68:	4603      	mov	r3, r0
 800ad6a:	70fb      	strb	r3, [r7, #3]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70bb      	strb	r3, [r7, #2]
 800ad70:	4613      	mov	r3, r2
 800ad72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad82:	787c      	ldrb	r4, [r7, #1]
 800ad84:	78ba      	ldrb	r2, [r7, #2]
 800ad86:	78f9      	ldrb	r1, [r7, #3]
 800ad88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad8a:	9302      	str	r3, [sp, #8]
 800ad8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	4623      	mov	r3, r4
 800ad9a:	f7f8 fd51 	bl	8003840 <HAL_HCD_HC_Init>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 f8bf 	bl	800af28 <USBH_Get_USB_Status>
 800adaa:	4603      	mov	r3, r0
 800adac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adae:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd90      	pop	{r4, r7, pc}

0800adb8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7f8 fdea 	bl	80039b0 <HAL_HCD_HC_Halt>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f8a0 	bl	800af28 <USBH_Get_USB_Status>
 800ade8:	4603      	mov	r3, r0
 800adea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adec:	7bbb      	ldrb	r3, [r7, #14]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800adf6:	b590      	push	{r4, r7, lr}
 800adf8:	b089      	sub	sp, #36	; 0x24
 800adfa:	af04      	add	r7, sp, #16
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	4608      	mov	r0, r1
 800ae00:	4611      	mov	r1, r2
 800ae02:	461a      	mov	r2, r3
 800ae04:	4603      	mov	r3, r0
 800ae06:	70fb      	strb	r3, [r7, #3]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70bb      	strb	r3, [r7, #2]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae1e:	787c      	ldrb	r4, [r7, #1]
 800ae20:	78ba      	ldrb	r2, [r7, #2]
 800ae22:	78f9      	ldrb	r1, [r7, #3]
 800ae24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae28:	9303      	str	r3, [sp, #12]
 800ae2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae2c:	9302      	str	r3, [sp, #8]
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	4623      	mov	r3, r4
 800ae3a:	f7f8 fddd 	bl	80039f8 <HAL_HCD_HC_SubmitRequest>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 f86f 	bl	800af28 <USBH_Get_USB_Status>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd90      	pop	{r4, r7, pc}

0800ae58 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae6a:	78fa      	ldrb	r2, [r7, #3]
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7f9 f8be 	bl	8003ff0 <HAL_HCD_HC_GetURBState>
 800ae74:	4603      	mov	r3, r0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d103      	bne.n	800ae9c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 f872 	bl	800af80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae9c:	20c8      	movs	r0, #200	; 0xc8
 800ae9e:	f7f8 f95b 	bl	8003158 <HAL_Delay>
  return USBH_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aec2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	4613      	mov	r3, r2
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	1a9b      	subs	r3, r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	440b      	add	r3, r1
 800aed2:	3317      	adds	r3, #23
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00a      	beq.n	800aef0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	68f9      	ldr	r1, [r7, #12]
 800aede:	4613      	mov	r3, r2
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	1a9b      	subs	r3, r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	440b      	add	r3, r1
 800aee8:	333c      	adds	r3, #60	; 0x3c
 800aeea:	78ba      	ldrb	r2, [r7, #2]
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	e009      	b.n	800af04 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aef0:	78fa      	ldrb	r2, [r7, #3]
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	4613      	mov	r3, r2
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	1a9b      	subs	r3, r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	440b      	add	r3, r1
 800aefe:	333d      	adds	r3, #61	; 0x3d
 800af00:	78ba      	ldrb	r2, [r7, #2]
 800af02:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7f8 f91c 	bl	8003158 <HAL_Delay>
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af36:	79fb      	ldrb	r3, [r7, #7]
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d817      	bhi.n	800af6c <USBH_Get_USB_Status+0x44>
 800af3c:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <USBH_Get_USB_Status+0x1c>)
 800af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af42:	bf00      	nop
 800af44:	0800af55 	.word	0x0800af55
 800af48:	0800af5b 	.word	0x0800af5b
 800af4c:	0800af61 	.word	0x0800af61
 800af50:	0800af67 	.word	0x0800af67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]
    break;
 800af58:	e00b      	b.n	800af72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af5a:	2302      	movs	r3, #2
 800af5c:	73fb      	strb	r3, [r7, #15]
    break;
 800af5e:	e008      	b.n	800af72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	e005      	b.n	800af72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af66:	2302      	movs	r3, #2
 800af68:	73fb      	strb	r3, [r7, #15]
    break;
 800af6a:	e002      	b.n	800af72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af6c:	2302      	movs	r3, #2
 800af6e:	73fb      	strb	r3, [r7, #15]
    break;
 800af70:	bf00      	nop
  }
  return usb_status;
 800af72:	7bfb      	ldrb	r3, [r7, #15]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d102      	bne.n	800af9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]
 800af98:	e001      	b.n	800af9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800af9a:	2301      	movs	r3, #1
 800af9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	461a      	mov	r2, r3
 800afa2:	2101      	movs	r1, #1
 800afa4:	4803      	ldr	r0, [pc, #12]	; (800afb4 <MX_DriverVbusFS+0x34>)
 800afa6:	f7f8 fbcb 	bl	8003740 <HAL_GPIO_WritePin>
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40020800 	.word	0x40020800

0800afb8 <malloc>:
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <malloc+0xc>)
 800afba:	4601      	mov	r1, r0
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	f000 b82b 	b.w	800b018 <_malloc_r>
 800afc2:	bf00      	nop
 800afc4:	2000207c 	.word	0x2000207c

0800afc8 <free>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <free+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f000 b8f3 	b.w	800b1b8 <_free_r>
 800afd2:	bf00      	nop
 800afd4:	2000207c 	.word	0x2000207c

0800afd8 <sbrk_aligned>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	4e0e      	ldr	r6, [pc, #56]	; (800b014 <sbrk_aligned+0x3c>)
 800afdc:	460c      	mov	r4, r1
 800afde:	6831      	ldr	r1, [r6, #0]
 800afe0:	4605      	mov	r5, r0
 800afe2:	b911      	cbnz	r1, 800afea <sbrk_aligned+0x12>
 800afe4:	f000 f8ac 	bl	800b140 <_sbrk_r>
 800afe8:	6030      	str	r0, [r6, #0]
 800afea:	4621      	mov	r1, r4
 800afec:	4628      	mov	r0, r5
 800afee:	f000 f8a7 	bl	800b140 <_sbrk_r>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d00a      	beq.n	800b00c <sbrk_aligned+0x34>
 800aff6:	1cc4      	adds	r4, r0, #3
 800aff8:	f024 0403 	bic.w	r4, r4, #3
 800affc:	42a0      	cmp	r0, r4
 800affe:	d007      	beq.n	800b010 <sbrk_aligned+0x38>
 800b000:	1a21      	subs	r1, r4, r0
 800b002:	4628      	mov	r0, r5
 800b004:	f000 f89c 	bl	800b140 <_sbrk_r>
 800b008:	3001      	adds	r0, #1
 800b00a:	d101      	bne.n	800b010 <sbrk_aligned+0x38>
 800b00c:	f04f 34ff 	mov.w	r4, #4294967295
 800b010:	4620      	mov	r0, r4
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	20002908 	.word	0x20002908

0800b018 <_malloc_r>:
 800b018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b01c:	1ccd      	adds	r5, r1, #3
 800b01e:	f025 0503 	bic.w	r5, r5, #3
 800b022:	3508      	adds	r5, #8
 800b024:	2d0c      	cmp	r5, #12
 800b026:	bf38      	it	cc
 800b028:	250c      	movcc	r5, #12
 800b02a:	2d00      	cmp	r5, #0
 800b02c:	4607      	mov	r7, r0
 800b02e:	db01      	blt.n	800b034 <_malloc_r+0x1c>
 800b030:	42a9      	cmp	r1, r5
 800b032:	d905      	bls.n	800b040 <_malloc_r+0x28>
 800b034:	230c      	movs	r3, #12
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	2600      	movs	r6, #0
 800b03a:	4630      	mov	r0, r6
 800b03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b114 <_malloc_r+0xfc>
 800b044:	f000 f868 	bl	800b118 <__malloc_lock>
 800b048:	f8d8 3000 	ldr.w	r3, [r8]
 800b04c:	461c      	mov	r4, r3
 800b04e:	bb5c      	cbnz	r4, 800b0a8 <_malloc_r+0x90>
 800b050:	4629      	mov	r1, r5
 800b052:	4638      	mov	r0, r7
 800b054:	f7ff ffc0 	bl	800afd8 <sbrk_aligned>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	4604      	mov	r4, r0
 800b05c:	d155      	bne.n	800b10a <_malloc_r+0xf2>
 800b05e:	f8d8 4000 	ldr.w	r4, [r8]
 800b062:	4626      	mov	r6, r4
 800b064:	2e00      	cmp	r6, #0
 800b066:	d145      	bne.n	800b0f4 <_malloc_r+0xdc>
 800b068:	2c00      	cmp	r4, #0
 800b06a:	d048      	beq.n	800b0fe <_malloc_r+0xe6>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	4631      	mov	r1, r6
 800b070:	4638      	mov	r0, r7
 800b072:	eb04 0903 	add.w	r9, r4, r3
 800b076:	f000 f863 	bl	800b140 <_sbrk_r>
 800b07a:	4581      	cmp	r9, r0
 800b07c:	d13f      	bne.n	800b0fe <_malloc_r+0xe6>
 800b07e:	6821      	ldr	r1, [r4, #0]
 800b080:	1a6d      	subs	r5, r5, r1
 800b082:	4629      	mov	r1, r5
 800b084:	4638      	mov	r0, r7
 800b086:	f7ff ffa7 	bl	800afd8 <sbrk_aligned>
 800b08a:	3001      	adds	r0, #1
 800b08c:	d037      	beq.n	800b0fe <_malloc_r+0xe6>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	442b      	add	r3, r5
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	f8d8 3000 	ldr.w	r3, [r8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d038      	beq.n	800b10e <_malloc_r+0xf6>
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	42a2      	cmp	r2, r4
 800b0a0:	d12b      	bne.n	800b0fa <_malloc_r+0xe2>
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	605a      	str	r2, [r3, #4]
 800b0a6:	e00f      	b.n	800b0c8 <_malloc_r+0xb0>
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	1b52      	subs	r2, r2, r5
 800b0ac:	d41f      	bmi.n	800b0ee <_malloc_r+0xd6>
 800b0ae:	2a0b      	cmp	r2, #11
 800b0b0:	d917      	bls.n	800b0e2 <_malloc_r+0xca>
 800b0b2:	1961      	adds	r1, r4, r5
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	6025      	str	r5, [r4, #0]
 800b0b8:	bf18      	it	ne
 800b0ba:	6059      	strne	r1, [r3, #4]
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	bf08      	it	eq
 800b0c0:	f8c8 1000 	streq.w	r1, [r8]
 800b0c4:	5162      	str	r2, [r4, r5]
 800b0c6:	604b      	str	r3, [r1, #4]
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f104 060b 	add.w	r6, r4, #11
 800b0ce:	f000 f829 	bl	800b124 <__malloc_unlock>
 800b0d2:	f026 0607 	bic.w	r6, r6, #7
 800b0d6:	1d23      	adds	r3, r4, #4
 800b0d8:	1af2      	subs	r2, r6, r3
 800b0da:	d0ae      	beq.n	800b03a <_malloc_r+0x22>
 800b0dc:	1b9b      	subs	r3, r3, r6
 800b0de:	50a3      	str	r3, [r4, r2]
 800b0e0:	e7ab      	b.n	800b03a <_malloc_r+0x22>
 800b0e2:	42a3      	cmp	r3, r4
 800b0e4:	6862      	ldr	r2, [r4, #4]
 800b0e6:	d1dd      	bne.n	800b0a4 <_malloc_r+0x8c>
 800b0e8:	f8c8 2000 	str.w	r2, [r8]
 800b0ec:	e7ec      	b.n	800b0c8 <_malloc_r+0xb0>
 800b0ee:	4623      	mov	r3, r4
 800b0f0:	6864      	ldr	r4, [r4, #4]
 800b0f2:	e7ac      	b.n	800b04e <_malloc_r+0x36>
 800b0f4:	4634      	mov	r4, r6
 800b0f6:	6876      	ldr	r6, [r6, #4]
 800b0f8:	e7b4      	b.n	800b064 <_malloc_r+0x4c>
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	e7cc      	b.n	800b098 <_malloc_r+0x80>
 800b0fe:	230c      	movs	r3, #12
 800b100:	603b      	str	r3, [r7, #0]
 800b102:	4638      	mov	r0, r7
 800b104:	f000 f80e 	bl	800b124 <__malloc_unlock>
 800b108:	e797      	b.n	800b03a <_malloc_r+0x22>
 800b10a:	6025      	str	r5, [r4, #0]
 800b10c:	e7dc      	b.n	800b0c8 <_malloc_r+0xb0>
 800b10e:	605b      	str	r3, [r3, #4]
 800b110:	deff      	udf	#255	; 0xff
 800b112:	bf00      	nop
 800b114:	20002904 	.word	0x20002904

0800b118 <__malloc_lock>:
 800b118:	4801      	ldr	r0, [pc, #4]	; (800b120 <__malloc_lock+0x8>)
 800b11a:	f000 b84b 	b.w	800b1b4 <__retarget_lock_acquire_recursive>
 800b11e:	bf00      	nop
 800b120:	20002a48 	.word	0x20002a48

0800b124 <__malloc_unlock>:
 800b124:	4801      	ldr	r0, [pc, #4]	; (800b12c <__malloc_unlock+0x8>)
 800b126:	f000 b846 	b.w	800b1b6 <__retarget_lock_release_recursive>
 800b12a:	bf00      	nop
 800b12c:	20002a48 	.word	0x20002a48

0800b130 <memset>:
 800b130:	4402      	add	r2, r0
 800b132:	4603      	mov	r3, r0
 800b134:	4293      	cmp	r3, r2
 800b136:	d100      	bne.n	800b13a <memset+0xa>
 800b138:	4770      	bx	lr
 800b13a:	f803 1b01 	strb.w	r1, [r3], #1
 800b13e:	e7f9      	b.n	800b134 <memset+0x4>

0800b140 <_sbrk_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	4d06      	ldr	r5, [pc, #24]	; (800b15c <_sbrk_r+0x1c>)
 800b144:	2300      	movs	r3, #0
 800b146:	4604      	mov	r4, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	602b      	str	r3, [r5, #0]
 800b14c:	f7f7 ff20 	bl	8002f90 <_sbrk>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d102      	bne.n	800b15a <_sbrk_r+0x1a>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	b103      	cbz	r3, 800b15a <_sbrk_r+0x1a>
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	20002a44 	.word	0x20002a44

0800b160 <__errno>:
 800b160:	4b01      	ldr	r3, [pc, #4]	; (800b168 <__errno+0x8>)
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	2000207c 	.word	0x2000207c

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4d0d      	ldr	r5, [pc, #52]	; (800b1a4 <__libc_init_array+0x38>)
 800b170:	4c0d      	ldr	r4, [pc, #52]	; (800b1a8 <__libc_init_array+0x3c>)
 800b172:	1b64      	subs	r4, r4, r5
 800b174:	10a4      	asrs	r4, r4, #2
 800b176:	2600      	movs	r6, #0
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	4d0b      	ldr	r5, [pc, #44]	; (800b1ac <__libc_init_array+0x40>)
 800b17e:	4c0c      	ldr	r4, [pc, #48]	; (800b1b0 <__libc_init_array+0x44>)
 800b180:	f000 f8e6 	bl	800b350 <_init>
 800b184:	1b64      	subs	r4, r4, r5
 800b186:	10a4      	asrs	r4, r4, #2
 800b188:	2600      	movs	r6, #0
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0801e4d0 	.word	0x0801e4d0
 800b1a8:	0801e4d0 	.word	0x0801e4d0
 800b1ac:	0801e4d0 	.word	0x0801e4d0
 800b1b0:	0801e4d4 	.word	0x0801e4d4

0800b1b4 <__retarget_lock_acquire_recursive>:
 800b1b4:	4770      	bx	lr

0800b1b6 <__retarget_lock_release_recursive>:
 800b1b6:	4770      	bx	lr

0800b1b8 <_free_r>:
 800b1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	d044      	beq.n	800b248 <_free_r+0x90>
 800b1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c2:	9001      	str	r0, [sp, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ca:	bfb8      	it	lt
 800b1cc:	18e4      	addlt	r4, r4, r3
 800b1ce:	f7ff ffa3 	bl	800b118 <__malloc_lock>
 800b1d2:	4a1e      	ldr	r2, [pc, #120]	; (800b24c <_free_r+0x94>)
 800b1d4:	9801      	ldr	r0, [sp, #4]
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	b933      	cbnz	r3, 800b1e8 <_free_r+0x30>
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	6014      	str	r4, [r2, #0]
 800b1de:	b003      	add	sp, #12
 800b1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e4:	f7ff bf9e 	b.w	800b124 <__malloc_unlock>
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d908      	bls.n	800b1fe <_free_r+0x46>
 800b1ec:	6825      	ldr	r5, [r4, #0]
 800b1ee:	1961      	adds	r1, r4, r5
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf01      	itttt	eq
 800b1f4:	6819      	ldreq	r1, [r3, #0]
 800b1f6:	685b      	ldreq	r3, [r3, #4]
 800b1f8:	1949      	addeq	r1, r1, r5
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	e7ed      	b.n	800b1da <_free_r+0x22>
 800b1fe:	461a      	mov	r2, r3
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	b10b      	cbz	r3, 800b208 <_free_r+0x50>
 800b204:	42a3      	cmp	r3, r4
 800b206:	d9fa      	bls.n	800b1fe <_free_r+0x46>
 800b208:	6811      	ldr	r1, [r2, #0]
 800b20a:	1855      	adds	r5, r2, r1
 800b20c:	42a5      	cmp	r5, r4
 800b20e:	d10b      	bne.n	800b228 <_free_r+0x70>
 800b210:	6824      	ldr	r4, [r4, #0]
 800b212:	4421      	add	r1, r4
 800b214:	1854      	adds	r4, r2, r1
 800b216:	42a3      	cmp	r3, r4
 800b218:	6011      	str	r1, [r2, #0]
 800b21a:	d1e0      	bne.n	800b1de <_free_r+0x26>
 800b21c:	681c      	ldr	r4, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	6053      	str	r3, [r2, #4]
 800b222:	440c      	add	r4, r1
 800b224:	6014      	str	r4, [r2, #0]
 800b226:	e7da      	b.n	800b1de <_free_r+0x26>
 800b228:	d902      	bls.n	800b230 <_free_r+0x78>
 800b22a:	230c      	movs	r3, #12
 800b22c:	6003      	str	r3, [r0, #0]
 800b22e:	e7d6      	b.n	800b1de <_free_r+0x26>
 800b230:	6825      	ldr	r5, [r4, #0]
 800b232:	1961      	adds	r1, r4, r5
 800b234:	428b      	cmp	r3, r1
 800b236:	bf04      	itt	eq
 800b238:	6819      	ldreq	r1, [r3, #0]
 800b23a:	685b      	ldreq	r3, [r3, #4]
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	bf04      	itt	eq
 800b240:	1949      	addeq	r1, r1, r5
 800b242:	6021      	streq	r1, [r4, #0]
 800b244:	6054      	str	r4, [r2, #4]
 800b246:	e7ca      	b.n	800b1de <_free_r+0x26>
 800b248:	b003      	add	sp, #12
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	20002904 	.word	0x20002904

0800b250 <floor>:
 800b250:	ec51 0b10 	vmov	r0, r1, d0
 800b254:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b260:	2e13      	cmp	r6, #19
 800b262:	ee10 5a10 	vmov	r5, s0
 800b266:	ee10 8a10 	vmov	r8, s0
 800b26a:	460c      	mov	r4, r1
 800b26c:	dc31      	bgt.n	800b2d2 <floor+0x82>
 800b26e:	2e00      	cmp	r6, #0
 800b270:	da14      	bge.n	800b29c <floor+0x4c>
 800b272:	a333      	add	r3, pc, #204	; (adr r3, 800b340 <floor+0xf0>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f5 f8d6 	bl	8000428 <__adddf3>
 800b27c:	2200      	movs	r2, #0
 800b27e:	2300      	movs	r3, #0
 800b280:	f7f5 fb06 	bl	8000890 <__aeabi_dcmpgt>
 800b284:	b138      	cbz	r0, 800b296 <floor+0x46>
 800b286:	2c00      	cmp	r4, #0
 800b288:	da53      	bge.n	800b332 <floor+0xe2>
 800b28a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b28e:	4325      	orrs	r5, r4
 800b290:	d052      	beq.n	800b338 <floor+0xe8>
 800b292:	4c2d      	ldr	r4, [pc, #180]	; (800b348 <floor+0xf8>)
 800b294:	2500      	movs	r5, #0
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	e024      	b.n	800b2e6 <floor+0x96>
 800b29c:	4f2b      	ldr	r7, [pc, #172]	; (800b34c <floor+0xfc>)
 800b29e:	4137      	asrs	r7, r6
 800b2a0:	ea01 0307 	and.w	r3, r1, r7
 800b2a4:	4303      	orrs	r3, r0
 800b2a6:	d01e      	beq.n	800b2e6 <floor+0x96>
 800b2a8:	a325      	add	r3, pc, #148	; (adr r3, 800b340 <floor+0xf0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f5 f8bb 	bl	8000428 <__adddf3>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f7f5 faeb 	bl	8000890 <__aeabi_dcmpgt>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d0eb      	beq.n	800b296 <floor+0x46>
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	bfbe      	ittt	lt
 800b2c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b2c6:	4133      	asrlt	r3, r6
 800b2c8:	18e4      	addlt	r4, r4, r3
 800b2ca:	ea24 0407 	bic.w	r4, r4, r7
 800b2ce:	2500      	movs	r5, #0
 800b2d0:	e7e1      	b.n	800b296 <floor+0x46>
 800b2d2:	2e33      	cmp	r6, #51	; 0x33
 800b2d4:	dd0b      	ble.n	800b2ee <floor+0x9e>
 800b2d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b2da:	d104      	bne.n	800b2e6 <floor+0x96>
 800b2dc:	ee10 2a10 	vmov	r2, s0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	f7f5 f8a1 	bl	8000428 <__adddf3>
 800b2e6:	ec41 0b10 	vmov	d0, r0, r1
 800b2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b2f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b2f6:	40df      	lsrs	r7, r3
 800b2f8:	4238      	tst	r0, r7
 800b2fa:	d0f4      	beq.n	800b2e6 <floor+0x96>
 800b2fc:	a310      	add	r3, pc, #64	; (adr r3, 800b340 <floor+0xf0>)
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	f7f5 f891 	bl	8000428 <__adddf3>
 800b306:	2200      	movs	r2, #0
 800b308:	2300      	movs	r3, #0
 800b30a:	f7f5 fac1 	bl	8000890 <__aeabi_dcmpgt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d0c1      	beq.n	800b296 <floor+0x46>
 800b312:	2c00      	cmp	r4, #0
 800b314:	da0a      	bge.n	800b32c <floor+0xdc>
 800b316:	2e14      	cmp	r6, #20
 800b318:	d101      	bne.n	800b31e <floor+0xce>
 800b31a:	3401      	adds	r4, #1
 800b31c:	e006      	b.n	800b32c <floor+0xdc>
 800b31e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b322:	2301      	movs	r3, #1
 800b324:	40b3      	lsls	r3, r6
 800b326:	441d      	add	r5, r3
 800b328:	45a8      	cmp	r8, r5
 800b32a:	d8f6      	bhi.n	800b31a <floor+0xca>
 800b32c:	ea25 0507 	bic.w	r5, r5, r7
 800b330:	e7b1      	b.n	800b296 <floor+0x46>
 800b332:	2500      	movs	r5, #0
 800b334:	462c      	mov	r4, r5
 800b336:	e7ae      	b.n	800b296 <floor+0x46>
 800b338:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b33c:	e7ab      	b.n	800b296 <floor+0x46>
 800b33e:	bf00      	nop
 800b340:	8800759c 	.word	0x8800759c
 800b344:	7e37e43c 	.word	0x7e37e43c
 800b348:	bff00000 	.word	0xbff00000
 800b34c:	000fffff 	.word	0x000fffff

0800b350 <_init>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	bf00      	nop
 800b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b356:	bc08      	pop	{r3}
 800b358:	469e      	mov	lr, r3
 800b35a:	4770      	bx	lr

0800b35c <_fini>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	bf00      	nop
 800b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b362:	bc08      	pop	{r3}
 800b364:	469e      	mov	lr, r3
 800b366:	4770      	bx	lr
